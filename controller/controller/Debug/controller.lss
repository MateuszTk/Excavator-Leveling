
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a6  00800100  000021e0  00002274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008003a6  008003a6  0000251a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000251a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002983  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008de  00000000  00000000  000050c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001355  00000000  00000000  000059a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a0  00000000  00000000  00006cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000876  00000000  00000000  00007298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d77  00000000  00000000  00007b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00009885  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_1>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_7>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	9f 06       	cpc	r9, r31
      6a:	ad 06       	cpc	r10, r29
      6c:	ca 06       	cpc	r12, r26
      6e:	e7 06       	cpc	r14, r23
      70:	04 07       	cpc	r16, r20
      72:	21 07       	cpc	r18, r17
      74:	3e 07       	cpc	r19, r30
      76:	5b 07       	cpc	r21, r27
      78:	78 07       	cpc	r23, r24
      7a:	95 07       	cpc	r25, r21
      7c:	b2 07       	cpc	r27, r18
      7e:	cf 07       	cpc	r28, r31
      80:	ec 07       	cpc	r30, r28
      82:	09 08       	sbc	r0, r9
      84:	49 08       	sbc	r4, r9
      86:	87 08       	sbc	r8, r7

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	13 e0       	ldi	r17, 0x03	; 3
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e0 ee       	ldi	r30, 0xE0	; 224
      9c:	f1 e2       	ldi	r31, 0x21	; 33
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a6 3a       	cpi	r26, 0xA6	; 166
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	23 e0       	ldi	r18, 0x03	; 3
      ac:	a6 ea       	ldi	r26, 0xA6	; 166
      ae:	b3 e0       	ldi	r27, 0x03	; 3
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a5 3b       	cpi	r26, 0xB5	; 181
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
      ba:	0e 94 b8 0a 	call	0x1570	; 0x1570 <main>
      be:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <USART_init>:
}

void USART_flush(){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
}
      c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
      ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      ce:	88 e1       	ldi	r24, 0x18	; 24
      d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
      d4:	86 e0       	ldi	r24, 0x06	; 6
      d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
      da:	08 95       	ret

000000dc <USART_transmit>:
      dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      e0:	95 ff       	sbrs	r25, 5
      e2:	fc cf       	rjmp	.-8      	; 0xdc <USART_transmit>
      e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      e8:	08 95       	ret

000000ea <USART_print>:
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	8c 01       	movw	r16, r24
      f4:	c0 e0       	ldi	r28, 0x00	; 0
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	03 c0       	rjmp	.+6      	; 0x100 <USART_print+0x16>
      fa:	21 96       	adiw	r28, 0x01	; 1
      fc:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_transmit>
     100:	f8 01       	movw	r30, r16
     102:	ec 0f       	add	r30, r28
     104:	fd 1f       	adc	r31, r29
     106:	80 81       	ld	r24, Z
     108:	81 11       	cpse	r24, r1
     10a:	f7 cf       	rjmp	.-18     	; 0xfa <USART_print+0x10>
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	08 95       	ret

00000116 <USART_print_int>:
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	60 97       	sbiw	r28, 0x10	; 16
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	f8 94       	cli
     124:	de bf       	out	0x3e, r29	; 62
     126:	0f be       	out	0x3f, r0	; 63
     128:	cd bf       	out	0x3d, r28	; 61
     12a:	ab 01       	movw	r20, r22
     12c:	be 01       	movw	r22, r28
     12e:	6f 5f       	subi	r22, 0xFF	; 255
     130:	7f 4f       	sbci	r23, 0xFF	; 255
     132:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <itoa>
     136:	ce 01       	movw	r24, r28
     138:	01 96       	adiw	r24, 0x01	; 1
     13a:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
     13e:	60 96       	adiw	r28, 0x10	; 16
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <USART_print_float>:
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	60 97       	sbiw	r28, 0x10	; 16
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	6b 01       	movw	r12, r22
     16e:	7c 01       	movw	r14, r24
     170:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixsfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	4a e0       	ldi	r20, 0x0A	; 10
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	be 01       	movw	r22, r28
     17e:	6f 5f       	subi	r22, 0xFF	; 255
     180:	7f 4f       	sbci	r23, 0xFF	; 255
     182:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <itoa>
     186:	ce 01       	movw	r24, r28
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
     18e:	82 e2       	ldi	r24, 0x22	; 34
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	4a e7       	ldi	r20, 0x7A	; 122
     19c:	54 e4       	ldi	r21, 0x44	; 68
     19e:	c7 01       	movw	r24, r14
     1a0:	b6 01       	movw	r22, r12
     1a2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     1a6:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixsfsi>
     1aa:	dc 01       	movw	r26, r24
     1ac:	cb 01       	movw	r24, r22
     1ae:	4a e0       	ldi	r20, 0x0A	; 10
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	be 01       	movw	r22, r28
     1b4:	6f 5f       	subi	r22, 0xFF	; 255
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <itoa>
     1bc:	ce 01       	movw	r24, r28
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
     1c4:	60 96       	adiw	r28, 0x10	; 16
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	df 90       	pop	r13
     1da:	cf 90       	pop	r12
     1dc:	08 95       	ret

000001de <USART_read>:
     1de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1e2:	88 23       	and	r24, r24
     1e4:	e4 f7       	brge	.-8      	; 0x1de <USART_read>
     1e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     1ea:	08 95       	ret

000001ec <USART_avaliable>:
     1ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1f0:	80 78       	andi	r24, 0x80	; 128
     1f2:	08 95       	ret

000001f4 <USART_read_int>:

int USART_read_int(){
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	60 97       	sbiw	r28, 0x10	; 16
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
	char buff[16];
	int i = 0;
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	08 c0       	rjmp	.+16     	; 0x222 <USART_read_int+0x2e>
	while (1){
		buff[i] = USART_read();
		if (buff[0] == ' ' || buff[0] == '\n' || buff[0] == '\r'){
			i = 0;
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	05 c0       	rjmp	.+10     	; 0x222 <USART_read_int+0x2e>
     218:	00 e0       	ldi	r16, 0x00	; 0
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <USART_read_int+0x2e>
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	10 e0       	ldi	r17, 0x00	; 0

int USART_read_int(){
	char buff[16];
	int i = 0;
	while (1){
		buff[i] = USART_read();
     222:	0e 94 ef 00 	call	0x1de	; 0x1de <USART_read>
     226:	e1 e0       	ldi	r30, 0x01	; 1
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	ec 0f       	add	r30, r28
     22c:	fd 1f       	adc	r31, r29
     22e:	e0 0f       	add	r30, r16
     230:	f1 1f       	adc	r31, r17
     232:	80 83       	st	Z, r24
		if (buff[0] == ' ' || buff[0] == '\n' || buff[0] == '\r'){
     234:	99 81       	ldd	r25, Y+1	; 0x01
     236:	90 32       	cpi	r25, 0x20	; 32
     238:	61 f3       	breq	.-40     	; 0x212 <USART_read_int+0x1e>
     23a:	9a 30       	cpi	r25, 0x0A	; 10
     23c:	69 f3       	breq	.-38     	; 0x218 <USART_read_int+0x24>
     23e:	9d 30       	cpi	r25, 0x0D	; 13
     240:	71 f3       	breq	.-36     	; 0x21e <USART_read_int+0x2a>
			i = 0;
			continue;
		}
		if (buff[i] == '\n' || buff[i] == '\r' || buff[i] == ' ' || i == 15){
     242:	8a 30       	cpi	r24, 0x0A	; 10
     244:	39 f0       	breq	.+14     	; 0x254 <USART_read_int+0x60>
     246:	8d 30       	cpi	r24, 0x0D	; 13
     248:	29 f0       	breq	.+10     	; 0x254 <USART_read_int+0x60>
     24a:	80 32       	cpi	r24, 0x20	; 32
     24c:	19 f0       	breq	.+6      	; 0x254 <USART_read_int+0x60>
     24e:	0f 30       	cpi	r16, 0x0F	; 15
     250:	11 05       	cpc	r17, r1
     252:	61 f4       	brne	.+24     	; 0x26c <USART_read_int+0x78>
			buff[i] = 0;
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	e0 0f       	add	r30, r16
     25e:	f1 1f       	adc	r31, r17
     260:	10 82       	st	Z, r1
			break;
		}

		i++;
	}
	return atoi(buff);
     262:	ce 01       	movw	r24, r28
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <atoi>
     26a:	03 c0       	rjmp	.+6      	; 0x272 <USART_read_int+0x7e>
		if (buff[i] == '\n' || buff[i] == '\r' || buff[i] == ' ' || i == 15){
			buff[i] = 0;
			break;
		}

		i++;
     26c:	0f 5f       	subi	r16, 0xFF	; 255
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	d8 cf       	rjmp	.-80     	; 0x222 <USART_read_int+0x2e>
	}
	return atoi(buff);
}
     272:	60 96       	adiw	r28, 0x10	; 16
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	08 95       	ret

00000288 <software_serial_init>:
}
#else

void software_serial_init() {
	// input, pullup
	DDRD &= ~(1 << RX_PIN);
     288:	8a b1       	in	r24, 0x0a	; 10
     28a:	8b 7f       	andi	r24, 0xFB	; 251
     28c:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1 << RX_PIN);

	// Configure Timer2
	TCCR2A = (1 << WGM21); // CTC mode
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS21); // Prescaler 8
     294:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = BIT_DURATION; // Compare match value
     298:	80 ed       	ldi	r24, 0xD0	; 208
     29a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

	// Enable Timer2 compare match A interrupt
	TIMSK2 |= (1 << OCIE2A);
     29e:	e0 e7       	ldi	r30, 0x70	; 112
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	82 60       	ori	r24, 0x02	; 2
     2a6:	80 83       	st	Z, r24

	// Enable external interrupt INT0 for RX pin
	cli();
     2a8:	f8 94       	cli
	// Falling edge
	EICRA |= (1 << ISC01); 
     2aa:	e9 e6       	ldi	r30, 0x69	; 105
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
     2b4:	8d b3       	in	r24, 0x1d	; 29
     2b6:	81 60       	ori	r24, 0x01	; 1
     2b8:	8d bb       	out	0x1d, r24	; 29
	sei();
     2ba:	78 94       	sei
     2bc:	08 95       	ret

000002be <__vector_7>:
}

ISR(TIMER2_COMPA_vect) {
     2be:	1f 92       	push	r1
     2c0:	0f 92       	push	r0
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	0f 92       	push	r0
     2c6:	11 24       	eor	r1, r1
     2c8:	2f 93       	push	r18
     2ca:	3f 93       	push	r19
     2cc:	4f 93       	push	r20
     2ce:	5f 93       	push	r21
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	ef 93       	push	r30
     2d6:	ff 93       	push	r31
	static uint16_t rxByte = 0;
	static uint8_t rxBit = 0;

	if ((PIND & (1 << RX_PIN)) && rxBit > 0) {
     2d8:	4a 9b       	sbis	0x09, 2	; 9
     2da:	19 c0       	rjmp	.+50     	; 0x30e <__vector_7+0x50>
     2dc:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <rxBit.1788>
     2e0:	88 23       	and	r24, r24
     2e2:	a9 f0       	breq	.+42     	; 0x30e <__vector_7+0x50>
		rxByte |= (1 << rxBit - 1);
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	a9 01       	movw	r20, r18
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__vector_7+0x36>
     2f0:	44 0f       	add	r20, r20
     2f2:	55 1f       	adc	r21, r21
     2f4:	8a 95       	dec	r24
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <__vector_7+0x32>
     2f8:	ca 01       	movw	r24, r20
     2fa:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <rxByte.1787>
     2fe:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <rxByte.1787+0x1>
     302:	82 2b       	or	r24, r18
     304:	93 2b       	or	r25, r19
     306:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <rxByte.1787+0x1>
     30a:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <rxByte.1787>
	}

	rxBit++;
     30e:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <rxBit.1788>
     312:	8f 5f       	subi	r24, 0xFF	; 255
     314:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <rxBit.1788>
	if (rxBit >= 9) {
     318:	89 30       	cpi	r24, 0x09	; 9
     31a:	e0 f0       	brcs	.+56     	; 0x354 <__vector_7+0x96>
		rxBuffer = rxByte;
     31c:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <rxByte.1787>
     320:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <rxByte.1787+0x1>
     324:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <rxBuffer+0x1>
     328:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <rxBuffer>
		rxAvailable = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <rxAvailable>
		rxByte = 0;
     332:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <rxByte.1787+0x1>
     336:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <rxByte.1787>
		rxBit = 0;
     33a:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <rxBit.1788>

		// Stop Timer2
		TIMSK2 &= ~(1 << OCIE2A);
     33e:	e0 e7       	ldi	r30, 0x70	; 112
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	80 83       	st	Z, r24

		// Re-enable INT0 interrupt
		EIFR |= (1 << INTF0);
     348:	8c b3       	in	r24, 0x1c	; 28
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	8c bb       	out	0x1c, r24	; 28
		EIMSK |= (1 << INT0);
     34e:	8d b3       	in	r24, 0x1d	; 29
     350:	81 60       	ori	r24, 0x01	; 1
     352:	8d bb       	out	0x1d, r24	; 29
	}
}
     354:	ff 91       	pop	r31
     356:	ef 91       	pop	r30
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	5f 91       	pop	r21
     35e:	4f 91       	pop	r20
     360:	3f 91       	pop	r19
     362:	2f 91       	pop	r18
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <__vector_1>:

ISR(INT0_vect) {
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	8f 93       	push	r24
     37a:	ef 93       	push	r30
     37c:	ff 93       	push	r31
	// Disable INT0 interrupt
	EIMSK &= ~(1 << INT0);
     37e:	8d b3       	in	r24, 0x1d	; 29
     380:	8e 7f       	andi	r24, 0xFE	; 254
     382:	8d bb       	out	0x1d, r24	; 29

	// Start Timer2 with phase offset
	TCNT2 = BIT_DURATION / 2;
     384:	88 e6       	ldi	r24, 0x68	; 104
     386:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	// Clear any pending compare match
	TIFR2 |= (1 << OCF2A);
     38a:	87 b3       	in	r24, 0x17	; 23
     38c:	82 60       	ori	r24, 0x02	; 2
     38e:	87 bb       	out	0x17, r24	; 23
	// Enable Timer2 compare match interrupt
	TIMSK2 |= (1 << OCIE2A);
     390:	e0 e7       	ldi	r30, 0x70	; 112
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	82 60       	ori	r24, 0x02	; 2
     398:	80 83       	st	Z, r24
}
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	8f 91       	pop	r24
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <software_serial_read>:

#endif

uint16_t software_serial_read() {
	while (!rxAvailable);
     3aa:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <rxAvailable>
     3ae:	88 23       	and	r24, r24
     3b0:	e1 f3       	breq	.-8      	; 0x3aa <software_serial_read>

	rxAvailable = 0;
     3b2:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <rxAvailable>
	return rxBuffer;
     3b6:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <rxBuffer>
     3ba:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <rxBuffer+0x1>
}
     3be:	08 95       	ret

000003c0 <software_serial_available>:

uint8_t software_serial_available() {
	return rxAvailable;
     3c0:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <rxAvailable>
}
     3c4:	08 95       	ret

000003c6 <EEPROM_read>:
#define EEPROM_H_

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     3c6:	f9 99       	sbic	0x1f, 1	; 31
     3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
     3ca:	92 bd       	out	0x22, r25	; 34
     3cc:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     3ce:	8f b3       	in	r24, 0x1f	; 31
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
     3d4:	80 b5       	in	r24, 0x20	; 32
}
     3d6:	08 95       	ret

000003d8 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	8c 01       	movw	r16, r24
     3e0:	c6 2f       	mov	r28, r22
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE)) ;
     3e2:	f9 99       	sbic	0x1f, 1	; 31
     3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <EEPROM_write+0xa>
	
	unsigned char current = EEPROM_read(uiAddress);
     3e6:	c8 01       	movw	r24, r16
     3e8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <EEPROM_read>
	if (current != ucData){
     3ec:	8c 17       	cp	r24, r28
     3ee:	49 f0       	breq	.+18     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		/* Set up address and Data Registers */
		EEAR = uiAddress;
     3f0:	12 bd       	out	0x22, r17	; 34
     3f2:	01 bd       	out	0x21, r16	; 33
		EEDR = ucData;
     3f4:	c0 bd       	out	0x20, r28	; 32
		/* Write logical one to EEMPE */
		EECR |= (1<<EEMPE);
     3f6:	8f b3       	in	r24, 0x1f	; 31
     3f8:	84 60       	ori	r24, 0x04	; 4
     3fa:	8f bb       	out	0x1f, r24	; 31
		/* Start eeprom write by setting EEPE */
		EECR |= (1<<EEPE);
     3fc:	8f b3       	in	r24, 0x1f	; 31
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	8f bb       	out	0x1f, r24	; 31
	}
}
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <config_print>:
	int16_t release_position_b;
	float step_up;
	float step_down;
} config_t;

void config_print(config_t* config){
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	8c 01       	movw	r16, r24
	USART_print("1. valid_sample_timeout: ");
     414:	84 e2       	ldi	r24, 0x24	; 36
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_int(config->valid_sample_timeout, 10);
     41c:	6a e0       	ldi	r22, 0x0A	; 10
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	f8 01       	movw	r30, r16
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>
	
	USART_print("\n2. positions_a: ");
     42a:	8e e3       	ldi	r24, 0x3E	; 62
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	for (int i = 0; i < 5; i++){
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	12 c0       	rjmp	.+36     	; 0x45c <config_print+0x52>
		USART_print_int(config->positions_a[i], 10);
     438:	ec 01       	movw	r28, r24
     43a:	21 96       	adiw	r28, 0x01	; 1
     43c:	fe 01       	movw	r30, r28
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	e0 0f       	add	r30, r16
     444:	f1 1f       	adc	r31, r17
     446:	6a e0       	ldi	r22, 0x0A	; 10
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>
		USART_print(" ");
     452:	8c ec       	ldi	r24, 0xCC	; 204
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
void config_print(config_t* config){
	USART_print("1. valid_sample_timeout: ");
	USART_print_int(config->valid_sample_timeout, 10);
	
	USART_print("\n2. positions_a: ");
	for (int i = 0; i < 5; i++){
     45a:	ce 01       	movw	r24, r28
     45c:	85 30       	cpi	r24, 0x05	; 5
     45e:	91 05       	cpc	r25, r1
     460:	5c f3       	brlt	.-42     	; 0x438 <config_print+0x2e>
		USART_print_int(config->positions_a[i], 10);
		USART_print(" ");
	}

	USART_print("\n3. positions_b: ");
     462:	80 e5       	ldi	r24, 0x50	; 80
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	for (int i = 0; i < 5; i++){
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	d0 e0       	ldi	r29, 0x00	; 0
     46e:	11 c0       	rjmp	.+34     	; 0x492 <config_print+0x88>
		USART_print_int(config->positions_b[i], 10);
     470:	fe 01       	movw	r30, r28
     472:	36 96       	adiw	r30, 0x06	; 6
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	e0 0f       	add	r30, r16
     47a:	f1 1f       	adc	r31, r17
     47c:	6a e0       	ldi	r22, 0x0A	; 10
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>
		USART_print(" ");
     488:	8c ec       	ldi	r24, 0xCC	; 204
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
		USART_print_int(config->positions_a[i], 10);
		USART_print(" ");
	}

	USART_print("\n3. positions_b: ");
	for (int i = 0; i < 5; i++){
     490:	21 96       	adiw	r28, 0x01	; 1
     492:	c5 30       	cpi	r28, 0x05	; 5
     494:	d1 05       	cpc	r29, r1
     496:	64 f3       	brlt	.-40     	; 0x470 <config_print+0x66>
		USART_print_int(config->positions_b[i], 10);
		USART_print(" ");
	}

	USART_print("\n4. release_position_a: ");
     498:	82 e6       	ldi	r24, 0x62	; 98
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_int(config->release_position_a, 10);
     4a0:	6a e0       	ldi	r22, 0x0A	; 10
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	f8 01       	movw	r30, r16
     4a6:	86 89       	ldd	r24, Z+22	; 0x16
     4a8:	97 89       	ldd	r25, Z+23	; 0x17
     4aa:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>

	USART_print("\n5. release_position_b: ");
     4ae:	8b e7       	ldi	r24, 0x7B	; 123
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_int(config->release_position_b, 10);
     4b6:	6a e0       	ldi	r22, 0x0A	; 10
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	f8 01       	movw	r30, r16
     4bc:	80 8d       	ldd	r24, Z+24	; 0x18
     4be:	91 8d       	ldd	r25, Z+25	; 0x19
     4c0:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>

	USART_print("\n6. step_up: ");
     4c4:	84 e9       	ldi	r24, 0x94	; 148
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_float(config->step_up);
     4cc:	f8 01       	movw	r30, r16
     4ce:	62 8d       	ldd	r22, Z+26	; 0x1a
     4d0:	73 8d       	ldd	r23, Z+27	; 0x1b
     4d2:	84 8d       	ldd	r24, Z+28	; 0x1c
     4d4:	95 8d       	ldd	r25, Z+29	; 0x1d
     4d6:	0e 94 a8 00 	call	0x150	; 0x150 <USART_print_float>

	USART_print("\n7. step_down: ");
     4da:	82 ea       	ldi	r24, 0xA2	; 162
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_float(config->step_down);
     4e2:	f8 01       	movw	r30, r16
     4e4:	66 8d       	ldd	r22, Z+30	; 0x1e
     4e6:	77 8d       	ldd	r23, Z+31	; 0x1f
     4e8:	80 a1       	ldd	r24, Z+32	; 0x20
     4ea:	91 a1       	ldd	r25, Z+33	; 0x21
     4ec:	0e 94 a8 00 	call	0x150	; 0x150 <USART_print_float>
	
	USART_print("\n");
     4f0:	87 e0       	ldi	r24, 0x07	; 7
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <config_save>:

void config_save(const config_t* config){
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	8c 01       	movw	r16, r24
	cli();
     50c:	f8 94       	cli
	uint8_t* config_data = (uint8_t*)config;
	
	for (int i = 0; i < sizeof(config_t) + 1; i++){
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	10 c0       	rjmp	.+32     	; 0x534 <config_save+0x32>
		if (i == 0){
     514:	20 97       	sbiw	r28, 0x00	; 0
     516:	31 f4       	brne	.+12     	; 0x524 <config_save+0x22>
			EEPROM_write(CONFGIG_ADDR, MAGIC_NUMBER);
     518:	62 e2       	ldi	r22, 0x22	; 34
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <EEPROM_write>
     522:	07 c0       	rjmp	.+14     	; 0x532 <config_save+0x30>
		}
		else{
			EEPROM_write(CONFGIG_ADDR + i, config_data[i - 1]);
     524:	fc 01       	movw	r30, r24
     526:	31 97       	sbiw	r30, 0x01	; 1
     528:	e0 0f       	add	r30, r16
     52a:	f1 1f       	adc	r31, r17
     52c:	60 81       	ld	r22, Z
     52e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <EEPROM_write>

void config_save(const config_t* config){
	cli();
	uint8_t* config_data = (uint8_t*)config;
	
	for (int i = 0; i < sizeof(config_t) + 1; i++){
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	ce 01       	movw	r24, r28
     536:	c3 32       	cpi	r28, 0x23	; 35
     538:	d1 05       	cpc	r29, r1
     53a:	60 f3       	brcs	.-40     	; 0x514 <config_save+0x12>
		}
		else{
			EEPROM_write(CONFGIG_ADDR + i, config_data[i - 1]);
		}
	}
	sei();
     53c:	78 94       	sei
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <config_load>:

uint8_t config_load(config_t* config){
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	7c 01       	movw	r14, r24
	cli();
     558:	f8 94       	cli
	uint8_t success = EEPROM_read(CONFGIG_ADDR) == MAGIC_NUMBER;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <EEPROM_read>
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	82 32       	cpi	r24, 0x22	; 34
     566:	09 f0       	breq	.+2      	; 0x56a <config_load+0x22>
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	d9 2e       	mov	r13, r25
	if (success){
     56c:	82 32       	cpi	r24, 0x22	; 34
     56e:	81 f4       	brne	.+32     	; 0x590 <config_load+0x48>
     570:	0a c0       	rjmp	.+20     	; 0x586 <config_load+0x3e>
		uint8_t* config_data = (uint8_t*)config;
		
		for (int i = 0; i < sizeof(config_t); i++){
			config_data[i] = EEPROM_read(CONFGIG_ADDR + 1 + i);
     572:	87 01       	movw	r16, r14
     574:	0c 0f       	add	r16, r28
     576:	1d 1f       	adc	r17, r29
     578:	21 96       	adiw	r28, 0x01	; 1
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <EEPROM_read>
     580:	f8 01       	movw	r30, r16
     582:	80 83       	st	Z, r24
     584:	02 c0       	rjmp	.+4      	; 0x58a <config_load+0x42>
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
	cli();
	uint8_t success = EEPROM_read(CONFGIG_ADDR) == MAGIC_NUMBER;
	if (success){
		uint8_t* config_data = (uint8_t*)config;
		
		for (int i = 0; i < sizeof(config_t); i++){
     58a:	c2 32       	cpi	r28, 0x22	; 34
     58c:	d1 05       	cpc	r29, r1
     58e:	88 f3       	brcs	.-30     	; 0x572 <config_load+0x2a>
			config_data[i] = EEPROM_read(CONFGIG_ADDR + 1 + i);
		}
	}
	sei();
     590:	78 94       	sei
	
	return success;
}
     592:	8d 2d       	mov	r24, r13
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	08 95       	ret

000005a4 <servo_init>:

#define SERVO_MIN 500
#define SERVO_MAX 2400

void servo_init(){
    SERVO_1_DDR |= (1 << SERVO_1_PIN);
     5a4:	84 b1       	in	r24, 0x04	; 4
     5a6:	82 60       	ori	r24, 0x02	; 2
     5a8:	84 b9       	out	0x04, r24	; 4
    SERVO_2_DDR |= (1 << SERVO_2_PIN);
     5aa:	84 b1       	in	r24, 0x04	; 4
     5ac:	84 60       	ori	r24, 0x04	; 4
     5ae:	84 b9       	out	0x04, r24	; 4
    
    // Configure Timer1, Fast PWM, prescaler 8, clear OC1A on compare match, set OC1A at BOTTOM
    // 16MHz / 8 = 2MHz
    TCCR1A = (1 << COM1A1) | (1 << WGM11) | (1 << COM1B1);
     5b0:	82 ea       	ldi	r24, 0xA2	; 162
     5b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
     5b6:	8a e1       	ldi	r24, 0x1A	; 26
     5b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    
    ICR1 = 39999;
     5bc:	8f e3       	ldi	r24, 0x3F	; 63
     5be:	9c e9       	ldi	r25, 0x9C	; 156
     5c0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     5c4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

    OCR1A = SERVO_MIN * 2;
     5c8:	88 ee       	ldi	r24, 0xE8	; 232
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     5d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    OCR1B = SERVO_MIN * 2;
     5d4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     5d8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     5dc:	08 95       	ret

000005de <servo_1_set>:
}

void servo_1_set(uint16_t value){
    if (value < SERVO_MIN){
     5de:	84 3f       	cpi	r24, 0xF4	; 244
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	92 07       	cpc	r25, r18
     5e4:	28 f0       	brcs	.+10     	; 0x5f0 <servo_1_set+0x12>
        value = SERVO_MIN;
    }
    else if (value > SERVO_MAX){
     5e6:	81 36       	cpi	r24, 0x61	; 97
     5e8:	29 e0       	ldi	r18, 0x09	; 9
     5ea:	92 07       	cpc	r25, r18
     5ec:	20 f4       	brcc	.+8      	; 0x5f6 <servo_1_set+0x18>
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <servo_1_set+0x1c>
    OCR1B = SERVO_MIN * 2;
}

void servo_1_set(uint16_t value){
    if (value < SERVO_MIN){
        value = SERVO_MIN;
     5f0:	84 ef       	ldi	r24, 0xF4	; 244
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <servo_1_set+0x1c>
    }
    else if (value > SERVO_MAX){
        value = SERVO_MAX;
     5f6:	80 e6       	ldi	r24, 0x60	; 96
     5f8:	99 e0       	ldi	r25, 0x09	; 9
    }
    
    OCR1A = value * 2;
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     602:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     606:	08 95       	ret

00000608 <servo_2_set>:
}

void servo_2_set(uint16_t value){
    if (value < SERVO_MIN){
     608:	84 3f       	cpi	r24, 0xF4	; 244
     60a:	21 e0       	ldi	r18, 0x01	; 1
     60c:	92 07       	cpc	r25, r18
     60e:	28 f0       	brcs	.+10     	; 0x61a <servo_2_set+0x12>
        value = SERVO_MIN;
    }
    else if (value > SERVO_MAX){
     610:	81 36       	cpi	r24, 0x61	; 97
     612:	29 e0       	ldi	r18, 0x09	; 9
     614:	92 07       	cpc	r25, r18
     616:	20 f4       	brcc	.+8      	; 0x620 <servo_2_set+0x18>
     618:	05 c0       	rjmp	.+10     	; 0x624 <servo_2_set+0x1c>
    OCR1A = value * 2;
}

void servo_2_set(uint16_t value){
    if (value < SERVO_MIN){
        value = SERVO_MIN;
     61a:	84 ef       	ldi	r24, 0xF4	; 244
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	02 c0       	rjmp	.+4      	; 0x624 <servo_2_set+0x1c>
    }
    else if (value > SERVO_MAX){
        value = SERVO_MAX;
     620:	80 e6       	ldi	r24, 0x60	; 96
     622:	99 e0       	ldi	r25, 0x09	; 9
    }
    
    OCR1B = value * 2;
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     62c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     630:	08 95       	ret

00000632 <servo_set_angle_180>:
}

void servo_set_angle_180(uint8_t angle, uint8_t servo){
    if (angle > 180){
     632:	85 3b       	cpi	r24, 0xB5	; 181
     634:	08 f0       	brcs	.+2      	; 0x638 <servo_set_angle_180+0x6>
        angle = 180;
     636:	84 eb       	ldi	r24, 0xB4	; 180
    }
    
    if (servo == 1){
     638:	61 30       	cpi	r22, 0x01	; 1
     63a:	91 f4       	brne	.+36     	; 0x660 <servo_set_angle_180+0x2e>
        servo_1_set(SERVO_MIN + (((uint32_t)angle) * (SERVO_MAX - SERVO_MIN) / 180));
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	ac e6       	ldi	r26, 0x6C	; 108
     642:	b7 e0       	ldi	r27, 0x07	; 7
     644:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__umulhisi3>
     648:	24 eb       	ldi	r18, 0xB4	; 180
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__udivmodsi4>
     654:	c9 01       	movw	r24, r18
     656:	8c 50       	subi	r24, 0x0C	; 12
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	0e 94 ef 02 	call	0x5de	; 0x5de <servo_1_set>
     65e:	08 95       	ret
    }
    else{
        servo_2_set(SERVO_MIN + (((uint32_t)angle) * (SERVO_MAX - SERVO_MIN) / 180));
     660:	28 2f       	mov	r18, r24
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	ac e6       	ldi	r26, 0x6C	; 108
     666:	b7 e0       	ldi	r27, 0x07	; 7
     668:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__umulhisi3>
     66c:	24 eb       	ldi	r18, 0xB4	; 180
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__udivmodsi4>
     678:	c9 01       	movw	r24, r18
     67a:	8c 50       	subi	r24, 0x0C	; 12
     67c:	9e 4f       	sbci	r25, 0xFE	; 254
     67e:	0e 94 04 03 	call	0x608	; 0x608 <servo_2_set>
     682:	08 95       	ret

00000684 <servo_set_angle_minus_90_90>:
    }
}

void servo_set_angle_minus_90_90(int8_t angle, uint8_t servo){
    if (angle < -90){
     684:	86 3a       	cpi	r24, 0xA6	; 166
     686:	1c f0       	brlt	.+6      	; 0x68e <servo_set_angle_minus_90_90+0xa>
        angle = -90;
    }
    else if (angle > 90){
     688:	8b 35       	cpi	r24, 0x5B	; 91
     68a:	1c f4       	brge	.+6      	; 0x692 <servo_set_angle_minus_90_90+0xe>
     68c:	03 c0       	rjmp	.+6      	; 0x694 <servo_set_angle_minus_90_90+0x10>
    }
}

void servo_set_angle_minus_90_90(int8_t angle, uint8_t servo){
    if (angle < -90){
        angle = -90;
     68e:	86 ea       	ldi	r24, 0xA6	; 166
     690:	01 c0       	rjmp	.+2      	; 0x694 <servo_set_angle_minus_90_90+0x10>
    }
    else if (angle > 90){
        angle = 90;
     692:	8a e5       	ldi	r24, 0x5A	; 90
    }
    
    servo_set_angle_180(angle + 90, servo);
     694:	86 5a       	subi	r24, 0xA6	; 166
     696:	0e 94 19 03 	call	0x632	; 0x632 <servo_set_angle_180>
     69a:	08 95       	ret

0000069c <lcd_send>:
    // Clear display
    lcd_clear();
}

void lcd_send(uint8_t data, uint8_t mode){
    LCD_PORT = ((data & 0xF0) >> 4) | (mode << LCD_RS) | (1 << LCD_EN);
     69c:	98 2f       	mov	r25, r24
     69e:	92 95       	swap	r25
     6a0:	9f 70       	andi	r25, 0x0F	; 15
     6a2:	20 e2       	ldi	r18, 0x20	; 32
     6a4:	62 9f       	mul	r22, r18
     6a6:	b0 01       	movw	r22, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	96 2b       	or	r25, r22
     6ac:	90 61       	ori	r25, 0x10	; 16
     6ae:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b0:	95 e0       	ldi	r25, 0x05	; 5
     6b2:	9a 95       	dec	r25
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <lcd_send+0x16>
     6b6:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1 << LCD_EN);
     6b8:	98 b1       	in	r25, 0x08	; 8
     6ba:	9f 7e       	andi	r25, 0xEF	; 239
     6bc:	98 b9       	out	0x08, r25	; 8
     6be:	25 e0       	ldi	r18, 0x05	; 5
     6c0:	2a 95       	dec	r18
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <lcd_send+0x24>
     6c4:	00 00       	nop
    _delay_us(1);
    
    LCD_PORT = (data & 0x0F) | (mode << LCD_RS) | (1 << LCD_EN);
     6c6:	8f 70       	andi	r24, 0x0F	; 15
     6c8:	68 2b       	or	r22, r24
     6ca:	60 61       	ori	r22, 0x10	; 16
     6cc:	68 b9       	out	0x08, r22	; 8
     6ce:	85 e0       	ldi	r24, 0x05	; 5
     6d0:	8a 95       	dec	r24
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <lcd_send+0x34>
     6d4:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1 << LCD_EN);
     6d6:	88 b1       	in	r24, 0x08	; 8
     6d8:	8f 7e       	andi	r24, 0xEF	; 239
     6da:	88 b9       	out	0x08, r24	; 8
     6dc:	8f e8       	ldi	r24, 0x8F	; 143
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <lcd_send+0x44>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <lcd_send+0x4a>
     6e6:	00 00       	nop
     6e8:	08 95       	ret

000006ea <lcd_print>:
    _delay_us(100);
}

void lcd_print(const char* str){
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	ec 01       	movw	r28, r24
    while (*str){
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <lcd_print+0x10>
        lcd_send(*str++, LCD_MODE_DATA);
     6f2:	21 96       	adiw	r28, 0x01	; 1
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
    LCD_PORT &= ~(1 << LCD_EN);
    _delay_us(100);
}

void lcd_print(const char* str){
    while (*str){
     6fa:	88 81       	ld	r24, Y
     6fc:	81 11       	cpse	r24, r1
     6fe:	f9 cf       	rjmp	.-14     	; 0x6f2 <lcd_print+0x8>
        lcd_send(*str++, LCD_MODE_DATA);
    }
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <lcd_print_int>:

void lcd_print_int(int num, int base){
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	60 97       	sbiw	r28, 0x10	; 16
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	ab 01       	movw	r20, r22
    char buff[16];
    itoa(num, buff, base);
     71c:	be 01       	movw	r22, r28
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <itoa>
    lcd_print(buff);
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
}
     72e:	60 96       	adiw	r28, 0x10	; 16
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <lcd_print_float>:

void lcd_print_float(float num){
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	60 97       	sbiw	r28, 0x10	; 16
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	4b 01       	movw	r8, r22
     76a:	5c 01       	movw	r10, r24
    char buff[16];
    if (num < 0){
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	a9 01       	movw	r20, r18
     772:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
     776:	88 23       	and	r24, r24
     778:	44 f4       	brge	.+16     	; 0x78a <lcd_print_float+0x4a>
        lcd_print("-");
     77a:	82 eb       	ldi	r24, 0xB2	; 178
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
        num = -num;
     782:	b7 fa       	bst	r11, 7
     784:	b0 94       	com	r11
     786:	b7 f8       	bld	r11, 7
     788:	b0 94       	com	r11
    }
    itoa((int)num, buff, 10);
     78a:	c5 01       	movw	r24, r10
     78c:	b4 01       	movw	r22, r8
     78e:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixsfsi>
     792:	6b 01       	movw	r12, r22
     794:	7c 01       	movw	r14, r24
     796:	4a e0       	ldi	r20, 0x0A	; 10
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	8e 01       	movw	r16, r28
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	b8 01       	movw	r22, r16
     7a2:	c6 01       	movw	r24, r12
     7a4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <itoa>
    lcd_print(buff);
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    lcd_print(".");
     7ae:	82 e2       	ldi	r24, 0x22	; 34
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    float fraction = num - (int)num;
     7b6:	b6 01       	movw	r22, r12
     7b8:	dd 0c       	add	r13, r13
     7ba:	88 0b       	sbc	r24, r24
     7bc:	99 0b       	sbc	r25, r25
     7be:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
     7c2:	9b 01       	movw	r18, r22
     7c4:	ac 01       	movw	r20, r24
     7c6:	c5 01       	movw	r24, r10
     7c8:	b4 01       	movw	r22, r8
     7ca:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    sprintf(buff, "%03d", (int)(fraction * 1000.0f));
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	4a e7       	ldi	r20, 0x7A	; 122
     7d4:	54 e4       	ldi	r21, 0x44	; 68
     7d6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     7da:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixsfsi>
     7de:	7f 93       	push	r23
     7e0:	6f 93       	push	r22
     7e2:	84 eb       	ldi	r24, 0xB4	; 180
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	1f 93       	push	r17
     7ec:	0f 93       	push	r16
     7ee:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <sprintf>
    lcd_print(buff);
     7f2:	c8 01       	movw	r24, r16
     7f4:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
}
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	60 96       	adiw	r28, 0x10	; 16
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	bf 90       	pop	r11
     822:	af 90       	pop	r10
     824:	9f 90       	pop	r9
     826:	8f 90       	pop	r8
     828:	08 95       	ret

0000082a <lcd_clear>:

void lcd_clear(){
    lcd_send(0x01, LCD_MODE_CMD);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     832:	8f e3       	ldi	r24, 0x3F	; 63
     834:	9f e1       	ldi	r25, 0x1F	; 31
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <lcd_clear+0xc>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <lcd_clear+0x12>
     83c:	00 00       	nop
     83e:	08 95       	ret

00000840 <lcd_init>:

#define LCD_MODE_CMD 0
#define LCD_MODE_DATA 1

void lcd_init(){
    LCD_DDR = 0xFF;
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	87 b9       	out	0x07, r24	; 7
    LCD_PORT = 0x00;
     844:	18 b8       	out	0x08, r1	; 8
     846:	8f e5       	ldi	r24, 0x5F	; 95
     848:	9a ee       	ldi	r25, 0xEA	; 234
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <lcd_init+0xa>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <lcd_init+0x10>
     850:	00 00       	nop
    
    _delay_ms(15);
    
    lcd_send(0x03, LCD_MODE_CMD);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     85e:	8f e1       	ldi	r24, 0x1F	; 31
     860:	9e e4       	ldi	r25, 0x4E	; 78
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <lcd_init+0x22>
     866:	00 c0       	rjmp	.+0      	; 0x868 <lcd_init+0x28>
     868:	00 00       	nop
    _delay_ms(5);
    lcd_send(0x03, LCD_MODE_CMD);
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     876:	8f e8       	ldi	r24, 0x8F	; 143
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	f1 f7       	brne	.-4      	; 0x87a <lcd_init+0x3a>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <lcd_init+0x40>
     880:	00 00       	nop
    _delay_us(100);
    lcd_send(0x03, LCD_MODE_CMD);
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	8f e1       	ldi	r24, 0x1F	; 31
     890:	9e e4       	ldi	r25, 0x4E	; 78
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <lcd_init+0x52>
     896:	00 c0       	rjmp	.+0      	; 0x898 <lcd_init+0x58>
     898:	00 00       	nop
    _delay_ms(5);
    lcd_send(0x02, LCD_MODE_CMD);
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     8a6:	8f e9       	ldi	r24, 0x9F	; 159
     8a8:	9f e0       	ldi	r25, 0x0F	; 15
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <lcd_init+0x6a>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <lcd_init+0x70>
     8b0:	00 00       	nop
    _delay_ms(1);
    
    // 4-bit mode
    lcd_send(0x28, LCD_MODE_CMD);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	88 e2       	ldi	r24, 0x28	; 40
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     8be:	8f e9       	ldi	r24, 0x9F	; 159
     8c0:	9f e0       	ldi	r25, 0x0F	; 15
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <lcd_init+0x82>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <lcd_init+0x88>
     8c8:	00 00       	nop
    _delay_ms(1);
    // Display on, cursor off, blink off
    lcd_send(0x0C, LCD_MODE_CMD);
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	8c e0       	ldi	r24, 0x0C	; 12
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     8d6:	8f e9       	ldi	r24, 0x9F	; 159
     8d8:	9f e0       	ldi	r25, 0x0F	; 15
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <lcd_init+0x9a>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <lcd_init+0xa0>
     8e0:	00 00       	nop
    _delay_ms(1);
    // Entry mode
    lcd_send(0x06, LCD_MODE_CMD);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	86 e0       	ldi	r24, 0x06	; 6
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     8ee:	8f e9       	ldi	r24, 0x9F	; 159
     8f0:	9f e0       	ldi	r25, 0x0F	; 15
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_init+0xb2>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <lcd_init+0xb8>
     8f8:	00 00       	nop
    _delay_ms(1);

    // Clear display
    lcd_clear();
     8fa:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
     8fe:	08 95       	ret

00000900 <lcd_set_cursor>:
void lcd_clear(){
    lcd_send(0x01, LCD_MODE_CMD);
    _delay_ms(2);
}

void lcd_set_cursor(uint8_t row, uint8_t col){
     900:	96 2f       	mov	r25, r22
    uint8_t addr = 0x80;
    if (row == 1){
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	11 f0       	breq	.+4      	; 0x90a <lcd_set_cursor+0xa>
    lcd_send(0x01, LCD_MODE_CMD);
    _delay_ms(2);
}

void lcd_set_cursor(uint8_t row, uint8_t col){
    uint8_t addr = 0x80;
     906:	80 e8       	ldi	r24, 0x80	; 128
     908:	01 c0       	rjmp	.+2      	; 0x90c <lcd_set_cursor+0xc>
    if (row == 1){
        addr = 0xC0;
     90a:	80 ec       	ldi	r24, 0xC0	; 192
    }
    addr += col;
    lcd_send(addr, LCD_MODE_CMD);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	89 0f       	add	r24, r25
     910:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     914:	08 95       	ret

00000916 <buttons_init>:
#define SWITCH_ARMED_PORT PORTD
#define SWITCH_ARMED_PIN PIND
#define SWITCH_ARMED PD7

void buttons_init(){
    BUTTON_UP_DDR &= ~(1 << BUTTON_UP);
     916:	8a b1       	in	r24, 0x0a	; 10
     918:	8f 7d       	andi	r24, 0xDF	; 223
     91a:	8a b9       	out	0x0a, r24	; 10
    BUTTON_UP_PORT |= (1 << BUTTON_UP);
     91c:	8b b1       	in	r24, 0x0b	; 11
     91e:	80 62       	ori	r24, 0x20	; 32
     920:	8b b9       	out	0x0b, r24	; 11
    
    BUTTON_DOWN_DDR &= ~(1 << BUTTON_DOWN);
     922:	8a b1       	in	r24, 0x0a	; 10
     924:	8f 7e       	andi	r24, 0xEF	; 239
     926:	8a b9       	out	0x0a, r24	; 10
    BUTTON_DOWN_PORT |= (1 << BUTTON_DOWN);
     928:	8b b1       	in	r24, 0x0b	; 11
     92a:	80 61       	ori	r24, 0x10	; 16
     92c:	8b b9       	out	0x0b, r24	; 11
    
    BUTTON_OK_DDR &= ~(1 << BUTTON_OK);
     92e:	8a b1       	in	r24, 0x0a	; 10
     930:	8f 7b       	andi	r24, 0xBF	; 191
     932:	8a b9       	out	0x0a, r24	; 10
    BUTTON_OK_PORT |= (1 << BUTTON_OK);
     934:	8b b1       	in	r24, 0x0b	; 11
     936:	80 64       	ori	r24, 0x40	; 64
     938:	8b b9       	out	0x0b, r24	; 11

    SWITCH_ARMED_DDR &= ~(1 << SWITCH_ARMED);
     93a:	8a b1       	in	r24, 0x0a	; 10
     93c:	8f 77       	andi	r24, 0x7F	; 127
     93e:	8a b9       	out	0x0a, r24	; 10
    SWITCH_ARMED_PORT |= (1 << SWITCH_ARMED);
     940:	8b b1       	in	r24, 0x0b	; 11
     942:	80 68       	ori	r24, 0x80	; 128
     944:	8b b9       	out	0x0b, r24	; 11
     946:	08 95       	ret

00000948 <button_up>:
}

uint8_t button_up(){
    return !(BUTTON_UP_PIN & (1 << BUTTON_UP));
     948:	89 b1       	in	r24, 0x09	; 9
     94a:	82 95       	swap	r24
     94c:	86 95       	lsr	r24
     94e:	87 70       	andi	r24, 0x07	; 7
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	89 27       	eor	r24, r25
}
     954:	81 70       	andi	r24, 0x01	; 1
     956:	08 95       	ret

00000958 <button_down>:

uint8_t button_down(){
    return !(BUTTON_DOWN_PIN & (1 << BUTTON_DOWN));
     958:	89 b1       	in	r24, 0x09	; 9
     95a:	82 95       	swap	r24
     95c:	8f 70       	andi	r24, 0x0F	; 15
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	89 27       	eor	r24, r25
}
     962:	81 70       	andi	r24, 0x01	; 1
     964:	08 95       	ret

00000966 <button_ok>:

uint8_t button_ok(){
    return !(BUTTON_OK_PIN & (1 << BUTTON_OK));
     966:	89 b1       	in	r24, 0x09	; 9
     968:	82 95       	swap	r24
     96a:	86 95       	lsr	r24
     96c:	86 95       	lsr	r24
     96e:	83 70       	andi	r24, 0x03	; 3
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	89 27       	eor	r24, r25
}
     974:	81 70       	andi	r24, 0x01	; 1
     976:	08 95       	ret

00000978 <switch_armed>:

uint8_t switch_armed(){
    return !(SWITCH_ARMED_PIN & (1 << SWITCH_ARMED));
     978:	89 b1       	in	r24, 0x09	; 9
     97a:	80 95       	com	r24
}
     97c:	88 1f       	adc	r24, r24
     97e:	88 27       	eor	r24, r24
     980:	88 1f       	adc	r24, r24
     982:	08 95       	ret

00000984 <set_speed>:
#define CONTROL_H_

#include "servo.h"
#include "config.h"

void set_speed(int8_t speed_a, int8_t speed_b){
     984:	cf 93       	push	r28
     986:	c6 2f       	mov	r28, r22
	servo_set_angle_minus_90_90(speed_a, 1);
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	0e 94 42 03 	call	0x684	; 0x684 <servo_set_angle_minus_90_90>
	servo_set_angle_minus_90_90(speed_b, 2);
     98e:	62 e0       	ldi	r22, 0x02	; 2
     990:	8c 2f       	mov	r24, r28
     992:	0e 94 42 03 	call	0x684	; 0x684 <servo_set_angle_minus_90_90>
}
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <set_normalized_speed>:

void set_normalized_speed(config_t* config, float speed_normalized){
     99a:	8f 92       	push	r8
     99c:	9f 92       	push	r9
     99e:	af 92       	push	r10
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	ba 01       	movw	r22, r20
	int8_t speed_a = 0;
	int8_t speed_b = 0;

	float speed_0_1 = (speed_normalized + 1.0f) / 2.0f; 
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e8       	ldi	r20, 0x80	; 128
     9be:	5f e3       	ldi	r21, 0x3F	; 63
     9c0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__addsf3>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	5f e3       	ldi	r21, 0x3F	; 63
     9cc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
	int8_t position_floor = (int8_t)(speed_0_1 * 4);
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	50 e4       	ldi	r21, 0x40	; 64
     9d8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     9dc:	6b 01       	movw	r12, r22
     9de:	7c 01       	movw	r14, r24
     9e0:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixsfsi>
     9e4:	16 2f       	mov	r17, r22
	int8_t position_ceil = position_floor + 1;
     9e6:	01 e0       	ldi	r16, 0x01	; 1
     9e8:	06 0f       	add	r16, r22
	float position_blend = (speed_0_1 * 4.0f) - position_floor;
     9ea:	06 2e       	mov	r0, r22
     9ec:	00 0c       	add	r0, r0
     9ee:	77 0b       	sbc	r23, r23
     9f0:	88 0b       	sbc	r24, r24
     9f2:	99 0b       	sbc	r25, r25
     9f4:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
     9f8:	9b 01       	movw	r18, r22
     9fa:	ac 01       	movw	r20, r24
     9fc:	c7 01       	movw	r24, r14
     9fe:	b6 01       	movw	r22, r12
     a00:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
     a04:	6b 01       	movw	r12, r22
     a06:	7c 01       	movw	r14, r24

	if (position_ceil > 4){
     a08:	05 30       	cpi	r16, 0x05	; 5
     a0a:	14 f0       	brlt	.+4      	; 0xa10 <set_normalized_speed+0x76>
		position_ceil = 4;
     a0c:	04 e0       	ldi	r16, 0x04	; 4
		position_floor = 4;
     a0e:	14 e0       	ldi	r17, 0x04	; 4
	}

	int8_t speed_a_floor = config->positions_a[position_floor];
     a10:	81 2f       	mov	r24, r17
     a12:	11 0f       	add	r17, r17
     a14:	99 0b       	sbc	r25, r25
     a16:	fc 01       	movw	r30, r24
     a18:	31 96       	adiw	r30, 0x01	; 1
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	ec 0f       	add	r30, r28
     a20:	fd 1f       	adc	r31, r29
     a22:	10 81       	ld	r17, Z
	int8_t speed_a_ceil = config->positions_a[position_ceil];
     a24:	e0 2f       	mov	r30, r16
     a26:	00 0f       	add	r16, r16
     a28:	ff 0b       	sbc	r31, r31
     a2a:	df 01       	movw	r26, r30
     a2c:	11 96       	adiw	r26, 0x01	; 1
     a2e:	aa 0f       	add	r26, r26
     a30:	bb 1f       	adc	r27, r27
     a32:	ac 0f       	add	r26, r28
     a34:	bd 1f       	adc	r27, r29
     a36:	6c 91       	ld	r22, X
	int8_t speed_b_floor = config->positions_b[position_floor];
     a38:	dc 01       	movw	r26, r24
     a3a:	16 96       	adiw	r26, 0x06	; 6
     a3c:	aa 0f       	add	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	ac 0f       	add	r26, r28
     a42:	bd 1f       	adc	r27, r29
     a44:	0c 91       	ld	r16, X
	int8_t speed_b_ceil = config->positions_b[position_ceil];
     a46:	36 96       	adiw	r30, 0x06	; 6
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ec 0f       	add	r30, r28
     a4e:	fd 1f       	adc	r31, r29
     a50:	c0 81       	ld	r28, Z

	speed_a = (int8_t)(speed_a_floor + (speed_a_ceil - speed_a_floor) * position_blend);
     a52:	06 2e       	mov	r0, r22
     a54:	00 0c       	add	r0, r0
     a56:	77 0b       	sbc	r23, r23
     a58:	61 1b       	sub	r22, r17
     a5a:	71 09       	sbc	r23, r1
     a5c:	17 fd       	sbrc	r17, 7
     a5e:	73 95       	inc	r23
     a60:	07 2e       	mov	r0, r23
     a62:	00 0c       	add	r0, r0
     a64:	88 0b       	sbc	r24, r24
     a66:	99 0b       	sbc	r25, r25
     a68:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
     a6c:	a7 01       	movw	r20, r14
     a6e:	96 01       	movw	r18, r12
     a70:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     a74:	4b 01       	movw	r8, r22
     a76:	5c 01       	movw	r10, r24
     a78:	61 2f       	mov	r22, r17
     a7a:	11 0f       	add	r17, r17
     a7c:	77 0b       	sbc	r23, r23
     a7e:	88 0b       	sbc	r24, r24
     a80:	99 0b       	sbc	r25, r25
     a82:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
     a86:	a5 01       	movw	r20, r10
     a88:	94 01       	movw	r18, r8
     a8a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__addsf3>
     a8e:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixsfsi>
     a92:	d6 2f       	mov	r29, r22
	speed_b = (int8_t)(speed_b_floor + (speed_b_ceil - speed_b_floor) * position_blend);
     a94:	6c 2f       	mov	r22, r28
     a96:	cc 0f       	add	r28, r28
     a98:	77 0b       	sbc	r23, r23
     a9a:	60 1b       	sub	r22, r16
     a9c:	71 09       	sbc	r23, r1
     a9e:	07 fd       	sbrc	r16, 7
     aa0:	73 95       	inc	r23
     aa2:	07 2e       	mov	r0, r23
     aa4:	00 0c       	add	r0, r0
     aa6:	88 0b       	sbc	r24, r24
     aa8:	99 0b       	sbc	r25, r25
     aaa:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
     aae:	a7 01       	movw	r20, r14
     ab0:	96 01       	movw	r18, r12
     ab2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
     aba:	60 2f       	mov	r22, r16
     abc:	00 0f       	add	r16, r16
     abe:	77 0b       	sbc	r23, r23
     ac0:	88 0b       	sbc	r24, r24
     ac2:	99 0b       	sbc	r25, r25
     ac4:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
     ac8:	a7 01       	movw	r20, r14
     aca:	96 01       	movw	r18, r12
     acc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__addsf3>
     ad0:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixsfsi>
     ad4:	c6 2f       	mov	r28, r22

	servo_set_angle_minus_90_90(speed_a, 1);
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	8d 2f       	mov	r24, r29
     ada:	0e 94 42 03 	call	0x684	; 0x684 <servo_set_angle_minus_90_90>
	servo_set_angle_minus_90_90(speed_b, 2);
     ade:	62 e0       	ldi	r22, 0x02	; 2
     ae0:	8c 2f       	mov	r24, r28
     ae2:	0e 94 42 03 	call	0x684	; 0x684 <servo_set_angle_minus_90_90>
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	bf 90       	pop	r11
     af8:	af 90       	pop	r10
     afa:	9f 90       	pop	r9
     afc:	8f 90       	pop	r8
     afe:	08 95       	ret

00000b00 <setup_exit>:

#define MODE_RUNNING 0
#define MODE_SETUP 1

void setup_exit(uint8_t* mode, config_t* config, uint8_t* focused){
    *mode = MODE_RUNNING;
     b00:	fc 01       	movw	r30, r24
     b02:	10 82       	st	Z, r1
    *focused = 0;
     b04:	fa 01       	movw	r30, r20
     b06:	10 82       	st	Z, r1
    //config_save(config);
    lcd_clear();
     b08:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
    lcd_set_cursor(0, 0);
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
    lcd_print("Exit");
     b14:	82 ed       	ldi	r24, 0xD2	; 210
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
     b1c:	ff ef       	ldi	r31, 0xFF	; 255
     b1e:	23 ed       	ldi	r18, 0xD3	; 211
     b20:	80 e3       	ldi	r24, 0x30	; 48
     b22:	f1 50       	subi	r31, 0x01	; 1
     b24:	20 40       	sbci	r18, 0x00	; 0
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <setup_exit+0x22>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <setup_exit+0x2c>
     b2c:	00 00       	nop
    _delay_ms(1000);
    lcd_clear();
     b2e:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
     b32:	08 95       	ret

00000b34 <setup_case>:
}

void setup_case(const char* text, uint8_t* focused, uint8_t* up_pressed, uint8_t* down_pressed, int16_t* config_value){
     b34:	8f 92       	push	r8
     b36:	9f 92       	push	r9
     b38:	af 92       	push	r10
     b3a:	bf 92       	push	r11
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	4c 01       	movw	r8, r24
     b4e:	7b 01       	movw	r14, r22
     b50:	5a 01       	movw	r10, r20
     b52:	69 01       	movw	r12, r18
     b54:	e8 01       	movw	r28, r16
    lcd_set_cursor(0, 0);
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
    lcd_print(text);
     b5e:	c4 01       	movw	r24, r8
     b60:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    lcd_set_cursor(1, 0);
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
    lcd_print_int(*config_value, 10);
     b6c:	6a e0       	ldi	r22, 0x0A	; 10
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	88 81       	ld	r24, Y
     b72:	99 81       	ldd	r25, Y+1	; 0x01
     b74:	0e 94 83 03 	call	0x706	; 0x706 <lcd_print_int>
	lcd_print(" ");
     b78:	8c ec       	ldi	r24, 0xCC	; 204
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    if (*focused){
     b80:	f7 01       	movw	r30, r14
     b82:	80 81       	ld	r24, Z
     b84:	88 23       	and	r24, r24
     b86:	91 f0       	breq	.+36     	; 0xbac <setup_case+0x78>
        if (*up_pressed){
     b88:	f5 01       	movw	r30, r10
     b8a:	80 81       	ld	r24, Z
     b8c:	88 23       	and	r24, r24
     b8e:	29 f0       	breq	.+10     	; 0xb9a <setup_case+0x66>
            *config_value += 1;
     b90:	88 81       	ld	r24, Y
     b92:	99 81       	ldd	r25, Y+1	; 0x01
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	99 83       	std	Y+1, r25	; 0x01
     b98:	88 83       	st	Y, r24
        }
        if (*down_pressed){
     b9a:	f6 01       	movw	r30, r12
     b9c:	80 81       	ld	r24, Z
     b9e:	88 23       	and	r24, r24
     ba0:	29 f0       	breq	.+10     	; 0xbac <setup_case+0x78>
            *config_value -= 1;
     ba2:	88 81       	ld	r24, Y
     ba4:	99 81       	ldd	r25, Y+1	; 0x01
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	99 83       	std	Y+1, r25	; 0x01
     baa:	88 83       	st	Y, r24
        }
    }
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
     bbc:	bf 90       	pop	r11
     bbe:	af 90       	pop	r10
     bc0:	9f 90       	pop	r9
     bc2:	8f 90       	pop	r8
     bc4:	08 95       	ret

00000bc6 <setup_mode>:

void setup_mode(config_t* config, uint8_t* mode){
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <setup_mode+0x10>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	7c 01       	movw	r14, r24
     bdc:	8b 01       	movw	r16, r22
	static uint8_t setup_position = 0;
	static uint8_t focused = 0;

	uint8_t up_pressed = button_up();
     bde:	0e 94 a4 04 	call	0x948	; 0x948 <button_up>
     be2:	89 83       	std	Y+1, r24	; 0x01
	uint8_t down_pressed = button_down();
     be4:	0e 94 ac 04 	call	0x958	; 0x958 <button_down>
     be8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t servo_preview = switch_armed();
     bea:	0e 94 bc 04 	call	0x978	; 0x978 <switch_armed>
     bee:	d8 2e       	mov	r13, r24

	lcd_set_cursor(1, 15);
     bf0:	6f e0       	ldi	r22, 0x0F	; 15
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
	lcd_print((servo_preview) ? "A" : "D");
     bf8:	dd 20       	and	r13, r13
     bfa:	19 f0       	breq	.+6      	; 0xc02 <setup_mode+0x3c>
     bfc:	89 eb       	ldi	r24, 0xB9	; 185
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <setup_mode+0x40>
     c02:	8b eb       	ldi	r24, 0xBB	; 187
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
	if (!servo_preview) {
     c0a:	d1 10       	cpse	r13, r1
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <setup_mode+0x52>
		set_speed(config->release_position_a, config->release_position_b);
     c0e:	f7 01       	movw	r30, r14
     c10:	60 8d       	ldd	r22, Z+24	; 0x18
     c12:	86 89       	ldd	r24, Z+22	; 0x16
     c14:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
	}

	if (button_ok()){
     c18:	0e 94 b3 04 	call	0x966	; 0x966 <button_ok>
     c1c:	88 23       	and	r24, r24
     c1e:	19 f1       	breq	.+70     	; 0xc66 <setup_mode+0xa0>
		focused = !focused;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <focused.1949>
     c26:	91 11       	cpse	r25, r1
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <focused.1949>
		if (focused){
     c2e:	88 23       	and	r24, r24
     c30:	49 f0       	breq	.+18     	; 0xc44 <setup_mode+0x7e>
			lcd_set_cursor(1, 14);
     c32:	6e e0       	ldi	r22, 0x0E	; 14
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("<");
     c3a:	8d eb       	ldi	r24, 0xBD	; 189
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
     c42:	08 c0       	rjmp	.+16     	; 0xc54 <setup_mode+0x8e>
		}
		else{
			lcd_set_cursor(1, 14);
     c44:	6e e0       	ldi	r22, 0x0E	; 14
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print(" ");
     c4c:	8c ec       	ldi	r24, 0xCC	; 204
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
     c54:	ff ef       	ldi	r31, 0xFF	; 255
     c56:	23 ec       	ldi	r18, 0xC3	; 195
     c58:	89 e0       	ldi	r24, 0x09	; 9
     c5a:	f1 50       	subi	r31, 0x01	; 1
     c5c:	20 40       	sbci	r18, 0x00	; 0
     c5e:	80 40       	sbci	r24, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <setup_mode+0x94>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <setup_mode+0x9e>
     c64:	00 00       	nop
		}
		_delay_ms(200);
	}
	if (!focused){
     c66:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     c6a:	81 11       	cpse	r24, r1
     c6c:	49 c0       	rjmp	.+146    	; 0xd00 <setup_mode+0x13a>
		if (up_pressed && down_pressed && !button_ok()){
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	88 23       	and	r24, r24
     c72:	71 f0       	breq	.+28     	; 0xc90 <setup_mode+0xca>
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	88 23       	and	r24, r24
     c78:	59 f0       	breq	.+22     	; 0xc90 <setup_mode+0xca>
     c7a:	0e 94 b3 04 	call	0x966	; 0x966 <button_ok>
     c7e:	81 11       	cpse	r24, r1
     c80:	07 c0       	rjmp	.+14     	; 0xc90 <setup_mode+0xca>
			setup_exit(mode, config, &focused);
     c82:	4e ea       	ldi	r20, 0xAE	; 174
     c84:	53 e0       	ldi	r21, 0x03	; 3
     c86:	b7 01       	movw	r22, r14
     c88:	c8 01       	movw	r24, r16
     c8a:	0e 94 80 05 	call	0xb00	; 0xb00 <setup_exit>
			return;
     c8e:	67 c2       	rjmp	.+1230   	; 0x115e <setup_mode+0x598>
		}
		if (up_pressed){
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	88 23       	and	r24, r24
     c94:	c9 f0       	breq	.+50     	; 0xcc8 <setup_mode+0x102>
			setup_position = (setup_position + 1) % 16;
     c96:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <setup_position.1948>
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	8f 70       	andi	r24, 0x0F	; 15
     ca0:	90 78       	andi	r25, 0x80	; 128
     ca2:	99 23       	and	r25, r25
     ca4:	24 f4       	brge	.+8      	; 0xcae <setup_mode+0xe8>
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	80 6f       	ori	r24, 0xF0	; 240
     caa:	9f 6f       	ori	r25, 0xFF	; 255
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <setup_position.1948>
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	e3 ec       	ldi	r30, 0xC3	; 195
     cb6:	f9 e0       	ldi	r31, 0x09	; 9
     cb8:	91 50       	subi	r25, 0x01	; 1
     cba:	e0 40       	sbci	r30, 0x00	; 0
     cbc:	f0 40       	sbci	r31, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <setup_mode+0xf2>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <setup_mode+0xfc>
     cc2:	00 00       	nop
			_delay_ms(200);
			lcd_clear();
     cc4:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
		}
		if (down_pressed){
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	88 23       	and	r24, r24
     ccc:	c9 f0       	breq	.+50     	; 0xd00 <setup_mode+0x13a>
			setup_position = (setup_position + 15) % 16;
     cce:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <setup_position.1948>
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0f 96       	adiw	r24, 0x0f	; 15
     cd6:	8f 70       	andi	r24, 0x0F	; 15
     cd8:	90 78       	andi	r25, 0x80	; 128
     cda:	99 23       	and	r25, r25
     cdc:	24 f4       	brge	.+8      	; 0xce6 <setup_mode+0x120>
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	80 6f       	ori	r24, 0xF0	; 240
     ce2:	9f 6f       	ori	r25, 0xFF	; 255
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <setup_position.1948>
     cea:	2f ef       	ldi	r18, 0xFF	; 255
     cec:	83 ec       	ldi	r24, 0xC3	; 195
     cee:	99 e0       	ldi	r25, 0x09	; 9
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	80 40       	sbci	r24, 0x00	; 0
     cf4:	90 40       	sbci	r25, 0x00	; 0
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <setup_mode+0x12a>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <setup_mode+0x134>
     cfa:	00 00       	nop
			_delay_ms(200);
			lcd_clear();
     cfc:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
		}
	}

	if (focused && (up_pressed || down_pressed)){
     d00:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     d04:	88 23       	and	r24, r24
     d06:	71 f0       	breq	.+28     	; 0xd24 <setup_mode+0x15e>
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	81 11       	cpse	r24, r1
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <setup_mode+0x14e>
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	88 23       	and	r24, r24
     d12:	41 f0       	breq	.+16     	; 0xd24 <setup_mode+0x15e>
		lcd_set_cursor(1, 0);
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
		lcd_print("              ");
     d1c:	8f eb       	ldi	r24, 0xBF	; 191
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
	}

	switch (setup_position){
     d24:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <setup_position.1948>
     d28:	8e 2f       	mov	r24, r30
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	80 31       	cpi	r24, 0x10	; 16
     d2e:	91 05       	cpc	r25, r1
     d30:	08 f0       	brcs	.+2      	; 0xd34 <setup_mode+0x16e>
     d32:	02 c2       	rjmp	.+1028   	; 0x1138 <setup_mode+0x572>
     d34:	fc 01       	movw	r30, r24
     d36:	ec 5c       	subi	r30, 0xCC	; 204
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__tablejump2__>
        case 0:
            setup_case("1.valid_sample_timeout", &focused, &up_pressed, &down_pressed, &config->valid_sample_timeout);
     d3e:	87 01       	movw	r16, r14
     d40:	9e 01       	movw	r18, r28
     d42:	2e 5f       	subi	r18, 0xFE	; 254
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	ae 01       	movw	r20, r28
     d48:	4f 5f       	subi	r20, 0xFF	; 255
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	6e ea       	ldi	r22, 0xAE	; 174
     d4e:	73 e0       	ldi	r23, 0x03	; 3
     d50:	8e ec       	ldi	r24, 0xCE	; 206
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            break;
     d58:	ef c1       	rjmp	.+990    	; 0x1138 <setup_mode+0x572>

        case 1:
            setup_case("2.positions_a_-2", &focused, &up_pressed, &down_pressed, &config->positions_a[0]);
     d5a:	87 01       	movw	r16, r14
     d5c:	0e 5f       	subi	r16, 0xFE	; 254
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	9e 01       	movw	r18, r28
     d62:	2e 5f       	subi	r18, 0xFE	; 254
     d64:	3f 4f       	sbci	r19, 0xFF	; 255
     d66:	ae 01       	movw	r20, r28
     d68:	4f 5f       	subi	r20, 0xFF	; 255
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	6e ea       	ldi	r22, 0xAE	; 174
     d6e:	73 e0       	ldi	r23, 0x03	; 3
     d70:	85 ee       	ldi	r24, 0xE5	; 229
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[0], config->positions_b[0]);
     d78:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     d7c:	88 23       	and	r24, r24
     d7e:	09 f4       	brne	.+2      	; 0xd82 <setup_mode+0x1bc>
     d80:	db c1       	rjmp	.+950    	; 0x1138 <setup_mode+0x572>
     d82:	dd 20       	and	r13, r13
     d84:	09 f4       	brne	.+2      	; 0xd88 <setup_mode+0x1c2>
     d86:	d8 c1       	rjmp	.+944    	; 0x1138 <setup_mode+0x572>
     d88:	f7 01       	movw	r30, r14
     d8a:	64 85       	ldd	r22, Z+12	; 0x0c
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     d92:	d2 c1       	rjmp	.+932    	; 0x1138 <setup_mode+0x572>
            break;

        case 2:
            setup_case("3.positions_b_-2", &focused, &up_pressed, &down_pressed, &config->positions_b[0]);
     d94:	87 01       	movw	r16, r14
     d96:	04 5f       	subi	r16, 0xF4	; 244
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	9e 01       	movw	r18, r28
     d9c:	2e 5f       	subi	r18, 0xFE	; 254
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
     da0:	ae 01       	movw	r20, r28
     da2:	4f 5f       	subi	r20, 0xFF	; 255
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	6e ea       	ldi	r22, 0xAE	; 174
     da8:	73 e0       	ldi	r23, 0x03	; 3
     daa:	86 ef       	ldi	r24, 0xF6	; 246
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview)  set_speed(config->positions_a[0], config->positions_b[0]);
     db2:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     db6:	88 23       	and	r24, r24
     db8:	09 f4       	brne	.+2      	; 0xdbc <setup_mode+0x1f6>
     dba:	be c1       	rjmp	.+892    	; 0x1138 <setup_mode+0x572>
     dbc:	dd 20       	and	r13, r13
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <setup_mode+0x1fc>
     dc0:	bb c1       	rjmp	.+886    	; 0x1138 <setup_mode+0x572>
     dc2:	f7 01       	movw	r30, r14
     dc4:	64 85       	ldd	r22, Z+12	; 0x0c
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     dcc:	b5 c1       	rjmp	.+874    	; 0x1138 <setup_mode+0x572>
            break;

        case 3:
            setup_case("4.positions_a_-1", &focused, &up_pressed, &down_pressed, &config->positions_a[1]);
     dce:	87 01       	movw	r16, r14
     dd0:	0c 5f       	subi	r16, 0xFC	; 252
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	9e 01       	movw	r18, r28
     dd6:	2e 5f       	subi	r18, 0xFE	; 254
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
     dda:	ae 01       	movw	r20, r28
     ddc:	4f 5f       	subi	r20, 0xFF	; 255
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	6e ea       	ldi	r22, 0xAE	; 174
     de2:	73 e0       	ldi	r23, 0x03	; 3
     de4:	87 e0       	ldi	r24, 0x07	; 7
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[1], config->positions_b[1]);
     dec:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     df0:	88 23       	and	r24, r24
     df2:	09 f4       	brne	.+2      	; 0xdf6 <setup_mode+0x230>
     df4:	a1 c1       	rjmp	.+834    	; 0x1138 <setup_mode+0x572>
     df6:	dd 20       	and	r13, r13
     df8:	09 f4       	brne	.+2      	; 0xdfc <setup_mode+0x236>
     dfa:	9e c1       	rjmp	.+828    	; 0x1138 <setup_mode+0x572>
     dfc:	f7 01       	movw	r30, r14
     dfe:	66 85       	ldd	r22, Z+14	; 0x0e
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     e06:	98 c1       	rjmp	.+816    	; 0x1138 <setup_mode+0x572>
            break;

        case 4:
            setup_case("5.positions_b_-1", &focused, &up_pressed, &down_pressed, &config->positions_b[1]);
     e08:	87 01       	movw	r16, r14
     e0a:	02 5f       	subi	r16, 0xF2	; 242
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	9e 01       	movw	r18, r28
     e10:	2e 5f       	subi	r18, 0xFE	; 254
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	ae 01       	movw	r20, r28
     e16:	4f 5f       	subi	r20, 0xFF	; 255
     e18:	5f 4f       	sbci	r21, 0xFF	; 255
     e1a:	6e ea       	ldi	r22, 0xAE	; 174
     e1c:	73 e0       	ldi	r23, 0x03	; 3
     e1e:	88 e1       	ldi	r24, 0x18	; 24
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[1], config->positions_b[1]);
     e26:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     e2a:	88 23       	and	r24, r24
     e2c:	09 f4       	brne	.+2      	; 0xe30 <setup_mode+0x26a>
     e2e:	84 c1       	rjmp	.+776    	; 0x1138 <setup_mode+0x572>
     e30:	dd 20       	and	r13, r13
     e32:	09 f4       	brne	.+2      	; 0xe36 <setup_mode+0x270>
     e34:	81 c1       	rjmp	.+770    	; 0x1138 <setup_mode+0x572>
     e36:	f7 01       	movw	r30, r14
     e38:	66 85       	ldd	r22, Z+14	; 0x0e
     e3a:	84 81       	ldd	r24, Z+4	; 0x04
     e3c:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     e40:	7b c1       	rjmp	.+758    	; 0x1138 <setup_mode+0x572>
            break;

        case 5:
            setup_case("6.positions_a_0", &focused, &up_pressed, &down_pressed, &config->positions_a[2]);
     e42:	87 01       	movw	r16, r14
     e44:	0a 5f       	subi	r16, 0xFA	; 250
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	9e 01       	movw	r18, r28
     e4a:	2e 5f       	subi	r18, 0xFE	; 254
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	ae 01       	movw	r20, r28
     e50:	4f 5f       	subi	r20, 0xFF	; 255
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	6e ea       	ldi	r22, 0xAE	; 174
     e56:	73 e0       	ldi	r23, 0x03	; 3
     e58:	89 e2       	ldi	r24, 0x29	; 41
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[2], config->positions_b[2]);
     e60:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <setup_mode+0x2a4>
     e68:	67 c1       	rjmp	.+718    	; 0x1138 <setup_mode+0x572>
     e6a:	dd 20       	and	r13, r13
     e6c:	09 f4       	brne	.+2      	; 0xe70 <setup_mode+0x2aa>
     e6e:	64 c1       	rjmp	.+712    	; 0x1138 <setup_mode+0x572>
     e70:	f7 01       	movw	r30, r14
     e72:	60 89       	ldd	r22, Z+16	; 0x10
     e74:	86 81       	ldd	r24, Z+6	; 0x06
     e76:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     e7a:	5e c1       	rjmp	.+700    	; 0x1138 <setup_mode+0x572>
            break;

        case 6:
            setup_case("7.positions_b_0", &focused, &up_pressed, &down_pressed, &config->positions_b[2]);
     e7c:	87 01       	movw	r16, r14
     e7e:	00 5f       	subi	r16, 0xF0	; 240
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	9e 01       	movw	r18, r28
     e84:	2e 5f       	subi	r18, 0xFE	; 254
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	ae 01       	movw	r20, r28
     e8a:	4f 5f       	subi	r20, 0xFF	; 255
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	6e ea       	ldi	r22, 0xAE	; 174
     e90:	73 e0       	ldi	r23, 0x03	; 3
     e92:	89 e3       	ldi	r24, 0x39	; 57
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[2], config->positions_b[2]);
     e9a:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     e9e:	88 23       	and	r24, r24
     ea0:	09 f4       	brne	.+2      	; 0xea4 <setup_mode+0x2de>
     ea2:	4a c1       	rjmp	.+660    	; 0x1138 <setup_mode+0x572>
     ea4:	dd 20       	and	r13, r13
     ea6:	09 f4       	brne	.+2      	; 0xeaa <setup_mode+0x2e4>
     ea8:	47 c1       	rjmp	.+654    	; 0x1138 <setup_mode+0x572>
     eaa:	f7 01       	movw	r30, r14
     eac:	60 89       	ldd	r22, Z+16	; 0x10
     eae:	86 81       	ldd	r24, Z+6	; 0x06
     eb0:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     eb4:	41 c1       	rjmp	.+642    	; 0x1138 <setup_mode+0x572>
            break;

        case 7:
            setup_case("8.positions_a_1", &focused, &up_pressed, &down_pressed, &config->positions_a[3]);
     eb6:	87 01       	movw	r16, r14
     eb8:	08 5f       	subi	r16, 0xF8	; 248
     eba:	1f 4f       	sbci	r17, 0xFF	; 255
     ebc:	9e 01       	movw	r18, r28
     ebe:	2e 5f       	subi	r18, 0xFE	; 254
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
     ec2:	ae 01       	movw	r20, r28
     ec4:	4f 5f       	subi	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	6e ea       	ldi	r22, 0xAE	; 174
     eca:	73 e0       	ldi	r23, 0x03	; 3
     ecc:	89 e4       	ldi	r24, 0x49	; 73
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[3], config->positions_b[3]);
     ed4:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <setup_mode+0x318>
     edc:	2d c1       	rjmp	.+602    	; 0x1138 <setup_mode+0x572>
     ede:	dd 20       	and	r13, r13
     ee0:	09 f4       	brne	.+2      	; 0xee4 <setup_mode+0x31e>
     ee2:	2a c1       	rjmp	.+596    	; 0x1138 <setup_mode+0x572>
     ee4:	f7 01       	movw	r30, r14
     ee6:	62 89       	ldd	r22, Z+18	; 0x12
     ee8:	80 85       	ldd	r24, Z+8	; 0x08
     eea:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     eee:	24 c1       	rjmp	.+584    	; 0x1138 <setup_mode+0x572>
            break;

        case 8:
            setup_case("9.positions_b_1", &focused, &up_pressed, &down_pressed, &config->positions_b[3]);
     ef0:	87 01       	movw	r16, r14
     ef2:	0e 5e       	subi	r16, 0xEE	; 238
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	9e 01       	movw	r18, r28
     ef8:	2e 5f       	subi	r18, 0xFE	; 254
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	ae 01       	movw	r20, r28
     efe:	4f 5f       	subi	r20, 0xFF	; 255
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	6e ea       	ldi	r22, 0xAE	; 174
     f04:	73 e0       	ldi	r23, 0x03	; 3
     f06:	89 e5       	ldi	r24, 0x59	; 89
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[3], config->positions_b[3]);
     f0e:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     f12:	88 23       	and	r24, r24
     f14:	09 f4       	brne	.+2      	; 0xf18 <setup_mode+0x352>
     f16:	10 c1       	rjmp	.+544    	; 0x1138 <setup_mode+0x572>
     f18:	dd 20       	and	r13, r13
     f1a:	09 f4       	brne	.+2      	; 0xf1e <setup_mode+0x358>
     f1c:	0d c1       	rjmp	.+538    	; 0x1138 <setup_mode+0x572>
     f1e:	f7 01       	movw	r30, r14
     f20:	62 89       	ldd	r22, Z+18	; 0x12
     f22:	80 85       	ldd	r24, Z+8	; 0x08
     f24:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     f28:	07 c1       	rjmp	.+526    	; 0x1138 <setup_mode+0x572>
            break;

        case 9:
            setup_case("10.positions_a_2", &focused, &up_pressed, &down_pressed, &config->positions_a[4]);
     f2a:	87 01       	movw	r16, r14
     f2c:	06 5f       	subi	r16, 0xF6	; 246
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	9e 01       	movw	r18, r28
     f32:	2e 5f       	subi	r18, 0xFE	; 254
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	ae 01       	movw	r20, r28
     f38:	4f 5f       	subi	r20, 0xFF	; 255
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	6e ea       	ldi	r22, 0xAE	; 174
     f3e:	73 e0       	ldi	r23, 0x03	; 3
     f40:	89 e6       	ldi	r24, 0x69	; 105
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[4], config->positions_b[4]);
     f48:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     f4c:	88 23       	and	r24, r24
     f4e:	09 f4       	brne	.+2      	; 0xf52 <setup_mode+0x38c>
     f50:	f3 c0       	rjmp	.+486    	; 0x1138 <setup_mode+0x572>
     f52:	dd 20       	and	r13, r13
     f54:	09 f4       	brne	.+2      	; 0xf58 <setup_mode+0x392>
     f56:	f0 c0       	rjmp	.+480    	; 0x1138 <setup_mode+0x572>
     f58:	f7 01       	movw	r30, r14
     f5a:	64 89       	ldd	r22, Z+20	; 0x14
     f5c:	82 85       	ldd	r24, Z+10	; 0x0a
     f5e:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     f62:	ea c0       	rjmp	.+468    	; 0x1138 <setup_mode+0x572>
            break;

        case 10:
            setup_case("11.positions_b_2", &focused, &up_pressed, &down_pressed, &config->positions_b[4]);
     f64:	87 01       	movw	r16, r14
     f66:	0c 5e       	subi	r16, 0xEC	; 236
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	9e 01       	movw	r18, r28
     f6c:	2e 5f       	subi	r18, 0xFE	; 254
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	ae 01       	movw	r20, r28
     f72:	4f 5f       	subi	r20, 0xFF	; 255
     f74:	5f 4f       	sbci	r21, 0xFF	; 255
     f76:	6e ea       	ldi	r22, 0xAE	; 174
     f78:	73 e0       	ldi	r23, 0x03	; 3
     f7a:	8a e7       	ldi	r24, 0x7A	; 122
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[4], config->positions_b[4]);
     f82:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     f86:	88 23       	and	r24, r24
     f88:	09 f4       	brne	.+2      	; 0xf8c <setup_mode+0x3c6>
     f8a:	d6 c0       	rjmp	.+428    	; 0x1138 <setup_mode+0x572>
     f8c:	dd 20       	and	r13, r13
     f8e:	09 f4       	brne	.+2      	; 0xf92 <setup_mode+0x3cc>
     f90:	d3 c0       	rjmp	.+422    	; 0x1138 <setup_mode+0x572>
     f92:	f7 01       	movw	r30, r14
     f94:	64 89       	ldd	r22, Z+20	; 0x14
     f96:	82 85       	ldd	r24, Z+10	; 0x0a
     f98:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     f9c:	cd c0       	rjmp	.+410    	; 0x1138 <setup_mode+0x572>
            break;

        case 11:
            setup_case("12.release_position_a", &focused, &up_pressed, &down_pressed, &config->release_position_a);
     f9e:	87 01       	movw	r16, r14
     fa0:	0a 5e       	subi	r16, 0xEA	; 234
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	9e 01       	movw	r18, r28
     fa6:	2e 5f       	subi	r18, 0xFE	; 254
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	ae 01       	movw	r20, r28
     fac:	4f 5f       	subi	r20, 0xFF	; 255
     fae:	5f 4f       	sbci	r21, 0xFF	; 255
     fb0:	6e ea       	ldi	r22, 0xAE	; 174
     fb2:	73 e0       	ldi	r23, 0x03	; 3
     fb4:	8b e8       	ldi	r24, 0x8B	; 139
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->release_position_a, config->release_position_b);
     fbc:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     fc0:	88 23       	and	r24, r24
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <setup_mode+0x400>
     fc4:	b9 c0       	rjmp	.+370    	; 0x1138 <setup_mode+0x572>
     fc6:	dd 20       	and	r13, r13
     fc8:	09 f4       	brne	.+2      	; 0xfcc <setup_mode+0x406>
     fca:	b6 c0       	rjmp	.+364    	; 0x1138 <setup_mode+0x572>
     fcc:	f7 01       	movw	r30, r14
     fce:	60 8d       	ldd	r22, Z+24	; 0x18
     fd0:	86 89       	ldd	r24, Z+22	; 0x16
     fd2:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
     fd6:	b0 c0       	rjmp	.+352    	; 0x1138 <setup_mode+0x572>
            break;

        case 12:
            setup_case("13.release_position_b", &focused, &up_pressed, &down_pressed, &config->release_position_b);
     fd8:	87 01       	movw	r16, r14
     fda:	08 5e       	subi	r16, 0xE8	; 232
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	9e 01       	movw	r18, r28
     fe0:	2e 5f       	subi	r18, 0xFE	; 254
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	ae 01       	movw	r20, r28
     fe6:	4f 5f       	subi	r20, 0xFF	; 255
     fe8:	5f 4f       	sbci	r21, 0xFF	; 255
     fea:	6e ea       	ldi	r22, 0xAE	; 174
     fec:	73 e0       	ldi	r23, 0x03	; 3
     fee:	81 ea       	ldi	r24, 0xA1	; 161
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_case>
            if (focused && servo_preview) set_speed(config->release_position_a, config->release_position_b);
     ff6:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <setup_mode+0x43a>
     ffe:	9c c0       	rjmp	.+312    	; 0x1138 <setup_mode+0x572>
    1000:	dd 20       	and	r13, r13
    1002:	09 f4       	brne	.+2      	; 0x1006 <setup_mode+0x440>
    1004:	99 c0       	rjmp	.+306    	; 0x1138 <setup_mode+0x572>
    1006:	f7 01       	movw	r30, r14
    1008:	60 8d       	ldd	r22, Z+24	; 0x18
    100a:	86 89       	ldd	r24, Z+22	; 0x16
    100c:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
    1010:	93 c0       	rjmp	.+294    	; 0x1138 <setup_mode+0x572>
            break;

		case 13:
			lcd_set_cursor(0, 0);
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("14.step_up");
    101a:	87 eb       	ldi	r24, 0xB7	; 183
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			lcd_set_cursor(1, 0);
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print_float(config->step_up);
    102a:	f7 01       	movw	r30, r14
    102c:	62 8d       	ldd	r22, Z+26	; 0x1a
    102e:	73 8d       	ldd	r23, Z+27	; 0x1b
    1030:	84 8d       	ldd	r24, Z+28	; 0x1c
    1032:	95 8d       	ldd	r25, Z+29	; 0x1d
    1034:	0e 94 a0 03 	call	0x740	; 0x740 <lcd_print_float>
			if (focused){
    1038:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
    103c:	88 23       	and	r24, r24
    103e:	09 f4       	brne	.+2      	; 0x1042 <setup_mode+0x47c>
    1040:	7b c0       	rjmp	.+246    	; 0x1138 <setup_mode+0x572>
				if (up_pressed){
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 23       	and	r24, r24
    1046:	81 f0       	breq	.+32     	; 0x1068 <setup_mode+0x4a2>
					config->step_up += 0.001f;
    1048:	2f e6       	ldi	r18, 0x6F	; 111
    104a:	32 e1       	ldi	r19, 0x12	; 18
    104c:	43 e8       	ldi	r20, 0x83	; 131
    104e:	5a e3       	ldi	r21, 0x3A	; 58
    1050:	f7 01       	movw	r30, r14
    1052:	62 8d       	ldd	r22, Z+26	; 0x1a
    1054:	73 8d       	ldd	r23, Z+27	; 0x1b
    1056:	84 8d       	ldd	r24, Z+28	; 0x1c
    1058:	95 8d       	ldd	r25, Z+29	; 0x1d
    105a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__addsf3>
    105e:	f7 01       	movw	r30, r14
    1060:	62 8f       	std	Z+26, r22	; 0x1a
    1062:	73 8f       	std	Z+27, r23	; 0x1b
    1064:	84 8f       	std	Z+28, r24	; 0x1c
    1066:	95 8f       	std	Z+29, r25	; 0x1d
				}
				if (down_pressed){
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	88 23       	and	r24, r24
    106c:	09 f4       	brne	.+2      	; 0x1070 <setup_mode+0x4aa>
    106e:	64 c0       	rjmp	.+200    	; 0x1138 <setup_mode+0x572>
					config->step_up -= 0.001f;
    1070:	2f e6       	ldi	r18, 0x6F	; 111
    1072:	32 e1       	ldi	r19, 0x12	; 18
    1074:	43 e8       	ldi	r20, 0x83	; 131
    1076:	5a e3       	ldi	r21, 0x3A	; 58
    1078:	f7 01       	movw	r30, r14
    107a:	62 8d       	ldd	r22, Z+26	; 0x1a
    107c:	73 8d       	ldd	r23, Z+27	; 0x1b
    107e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1080:	95 8d       	ldd	r25, Z+29	; 0x1d
    1082:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    1086:	f7 01       	movw	r30, r14
    1088:	62 8f       	std	Z+26, r22	; 0x1a
    108a:	73 8f       	std	Z+27, r23	; 0x1b
    108c:	84 8f       	std	Z+28, r24	; 0x1c
    108e:	95 8f       	std	Z+29, r25	; 0x1d
    1090:	53 c0       	rjmp	.+166    	; 0x1138 <setup_mode+0x572>
				}
			}
			break;

		case 14:
			lcd_set_cursor(0, 0);
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("15.step_down");
    109a:	82 ec       	ldi	r24, 0xC2	; 194
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			lcd_set_cursor(1, 0);
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print_float(config->step_down);
    10aa:	f7 01       	movw	r30, r14
    10ac:	66 8d       	ldd	r22, Z+30	; 0x1e
    10ae:	77 8d       	ldd	r23, Z+31	; 0x1f
    10b0:	80 a1       	ldd	r24, Z+32	; 0x20
    10b2:	91 a1       	ldd	r25, Z+33	; 0x21
    10b4:	0e 94 a0 03 	call	0x740	; 0x740 <lcd_print_float>
			if (focused){
    10b8:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
    10bc:	88 23       	and	r24, r24
    10be:	e1 f1       	breq	.+120    	; 0x1138 <setup_mode+0x572>
				if (up_pressed){
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	88 23       	and	r24, r24
    10c4:	81 f0       	breq	.+32     	; 0x10e6 <setup_mode+0x520>
					config->step_down += 0.001f;
    10c6:	2f e6       	ldi	r18, 0x6F	; 111
    10c8:	32 e1       	ldi	r19, 0x12	; 18
    10ca:	43 e8       	ldi	r20, 0x83	; 131
    10cc:	5a e3       	ldi	r21, 0x3A	; 58
    10ce:	f7 01       	movw	r30, r14
    10d0:	66 8d       	ldd	r22, Z+30	; 0x1e
    10d2:	77 8d       	ldd	r23, Z+31	; 0x1f
    10d4:	80 a1       	ldd	r24, Z+32	; 0x20
    10d6:	91 a1       	ldd	r25, Z+33	; 0x21
    10d8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__addsf3>
    10dc:	f7 01       	movw	r30, r14
    10de:	66 8f       	std	Z+30, r22	; 0x1e
    10e0:	77 8f       	std	Z+31, r23	; 0x1f
    10e2:	80 a3       	std	Z+32, r24	; 0x20
    10e4:	91 a3       	std	Z+33, r25	; 0x21
				}
				if (down_pressed){
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 23       	and	r24, r24
    10ea:	31 f1       	breq	.+76     	; 0x1138 <setup_mode+0x572>
					config->step_down -= 0.001f;
    10ec:	2f e6       	ldi	r18, 0x6F	; 111
    10ee:	32 e1       	ldi	r19, 0x12	; 18
    10f0:	43 e8       	ldi	r20, 0x83	; 131
    10f2:	5a e3       	ldi	r21, 0x3A	; 58
    10f4:	f7 01       	movw	r30, r14
    10f6:	66 8d       	ldd	r22, Z+30	; 0x1e
    10f8:	77 8d       	ldd	r23, Z+31	; 0x1f
    10fa:	80 a1       	ldd	r24, Z+32	; 0x20
    10fc:	91 a1       	ldd	r25, Z+33	; 0x21
    10fe:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    1102:	f7 01       	movw	r30, r14
    1104:	66 8f       	std	Z+30, r22	; 0x1e
    1106:	77 8f       	std	Z+31, r23	; 0x1f
    1108:	80 a3       	std	Z+32, r24	; 0x20
    110a:	91 a3       	std	Z+33, r25	; 0x21
    110c:	15 c0       	rjmp	.+42     	; 0x1138 <setup_mode+0x572>
				}
			}
			break;

		case 15:
			lcd_set_cursor(0, 0);
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("16.Exit");
    1116:	8f ec       	ldi	r24, 0xCF	; 207
    1118:	92 e0       	ldi	r25, 0x02	; 2
    111a:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			if (focused){
    111e:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
    1122:	88 23       	and	r24, r24
    1124:	49 f0       	breq	.+18     	; 0x1138 <setup_mode+0x572>
				*mode = MODE_RUNNING;
    1126:	f8 01       	movw	r30, r16
    1128:	10 82       	st	Z, r1
				focused = 0;
    112a:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <focused.1949>
				setup_position = 0;
    112e:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <setup_position.1948>
				lcd_clear();
    1132:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
				return;
    1136:	13 c0       	rjmp	.+38     	; 0x115e <setup_mode+0x598>
			break;
		default:
			break;
	}

	if ((up_pressed || down_pressed) && focused){
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	81 11       	cpse	r24, r1
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <setup_mode+0x57e>
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	88 23       	and	r24, r24
    1142:	69 f0       	breq	.+26     	; 0x115e <setup_mode+0x598>
    1144:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <focused.1949>
    1148:	88 23       	and	r24, r24
    114a:	49 f0       	breq	.+18     	; 0x115e <setup_mode+0x598>
    114c:	ff ef       	ldi	r31, 0xFF	; 255
    114e:	23 ec       	ldi	r18, 0xC3	; 195
    1150:	89 e0       	ldi	r24, 0x09	; 9
    1152:	f1 50       	subi	r31, 0x01	; 1
    1154:	20 40       	sbci	r18, 0x00	; 0
    1156:	80 40       	sbci	r24, 0x00	; 0
    1158:	e1 f7       	brne	.-8      	; 0x1152 <setup_mode+0x58c>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <setup_mode+0x596>
    115c:	00 00       	nop
		_delay_ms(200);
	}
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	df 90       	pop	r13
    1170:	08 95       	ret

00001172 <process_serial>:
#define CONFIG_SERIAL_H_

#include "config.h"
#include "USART.h"

void process_serial(uint8_t data, config_t* config){
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
	// config
	if (data == 'c'){
    1176:	83 36       	cpi	r24, 0x63	; 99
    1178:	29 f5       	brne	.+74     	; 0x11c4 <process_serial+0x52>
    117a:	eb 01       	movw	r28, r22
		USART_print("1 - Print config\n");
    117c:	87 ed       	ldi	r24, 0xD7	; 215
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
		//USART_print("2 - Edit config\n");
		USART_print("3 - Save config\n");
    1184:	89 ee       	ldi	r24, 0xE9	; 233
    1186:	92 e0       	ldi	r25, 0x02	; 2
    1188:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
		USART_print("Enter option:\n");
    118c:	8a ef       	ldi	r24, 0xFA	; 250
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	0e 94 75 00 	call	0xea	; 0xea <USART_print>

		int option = USART_read_int();
    1194:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <USART_read_int>
		switch (option){
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	91 05       	cpc	r25, r1
    119c:	19 f0       	breq	.+6      	; 0x11a4 <process_serial+0x32>
    119e:	03 97       	sbiw	r24, 0x03	; 3
    11a0:	29 f0       	breq	.+10     	; 0x11ac <process_serial+0x3a>
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <process_serial+0x4a>
			case 1:
				config_print(config);
    11a4:	ce 01       	movw	r24, r28
    11a6:	0e 94 05 02 	call	0x40a	; 0x40a <config_print>
				break;
    11aa:	0c c0       	rjmp	.+24     	; 0x11c4 <process_serial+0x52>
				}
				config_print(config);
				break;
			}*/
			case 3:
				config_save(config);
    11ac:	ce 01       	movw	r24, r28
    11ae:	0e 94 81 02 	call	0x502	; 0x502 <config_save>
				USART_print("Config saved\n");
    11b2:	89 e0       	ldi	r24, 0x09	; 9
    11b4:	93 e0       	ldi	r25, 0x03	; 3
    11b6:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
				break;
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <process_serial+0x52>
			default:
				USART_print("Invalid option\n");
    11bc:	87 e1       	ldi	r24, 0x17	; 23
    11be:	93 e0       	ldi	r25, 0x03	; 3
    11c0:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
				break;
		}
	}
}
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <transmit_binary>:
#include "buttons.h"
#include "config_screen.h"
#include "config_serial.h"
#include "control.h"

void transmit_binary(uint16_t data, uint8_t bits){
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	6c 01       	movw	r12, r24
	int mask = 1 << (bits - 1);
    11dc:	e6 2e       	mov	r14, r22
    11de:	f1 2c       	mov	r15, r1
    11e0:	c7 01       	movw	r24, r14
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	c1 e0       	ldi	r28, 0x01	; 1
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <transmit_binary+0x24>
    11ea:	cc 0f       	add	r28, r28
    11ec:	dd 1f       	adc	r29, r29
    11ee:	8a 95       	dec	r24
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <transmit_binary+0x20>
	for (int i = 0; i < bits; i++){
    11f2:	00 e0       	ldi	r16, 0x00	; 0
    11f4:	10 e0       	ldi	r17, 0x00	; 0
    11f6:	0e c0       	rjmp	.+28     	; 0x1214 <transmit_binary+0x4a>
		USART_transmit((data & mask) ? '1' : '0');
    11f8:	ce 01       	movw	r24, r28
    11fa:	8c 21       	and	r24, r12
    11fc:	9d 21       	and	r25, r13
    11fe:	89 2b       	or	r24, r25
    1200:	11 f0       	breq	.+4      	; 0x1206 <transmit_binary+0x3c>
    1202:	81 e3       	ldi	r24, 0x31	; 49
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <transmit_binary+0x3e>
    1206:	80 e3       	ldi	r24, 0x30	; 48
    1208:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_transmit>
		mask >>= 1;
    120c:	d5 95       	asr	r29
    120e:	c7 95       	ror	r28
#include "config_serial.h"
#include "control.h"

void transmit_binary(uint16_t data, uint8_t bits){
	int mask = 1 << (bits - 1);
	for (int i = 0; i < bits; i++){
    1210:	0f 5f       	subi	r16, 0xFF	; 255
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
    1214:	0e 15       	cp	r16, r14
    1216:	1f 05       	cpc	r17, r15
    1218:	7c f3       	brlt	.-34     	; 0x11f8 <transmit_binary+0x2e>
		USART_transmit((data & mask) ? '1' : '0');
		mask >>= 1;
	}
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	08 95       	ret

0000122c <bit_index>:

int8_t bit_index(uint8_t data){
    122c:	48 2f       	mov	r20, r24
	int8_t state_index = -1;
	for (uint8_t bit = 0; bit < 5; bit++){
    122e:	90 e0       	ldi	r25, 0x00	; 0
		mask >>= 1;
	}
}

int8_t bit_index(uint8_t data){
	int8_t state_index = -1;
    1230:	8f ef       	ldi	r24, 0xFF	; 255
	for (uint8_t bit = 0; bit < 5; bit++){
    1232:	10 c0       	rjmp	.+32     	; 0x1254 <bit_index+0x28>
		if (data & (1 << bit)){
    1234:	24 2f       	mov	r18, r20
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	09 2e       	mov	r0, r25
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <bit_index+0x14>
    123c:	35 95       	asr	r19
    123e:	27 95       	ror	r18
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <bit_index+0x10>
    1244:	20 ff       	sbrs	r18, 0
    1246:	05 c0       	rjmp	.+10     	; 0x1252 <bit_index+0x26>
			if (state_index == -1){
    1248:	8f 3f       	cpi	r24, 0xFF	; 255
    124a:	11 f4       	brne	.+4      	; 0x1250 <bit_index+0x24>
				state_index = bit;
    124c:	89 2f       	mov	r24, r25
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <bit_index+0x26>
			}
			else{
				// if state_index is already set, it means that there are more than one non zero bit in the sample
				// it is considered invalid state
				state_index = -2;
    1250:	8e ef       	ldi	r24, 0xFE	; 254
	}
}

int8_t bit_index(uint8_t data){
	int8_t state_index = -1;
	for (uint8_t bit = 0; bit < 5; bit++){
    1252:	9f 5f       	subi	r25, 0xFF	; 255
    1254:	95 30       	cpi	r25, 0x05	; 5
    1256:	70 f3       	brcs	.-36     	; 0x1234 <bit_index+0x8>
				state_index = -2;
			}
		}
	}
	return state_index;
}
    1258:	08 95       	ret

0000125a <process_sample>:

void process_sample(uint8_t data, const config_t* config, uint8_t* release_out, float* speed_out_normalized){
    125a:	4f 92       	push	r4
    125c:	5f 92       	push	r5
    125e:	6f 92       	push	r6
    1260:	7f 92       	push	r7
    1262:	8f 92       	push	r8
    1264:	9f 92       	push	r9
    1266:	af 92       	push	r10
    1268:	bf 92       	push	r11
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	c8 2f       	mov	r28, r24
    127a:	5b 01       	movw	r10, r22
    127c:	7a 01       	movw	r14, r20
    127e:	89 01       	movw	r16, r18
	//static uint8_t prev_non_zero_state = 0;
	//static uint16_t uncertain_steps = 0;

	static float target_speed_normalized = 0;
	
	if ((data >> 5) == 0b010){
    1280:	82 95       	swap	r24
    1282:	86 95       	lsr	r24
    1284:	87 70       	andi	r24, 0x07	; 7
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	09 f0       	breq	.+2      	; 0x128c <process_sample+0x32>
    128a:	53 c1       	rjmp	.+678    	; 0x1532 <process_sample+0x2d8>
		if (data != prev_state){
    128c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <prev_state.2003>
    1290:	c8 17       	cp	r28, r24
    1292:	09 f4       	brne	.+2      	; 0x1296 <process_sample+0x3c>
    1294:	89 c0       	rjmp	.+274    	; 0x13a8 <process_sample+0x14e>
			if (state_rep < config->valid_sample_timeout){
    1296:	fb 01       	movw	r30, r22
    1298:	20 81       	ld	r18, Z
    129a:	31 81       	ldd	r19, Z+1	; 0x01
    129c:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <state_rep.2004>
    12a0:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <state_rep.2004+0x1>
    12a4:	82 17       	cp	r24, r18
    12a6:	93 07       	cpc	r25, r19
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <process_sample+0x52>
    12aa:	53 c0       	rjmp	.+166    	; 0x1352 <process_sample+0xf8>
				//if high frequency samples are being received
				transmit_binary(data, 5);
    12ac:	cc 2e       	mov	r12, r28
    12ae:	d1 2c       	mov	r13, r1
    12b0:	65 e0       	ldi	r22, 0x05	; 5
    12b2:	c6 01       	movw	r24, r12
    12b4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <transmit_binary>
				USART_transmit('\n');
    12b8:	8a e0       	ldi	r24, 0x0A	; 10
    12ba:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_transmit>
				
				int8_t state_index = bit_index(data);
    12be:	8c 2f       	mov	r24, r28
    12c0:	0e 94 16 09 	call	0x122c	; 0x122c <bit_index>
				if (state_index >= 0){
    12c4:	88 23       	and	r24, r24
    12c6:	b4 f1       	brlt	.+108    	; 0x1334 <process_sample+0xda>
					//uncertain_steps = 0;
					//target_speed_normalized = config->speeds[state_index];
					// map from 0-4 to -1 to 1
					target_speed_normalized = (float)state_index / 2.0f - 1.0f;
    12c8:	68 2f       	mov	r22, r24
    12ca:	88 0f       	add	r24, r24
    12cc:	77 0b       	sbc	r23, r23
    12ce:	88 0b       	sbc	r24, r24
    12d0:	99 0b       	sbc	r25, r25
    12d2:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatsisf>
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    12ee:	60 93 a6 03 	sts	0x03A6, r22	; 0x8003a6 <__data_end>
    12f2:	70 93 a7 03 	sts	0x03A7, r23	; 0x8003a7 <__data_end+0x1>
    12f6:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <__data_end+0x2>
    12fa:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <__data_end+0x3>
					*release_out = false;
    12fe:	f7 01       	movw	r30, r14
    1300:	10 82       	st	Z, r1
					USART_print("Target speed: ");
    1302:	87 e2       	ldi	r24, 0x27	; 39
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
					USART_print_int(target_speed_normalized, 10);
    130a:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <__data_end>
    130e:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <__data_end+0x1>
    1312:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <__data_end+0x2>
    1316:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <__data_end+0x3>
    131a:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixsfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	6a e0       	ldi	r22, 0x0A	; 10
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>
					USART_print("\n");
    132a:	87 e0       	ldi	r24, 0x07	; 7
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
    1332:	33 c0       	rjmp	.+102    	; 0x139a <process_sample+0x140>
				}
				else if (state_index == -2){
    1334:	8e 3f       	cpi	r24, 0xFE	; 254
    1336:	89 f5       	brne	.+98     	; 0x139a <process_sample+0x140>
					USART_print("None-control data: ");
    1338:	86 e3       	ldi	r24, 0x36	; 54
    133a:	93 e0       	ldi	r25, 0x03	; 3
    133c:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
					transmit_binary(data, 5);
    1340:	65 e0       	ldi	r22, 0x05	; 5
    1342:	c6 01       	movw	r24, r12
    1344:	0e 94 e5 08 	call	0x11ca	; 0x11ca <transmit_binary>
					USART_print("\n");
    1348:	87 e0       	ldi	r24, 0x07	; 7
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
    1350:	24 c0       	rjmp	.+72     	; 0x139a <process_sample+0x140>
				}
			}
			else{		
				// samples are not frequent enough to be sure
				target_speed_normalized = 0.0f;
    1352:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <__data_end>
    1356:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <__data_end+0x1>
    135a:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <__data_end+0x2>
    135e:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <__data_end+0x3>
				if (*speed_out_normalized < 0.0001f && *speed_out_normalized > -0.0001f){
    1362:	f8 01       	movw	r30, r16
    1364:	40 80       	ld	r4, Z
    1366:	51 80       	ldd	r5, Z+1	; 0x01
    1368:	62 80       	ldd	r6, Z+2	; 0x02
    136a:	73 80       	ldd	r7, Z+3	; 0x03
    136c:	27 e1       	ldi	r18, 0x17	; 23
    136e:	37 eb       	ldi	r19, 0xB7	; 183
    1370:	41 ed       	ldi	r20, 0xD1	; 209
    1372:	58 e3       	ldi	r21, 0x38	; 56
    1374:	c3 01       	movw	r24, r6
    1376:	b2 01       	movw	r22, r4
    1378:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
    137c:	88 23       	and	r24, r24
    137e:	6c f4       	brge	.+26     	; 0x139a <process_sample+0x140>
    1380:	27 e1       	ldi	r18, 0x17	; 23
    1382:	37 eb       	ldi	r19, 0xB7	; 183
    1384:	41 ed       	ldi	r20, 0xD1	; 209
    1386:	58 eb       	ldi	r21, 0xB8	; 184
    1388:	c3 01       	movw	r24, r6
    138a:	b2 01       	movw	r22, r4
    138c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__gesf2>
    1390:	18 16       	cp	r1, r24
    1392:	1c f4       	brge	.+6      	; 0x139a <process_sample+0x140>
					// release if speed is already at 0
					*release_out = true;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	f7 01       	movw	r30, r14
    1398:	80 83       	st	Z, r24
				}*/
			}
			//if (data & 0b11111){
			//	prev_non_zero_state = data;
			//}
			prev_state = data;
    139a:	c0 93 ac 03 	sts	0x03AC, r28	; 0x8003ac <prev_state.2003>
			state_rep = 0;
    139e:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <state_rep.2004+0x1>
    13a2:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <state_rep.2004>
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <process_sample+0x160>
		}
		else{
			state_rep++;
    13a8:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <state_rep.2004>
    13ac:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <state_rep.2004+0x1>
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <state_rep.2004+0x1>
    13b6:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <state_rep.2004>
		}

		if (target_speed_normalized != *speed_out_normalized){
    13ba:	f8 01       	movw	r30, r16
    13bc:	c0 80       	ld	r12, Z
    13be:	d1 80       	ldd	r13, Z+1	; 0x01
    13c0:	e2 80       	ldd	r14, Z+2	; 0x02
    13c2:	f3 80       	ldd	r15, Z+3	; 0x03
    13c4:	40 90 a6 03 	lds	r4, 0x03A6	; 0x8003a6 <__data_end>
    13c8:	50 90 a7 03 	lds	r5, 0x03A7	; 0x8003a7 <__data_end+0x1>
    13cc:	60 90 a8 03 	lds	r6, 0x03A8	; 0x8003a8 <__data_end+0x2>
    13d0:	70 90 a9 03 	lds	r7, 0x03A9	; 0x8003a9 <__data_end+0x3>
    13d4:	a3 01       	movw	r20, r6
    13d6:	92 01       	movw	r18, r4
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
    13e0:	88 23       	and	r24, r24
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <process_sample+0x18c>
    13e4:	b5 c0       	rjmp	.+362    	; 0x1550 <process_sample+0x2f6>
			if (*speed_out_normalized > 0){
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	a9 01       	movw	r20, r18
    13ec:	c7 01       	movw	r24, r14
    13ee:	b6 01       	movw	r22, r12
    13f0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__gesf2>
    13f4:	18 16       	cp	r1, r24
    13f6:	0c f0       	brlt	.+2      	; 0x13fa <process_sample+0x1a0>
    13f8:	4e c0       	rjmp	.+156    	; 0x1496 <process_sample+0x23c>
				if (target_speed_normalized > *speed_out_normalized){
    13fa:	a3 01       	movw	r20, r6
    13fc:	92 01       	movw	r18, r4
    13fe:	c7 01       	movw	r24, r14
    1400:	b6 01       	movw	r22, r12
    1402:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
    1406:	88 23       	and	r24, r24
    1408:	1c f5       	brge	.+70     	; 0x1450 <process_sample+0x1f6>
					if (target_speed_normalized - *speed_out_normalized < config->step_up){
    140a:	a7 01       	movw	r20, r14
    140c:	96 01       	movw	r18, r12
    140e:	c3 01       	movw	r24, r6
    1410:	b2 01       	movw	r22, r4
    1412:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    1416:	f5 01       	movw	r30, r10
    1418:	82 8c       	ldd	r8, Z+26	; 0x1a
    141a:	93 8c       	ldd	r9, Z+27	; 0x1b
    141c:	a4 8c       	ldd	r10, Z+28	; 0x1c
    141e:	b5 8c       	ldd	r11, Z+29	; 0x1d
    1420:	a5 01       	movw	r20, r10
    1422:	94 01       	movw	r18, r8
    1424:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
    1428:	88 23       	and	r24, r24
    142a:	34 f4       	brge	.+12     	; 0x1438 <process_sample+0x1de>
						*speed_out_normalized = target_speed_normalized;
    142c:	f8 01       	movw	r30, r16
    142e:	40 82       	st	Z, r4
    1430:	51 82       	std	Z+1, r5	; 0x01
    1432:	62 82       	std	Z+2, r6	; 0x02
    1434:	73 82       	std	Z+3, r7	; 0x03
    1436:	8c c0       	rjmp	.+280    	; 0x1550 <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized += config->step_up;
    1438:	a5 01       	movw	r20, r10
    143a:	94 01       	movw	r18, r8
    143c:	c7 01       	movw	r24, r14
    143e:	b6 01       	movw	r22, r12
    1440:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__addsf3>
    1444:	f8 01       	movw	r30, r16
    1446:	60 83       	st	Z, r22
    1448:	71 83       	std	Z+1, r23	; 0x01
    144a:	82 83       	std	Z+2, r24	; 0x02
    144c:	93 83       	std	Z+3, r25	; 0x03
    144e:	80 c0       	rjmp	.+256    	; 0x1550 <process_sample+0x2f6>
					}
				}
				else{
					if (*speed_out_normalized - target_speed_normalized < config->step_down){
    1450:	a3 01       	movw	r20, r6
    1452:	92 01       	movw	r18, r4
    1454:	c7 01       	movw	r24, r14
    1456:	b6 01       	movw	r22, r12
    1458:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    145c:	f5 01       	movw	r30, r10
    145e:	86 8c       	ldd	r8, Z+30	; 0x1e
    1460:	97 8c       	ldd	r9, Z+31	; 0x1f
    1462:	a0 a0       	ldd	r10, Z+32	; 0x20
    1464:	b1 a0       	ldd	r11, Z+33	; 0x21
    1466:	a5 01       	movw	r20, r10
    1468:	94 01       	movw	r18, r8
    146a:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
    146e:	88 23       	and	r24, r24
    1470:	34 f4       	brge	.+12     	; 0x147e <process_sample+0x224>
						*speed_out_normalized = target_speed_normalized;
    1472:	f8 01       	movw	r30, r16
    1474:	40 82       	st	Z, r4
    1476:	51 82       	std	Z+1, r5	; 0x01
    1478:	62 82       	std	Z+2, r6	; 0x02
    147a:	73 82       	std	Z+3, r7	; 0x03
    147c:	69 c0       	rjmp	.+210    	; 0x1550 <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized -= config->step_down;
    147e:	a5 01       	movw	r20, r10
    1480:	94 01       	movw	r18, r8
    1482:	c7 01       	movw	r24, r14
    1484:	b6 01       	movw	r22, r12
    1486:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    148a:	f8 01       	movw	r30, r16
    148c:	60 83       	st	Z, r22
    148e:	71 83       	std	Z+1, r23	; 0x01
    1490:	82 83       	std	Z+2, r24	; 0x02
    1492:	93 83       	std	Z+3, r25	; 0x03
    1494:	5d c0       	rjmp	.+186    	; 0x1550 <process_sample+0x2f6>
					}
				}
			}
			else{
				if (target_speed_normalized > *speed_out_normalized){
    1496:	a3 01       	movw	r20, r6
    1498:	92 01       	movw	r18, r4
    149a:	c7 01       	movw	r24, r14
    149c:	b6 01       	movw	r22, r12
    149e:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	1c f5       	brge	.+70     	; 0x14ec <process_sample+0x292>
					if (target_speed_normalized - *speed_out_normalized < config->step_down){
    14a6:	a7 01       	movw	r20, r14
    14a8:	96 01       	movw	r18, r12
    14aa:	c3 01       	movw	r24, r6
    14ac:	b2 01       	movw	r22, r4
    14ae:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    14b2:	f5 01       	movw	r30, r10
    14b4:	86 8c       	ldd	r8, Z+30	; 0x1e
    14b6:	97 8c       	ldd	r9, Z+31	; 0x1f
    14b8:	a0 a0       	ldd	r10, Z+32	; 0x20
    14ba:	b1 a0       	ldd	r11, Z+33	; 0x21
    14bc:	a5 01       	movw	r20, r10
    14be:	94 01       	movw	r18, r8
    14c0:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
    14c4:	88 23       	and	r24, r24
    14c6:	34 f4       	brge	.+12     	; 0x14d4 <process_sample+0x27a>
						*speed_out_normalized = target_speed_normalized;
    14c8:	f8 01       	movw	r30, r16
    14ca:	40 82       	st	Z, r4
    14cc:	51 82       	std	Z+1, r5	; 0x01
    14ce:	62 82       	std	Z+2, r6	; 0x02
    14d0:	73 82       	std	Z+3, r7	; 0x03
    14d2:	3e c0       	rjmp	.+124    	; 0x1550 <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized += config->step_down;
    14d4:	a5 01       	movw	r20, r10
    14d6:	94 01       	movw	r18, r8
    14d8:	c7 01       	movw	r24, r14
    14da:	b6 01       	movw	r22, r12
    14dc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__addsf3>
    14e0:	f8 01       	movw	r30, r16
    14e2:	60 83       	st	Z, r22
    14e4:	71 83       	std	Z+1, r23	; 0x01
    14e6:	82 83       	std	Z+2, r24	; 0x02
    14e8:	93 83       	std	Z+3, r25	; 0x03
    14ea:	32 c0       	rjmp	.+100    	; 0x1550 <process_sample+0x2f6>
					}
				}
				else{
					if (*speed_out_normalized - target_speed_normalized < config->step_up){
    14ec:	a3 01       	movw	r20, r6
    14ee:	92 01       	movw	r18, r4
    14f0:	c7 01       	movw	r24, r14
    14f2:	b6 01       	movw	r22, r12
    14f4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    14f8:	f5 01       	movw	r30, r10
    14fa:	82 8c       	ldd	r8, Z+26	; 0x1a
    14fc:	93 8c       	ldd	r9, Z+27	; 0x1b
    14fe:	a4 8c       	ldd	r10, Z+28	; 0x1c
    1500:	b5 8c       	ldd	r11, Z+29	; 0x1d
    1502:	a5 01       	movw	r20, r10
    1504:	94 01       	movw	r18, r8
    1506:	0e 94 08 0c 	call	0x1810	; 0x1810 <__cmpsf2>
    150a:	88 23       	and	r24, r24
    150c:	34 f4       	brge	.+12     	; 0x151a <process_sample+0x2c0>
						*speed_out_normalized = target_speed_normalized;
    150e:	f8 01       	movw	r30, r16
    1510:	40 82       	st	Z, r4
    1512:	51 82       	std	Z+1, r5	; 0x01
    1514:	62 82       	std	Z+2, r6	; 0x02
    1516:	73 82       	std	Z+3, r7	; 0x03
    1518:	1b c0       	rjmp	.+54     	; 0x1550 <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized -= config->step_up;
    151a:	a5 01       	movw	r20, r10
    151c:	94 01       	movw	r18, r8
    151e:	c7 01       	movw	r24, r14
    1520:	b6 01       	movw	r22, r12
    1522:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__subsf3>
    1526:	f8 01       	movw	r30, r16
    1528:	60 83       	st	Z, r22
    152a:	71 83       	std	Z+1, r23	; 0x01
    152c:	82 83       	std	Z+2, r24	; 0x02
    152e:	93 83       	std	Z+3, r25	; 0x03
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <process_sample+0x2f6>
				}
			}
		}
	}
	else{
		*release_out = true;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	fa 01       	movw	r30, r20
    1536:	80 83       	st	Z, r24
		target_speed_normalized = 0.0f;
    1538:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <__data_end>
    153c:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <__data_end+0x1>
    1540:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <__data_end+0x2>
    1544:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <__data_end+0x3>
		USART_print("Bad data\n");
    1548:	8a e4       	ldi	r24, 0x4A	; 74
    154a:	93 e0       	ldi	r25, 0x03	; 3
    154c:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	}
}
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	ff 90       	pop	r15
    1558:	ef 90       	pop	r14
    155a:	df 90       	pop	r13
    155c:	cf 90       	pop	r12
    155e:	bf 90       	pop	r11
    1560:	af 90       	pop	r10
    1562:	9f 90       	pop	r9
    1564:	8f 90       	pop	r8
    1566:	7f 90       	pop	r7
    1568:	6f 90       	pop	r6
    156a:	5f 90       	pop	r5
    156c:	4f 90       	pop	r4
    156e:	08 95       	ret

00001570 <main>:

int main(void){
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	a8 97       	sbiw	r28, 0x28	; 40
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
	// default config
	config_t config = {
    1584:	82 e2       	ldi	r24, 0x22	; 34
    1586:	e0 e0       	ldi	r30, 0x00	; 0
    1588:	f1 e0       	ldi	r31, 0x01	; 1
    158a:	de 01       	movw	r26, r28
    158c:	11 96       	adiw	r26, 0x01	; 1
    158e:	01 90       	ld	r0, Z+
    1590:	0d 92       	st	X+, r0
    1592:	8a 95       	dec	r24
    1594:	e1 f7       	brne	.-8      	; 0x158e <main+0x1e>
		.release_position_b = 90,
		.step_up = 0.05f,
		.step_down = 0.01f
	};
	
	USART_init(MYUBRR);
    1596:	80 e1       	ldi	r24, 0x10	; 16
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_init>
	
	// try to load config from EEPROM
	uint8_t result = config_load(&config);
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	0e 94 a4 02 	call	0x548	; 0x548 <config_load>
	if (result){
    15a6:	88 23       	and	r24, r24
    15a8:	29 f0       	breq	.+10     	; 0x15b4 <main+0x44>
		USART_print("Config loaded\n");
    15aa:	84 e5       	ldi	r24, 0x54	; 84
    15ac:	93 e0       	ldi	r25, 0x03	; 3
    15ae:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <main+0x4c>
	}
	else{
		USART_print("Using default config\n");
    15b4:	83 e6       	ldi	r24, 0x63	; 99
    15b6:	93 e0       	ldi	r25, 0x03	; 3
    15b8:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	}
	config_print(&config);
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	0e 94 05 02 	call	0x40a	; 0x40a <config_print>
		
	servo_init();
    15c4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <servo_init>
	software_serial_init();
    15c8:	0e 94 44 01 	call	0x288	; 0x288 <software_serial_init>
	lcd_init();
    15cc:	0e 94 20 04 	call	0x840	; 0x840 <lcd_init>
	buttons_init();
    15d0:	0e 94 8b 04 	call	0x916	; 0x916 <buttons_init>
	
	float speed_normalized = 0;
    15d4:	1b a2       	std	Y+35, r1	; 0x23
    15d6:	1c a2       	std	Y+36, r1	; 0x24
    15d8:	1d a2       	std	Y+37, r1	; 0x25
    15da:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t release = true;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	8f a3       	std	Y+39, r24	; 0x27
	uint8_t raw_sensor_data = 0;

	uint8_t mode = MODE_RUNNING;
    15e0:	18 a6       	std	Y+40, r1	; 0x28
	lcd_init();
	buttons_init();
	
	float speed_normalized = 0;
	uint8_t release = true;
	uint8_t raw_sensor_data = 0;
    15e2:	f1 2c       	mov	r15, r1
	uint8_t mode = MODE_RUNNING;
	
	// TODO: reset speed after timeout (in case sensor got disconnected)
	
    while (1){
		if (USART_avaliable()){
    15e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <USART_avaliable>
    15e8:	88 23       	and	r24, r24
    15ea:	39 f0       	breq	.+14     	; 0x15fa <main+0x8a>
			char data = USART_read();
    15ec:	0e 94 ef 00 	call	0x1de	; 0x1de <USART_read>
			process_serial(data, &config);
    15f0:	be 01       	movw	r22, r28
    15f2:	6f 5f       	subi	r22, 0xFF	; 255
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	0e 94 b9 08 	call	0x1172	; 0x1172 <process_serial>
		}

		if (mode == MODE_RUNNING){
    15fa:	88 a5       	ldd	r24, Y+40	; 0x28
    15fc:	81 11       	cpse	r24, r1
    15fe:	8f c0       	rjmp	.+286    	; 0x171e <main+0x1ae>
			uint8_t armed = switch_armed();
    1600:	0e 94 bc 04 	call	0x978	; 0x978 <switch_armed>
    1604:	e8 2e       	mov	r14, r24
			if (software_serial_available()){
    1606:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <software_serial_available>
    160a:	88 23       	and	r24, r24
    160c:	71 f0       	breq	.+28     	; 0x162a <main+0xba>
				uint8_t data = software_serial_read();
    160e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <software_serial_read>
    1612:	f8 2e       	mov	r15, r24
				process_sample(data, &config, &release, &speed_normalized);
    1614:	9e 01       	movw	r18, r28
    1616:	2d 5d       	subi	r18, 0xDD	; 221
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	ae 01       	movw	r20, r28
    161c:	49 5d       	subi	r20, 0xD9	; 217
    161e:	5f 4f       	sbci	r21, 0xFF	; 255
    1620:	be 01       	movw	r22, r28
    1622:	6f 5f       	subi	r22, 0xFF	; 255
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	0e 94 2d 09 	call	0x125a	; 0x125a <process_sample>
				raw_sensor_data = data;
			}
			
			if (!armed){
    162a:	e1 10       	cpse	r14, r1
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <main+0xc2>
				release = true;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	8f a3       	std	Y+39, r24	; 0x27
			}
			if (release){
    1632:	8f a1       	ldd	r24, Y+39	; 0x27
    1634:	88 23       	and	r24, r24
    1636:	29 f0       	breq	.+10     	; 0x1642 <main+0xd2>
				set_speed(config.release_position_a, config.release_position_b);
    1638:	69 8d       	ldd	r22, Y+25	; 0x19
    163a:	8f 89       	ldd	r24, Y+23	; 0x17
    163c:	0e 94 c2 04 	call	0x984	; 0x984 <set_speed>
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <main+0xe2>
			}
			else{
				set_normalized_speed(&config, speed_normalized);
    1642:	4b a1       	ldd	r20, Y+35	; 0x23
    1644:	5c a1       	ldd	r21, Y+36	; 0x24
    1646:	6d a1       	ldd	r22, Y+37	; 0x25
    1648:	7e a1       	ldd	r23, Y+38	; 0x26
    164a:	ce 01       	movw	r24, r28
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	0e 94 cd 04 	call	0x99a	; 0x99a <set_normalized_speed>
			}

			lcd_set_cursor(0, 0);
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			for (int i = 4; i >= 0; i--){
    165a:	04 e0       	ldi	r16, 0x04	; 4
    165c:	10 e0       	ldi	r17, 0x00	; 0
    165e:	15 c0       	rjmp	.+42     	; 0x168a <main+0x11a>
				if (raw_sensor_data & (1 << i)){
    1660:	8f 2d       	mov	r24, r15
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	00 2e       	mov	r0, r16
    1666:	02 c0       	rjmp	.+4      	; 0x166c <main+0xfc>
    1668:	95 95       	asr	r25
    166a:	87 95       	ror	r24
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <main+0xf8>
    1670:	80 ff       	sbrs	r24, 0
    1672:	05 c0       	rjmp	.+10     	; 0x167e <main+0x10e>
					lcd_print("#");
    1674:	89 e7       	ldi	r24, 0x79	; 121
    1676:	93 e0       	ldi	r25, 0x03	; 3
    1678:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <main+0x116>
				}
				else{
					lcd_print("-");
    167e:	82 eb       	ldi	r24, 0xB2	; 178
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			else{
				set_normalized_speed(&config, speed_normalized);
			}

			lcd_set_cursor(0, 0);
			for (int i = 4; i >= 0; i--){
    1686:	01 50       	subi	r16, 0x01	; 1
    1688:	11 09       	sbc	r17, r1
    168a:	11 23       	and	r17, r17
    168c:	4c f7       	brge	.-46     	; 0x1660 <main+0xf0>
				else{
					lcd_print("-");
				}
			}
			
			if (armed){
    168e:	ee 20       	and	r14, r14
    1690:	f9 f0       	breq	.+62     	; 0x16d0 <main+0x160>
				lcd_set_cursor(1, 16 - 5);
    1692:	6b e0       	ldi	r22, 0x0B	; 11
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
				lcd_print("Armed");
    169a:	8b e7       	ldi	r24, 0x7B	; 123
    169c:	93 e0       	ldi	r25, 0x03	; 3
    169e:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
				lcd_set_cursor(1, 0);
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
				if (release){
    16aa:	8f a1       	ldd	r24, Y+39	; 0x27
    16ac:	88 23       	and	r24, r24
    16ae:	29 f0       	breq	.+10     	; 0x16ba <main+0x14a>
					lcd_print("Release ");
    16b0:	81 e8       	ldi	r24, 0x81	; 129
    16b2:	93 e0       	ldi	r25, 0x03	; 3
    16b4:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    16b8:	13 c0       	rjmp	.+38     	; 0x16e0 <main+0x170>
				}
				else{
					lcd_print_float(speed_normalized);
    16ba:	6b a1       	ldd	r22, Y+35	; 0x23
    16bc:	7c a1       	ldd	r23, Y+36	; 0x24
    16be:	8d a1       	ldd	r24, Y+37	; 0x25
    16c0:	9e a1       	ldd	r25, Y+38	; 0x26
    16c2:	0e 94 a0 03 	call	0x740	; 0x740 <lcd_print_float>
					lcd_print("      ");
    16c6:	87 ec       	ldi	r24, 0xC7	; 199
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <main+0x170>
				}
			}
			else{
				lcd_set_cursor(1, 0);
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
				lcd_print("Disarmed        ");
    16d8:	8a e8       	ldi	r24, 0x8A	; 138
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			}

			if (button_up() && button_down() && !button_ok()){
    16e0:	0e 94 a4 04 	call	0x948	; 0x948 <button_up>
    16e4:	88 23       	and	r24, r24
    16e6:	d9 f0       	breq	.+54     	; 0x171e <main+0x1ae>
    16e8:	0e 94 ac 04 	call	0x958	; 0x958 <button_down>
    16ec:	88 23       	and	r24, r24
    16ee:	b9 f0       	breq	.+46     	; 0x171e <main+0x1ae>
    16f0:	0e 94 b3 04 	call	0x966	; 0x966 <button_ok>
    16f4:	81 11       	cpse	r24, r1
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <main+0x1ae>
				mode = MODE_SETUP;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	88 a7       	std	Y+40, r24	; 0x28
				lcd_clear();
    16fc:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
				lcd_print("Setup mode");
    1700:	8b e9       	ldi	r24, 0x9B	; 155
    1702:	93 e0       	ldi	r25, 0x03	; 3
    1704:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    1708:	2f ef       	ldi	r18, 0xFF	; 255
    170a:	83 ed       	ldi	r24, 0xD3	; 211
    170c:	90 e3       	ldi	r25, 0x30	; 48
    170e:	21 50       	subi	r18, 0x01	; 1
    1710:	80 40       	sbci	r24, 0x00	; 0
    1712:	90 40       	sbci	r25, 0x00	; 0
    1714:	e1 f7       	brne	.-8      	; 0x170e <main+0x19e>
    1716:	00 c0       	rjmp	.+0      	; 0x1718 <main+0x1a8>
    1718:	00 00       	nop
				_delay_ms(1000);
				lcd_clear();
    171a:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
			}
		}

		if (mode == MODE_SETUP){
    171e:	88 a5       	ldd	r24, Y+40	; 0x28
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	09 f0       	breq	.+2      	; 0x1726 <main+0x1b6>
    1724:	5f cf       	rjmp	.-322    	; 0x15e4 <main+0x74>
			setup_mode(&config, &mode);
    1726:	be 01       	movw	r22, r28
    1728:	68 5d       	subi	r22, 0xD8	; 216
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <setup_mode>
    1734:	57 cf       	rjmp	.-338    	; 0x15e4 <main+0x74>

00001736 <__subsf3>:
    1736:	50 58       	subi	r21, 0x80	; 128

00001738 <__addsf3>:
    1738:	bb 27       	eor	r27, r27
    173a:	aa 27       	eor	r26, r26
    173c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3x>
    1740:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_round>
    1744:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fp_pscA>
    1748:	38 f0       	brcs	.+14     	; 0x1758 <__addsf3+0x20>
    174a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fp_pscB>
    174e:	20 f0       	brcs	.+8      	; 0x1758 <__addsf3+0x20>
    1750:	39 f4       	brne	.+14     	; 0x1760 <__addsf3+0x28>
    1752:	9f 3f       	cpi	r25, 0xFF	; 255
    1754:	19 f4       	brne	.+6      	; 0x175c <__addsf3+0x24>
    1756:	26 f4       	brtc	.+8      	; 0x1760 <__addsf3+0x28>
    1758:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_nan>
    175c:	0e f4       	brtc	.+2      	; 0x1760 <__addsf3+0x28>
    175e:	e0 95       	com	r30
    1760:	e7 fb       	bst	r30, 7
    1762:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_inf>

00001766 <__addsf3x>:
    1766:	e9 2f       	mov	r30, r25
    1768:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__fp_split3>
    176c:	58 f3       	brcs	.-42     	; 0x1744 <__addsf3+0xc>
    176e:	ba 17       	cp	r27, r26
    1770:	62 07       	cpc	r22, r18
    1772:	73 07       	cpc	r23, r19
    1774:	84 07       	cpc	r24, r20
    1776:	95 07       	cpc	r25, r21
    1778:	20 f0       	brcs	.+8      	; 0x1782 <__addsf3x+0x1c>
    177a:	79 f4       	brne	.+30     	; 0x179a <__addsf3x+0x34>
    177c:	a6 f5       	brtc	.+104    	; 0x17e6 <__addsf3x+0x80>
    177e:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_zero>
    1782:	0e f4       	brtc	.+2      	; 0x1786 <__addsf3x+0x20>
    1784:	e0 95       	com	r30
    1786:	0b 2e       	mov	r0, r27
    1788:	ba 2f       	mov	r27, r26
    178a:	a0 2d       	mov	r26, r0
    178c:	0b 01       	movw	r0, r22
    178e:	b9 01       	movw	r22, r18
    1790:	90 01       	movw	r18, r0
    1792:	0c 01       	movw	r0, r24
    1794:	ca 01       	movw	r24, r20
    1796:	a0 01       	movw	r20, r0
    1798:	11 24       	eor	r1, r1
    179a:	ff 27       	eor	r31, r31
    179c:	59 1b       	sub	r21, r25
    179e:	99 f0       	breq	.+38     	; 0x17c6 <__addsf3x+0x60>
    17a0:	59 3f       	cpi	r21, 0xF9	; 249
    17a2:	50 f4       	brcc	.+20     	; 0x17b8 <__addsf3x+0x52>
    17a4:	50 3e       	cpi	r21, 0xE0	; 224
    17a6:	68 f1       	brcs	.+90     	; 0x1802 <__addsf3x+0x9c>
    17a8:	1a 16       	cp	r1, r26
    17aa:	f0 40       	sbci	r31, 0x00	; 0
    17ac:	a2 2f       	mov	r26, r18
    17ae:	23 2f       	mov	r18, r19
    17b0:	34 2f       	mov	r19, r20
    17b2:	44 27       	eor	r20, r20
    17b4:	58 5f       	subi	r21, 0xF8	; 248
    17b6:	f3 cf       	rjmp	.-26     	; 0x179e <__addsf3x+0x38>
    17b8:	46 95       	lsr	r20
    17ba:	37 95       	ror	r19
    17bc:	27 95       	ror	r18
    17be:	a7 95       	ror	r26
    17c0:	f0 40       	sbci	r31, 0x00	; 0
    17c2:	53 95       	inc	r21
    17c4:	c9 f7       	brne	.-14     	; 0x17b8 <__addsf3x+0x52>
    17c6:	7e f4       	brtc	.+30     	; 0x17e6 <__addsf3x+0x80>
    17c8:	1f 16       	cp	r1, r31
    17ca:	ba 0b       	sbc	r27, r26
    17cc:	62 0b       	sbc	r22, r18
    17ce:	73 0b       	sbc	r23, r19
    17d0:	84 0b       	sbc	r24, r20
    17d2:	ba f0       	brmi	.+46     	; 0x1802 <__addsf3x+0x9c>
    17d4:	91 50       	subi	r25, 0x01	; 1
    17d6:	a1 f0       	breq	.+40     	; 0x1800 <__addsf3x+0x9a>
    17d8:	ff 0f       	add	r31, r31
    17da:	bb 1f       	adc	r27, r27
    17dc:	66 1f       	adc	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	88 1f       	adc	r24, r24
    17e2:	c2 f7       	brpl	.-16     	; 0x17d4 <__addsf3x+0x6e>
    17e4:	0e c0       	rjmp	.+28     	; 0x1802 <__addsf3x+0x9c>
    17e6:	ba 0f       	add	r27, r26
    17e8:	62 1f       	adc	r22, r18
    17ea:	73 1f       	adc	r23, r19
    17ec:	84 1f       	adc	r24, r20
    17ee:	48 f4       	brcc	.+18     	; 0x1802 <__addsf3x+0x9c>
    17f0:	87 95       	ror	r24
    17f2:	77 95       	ror	r23
    17f4:	67 95       	ror	r22
    17f6:	b7 95       	ror	r27
    17f8:	f7 95       	ror	r31
    17fa:	9e 3f       	cpi	r25, 0xFE	; 254
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <__addsf3x+0x9a>
    17fe:	b0 cf       	rjmp	.-160    	; 0x1760 <__addsf3+0x28>
    1800:	93 95       	inc	r25
    1802:	88 0f       	add	r24, r24
    1804:	08 f0       	brcs	.+2      	; 0x1808 <__addsf3x+0xa2>
    1806:	99 27       	eor	r25, r25
    1808:	ee 0f       	add	r30, r30
    180a:	97 95       	ror	r25
    180c:	87 95       	ror	r24
    180e:	08 95       	ret

00001810 <__cmpsf2>:
    1810:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_cmp>
    1814:	08 f4       	brcc	.+2      	; 0x1818 <__cmpsf2+0x8>
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	08 95       	ret

0000181a <__fixsfsi>:
    181a:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fixunssfsi>
    181e:	68 94       	set
    1820:	b1 11       	cpse	r27, r1
    1822:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__fp_szero>
    1826:	08 95       	ret

00001828 <__fixunssfsi>:
    1828:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__fp_splitA>
    182c:	88 f0       	brcs	.+34     	; 0x1850 <__fixunssfsi+0x28>
    182e:	9f 57       	subi	r25, 0x7F	; 127
    1830:	98 f0       	brcs	.+38     	; 0x1858 <__fixunssfsi+0x30>
    1832:	b9 2f       	mov	r27, r25
    1834:	99 27       	eor	r25, r25
    1836:	b7 51       	subi	r27, 0x17	; 23
    1838:	b0 f0       	brcs	.+44     	; 0x1866 <__fixunssfsi+0x3e>
    183a:	e1 f0       	breq	.+56     	; 0x1874 <__fixunssfsi+0x4c>
    183c:	66 0f       	add	r22, r22
    183e:	77 1f       	adc	r23, r23
    1840:	88 1f       	adc	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	1a f0       	brmi	.+6      	; 0x184c <__fixunssfsi+0x24>
    1846:	ba 95       	dec	r27
    1848:	c9 f7       	brne	.-14     	; 0x183c <__fixunssfsi+0x14>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <__fixunssfsi+0x4c>
    184c:	b1 30       	cpi	r27, 0x01	; 1
    184e:	91 f0       	breq	.+36     	; 0x1874 <__fixunssfsi+0x4c>
    1850:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fp_zero>
    1854:	b1 e0       	ldi	r27, 0x01	; 1
    1856:	08 95       	ret
    1858:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_zero>
    185c:	67 2f       	mov	r22, r23
    185e:	78 2f       	mov	r23, r24
    1860:	88 27       	eor	r24, r24
    1862:	b8 5f       	subi	r27, 0xF8	; 248
    1864:	39 f0       	breq	.+14     	; 0x1874 <__fixunssfsi+0x4c>
    1866:	b9 3f       	cpi	r27, 0xF9	; 249
    1868:	cc f3       	brlt	.-14     	; 0x185c <__fixunssfsi+0x34>
    186a:	86 95       	lsr	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	b3 95       	inc	r27
    1872:	d9 f7       	brne	.-10     	; 0x186a <__fixunssfsi+0x42>
    1874:	3e f4       	brtc	.+14     	; 0x1884 <__fixunssfsi+0x5c>
    1876:	90 95       	com	r25
    1878:	80 95       	com	r24
    187a:	70 95       	com	r23
    187c:	61 95       	neg	r22
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	8f 4f       	sbci	r24, 0xFF	; 255
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	08 95       	ret

00001886 <__floatunsisf>:
    1886:	e8 94       	clt
    1888:	09 c0       	rjmp	.+18     	; 0x189c <__floatsisf+0x12>

0000188a <__floatsisf>:
    188a:	97 fb       	bst	r25, 7
    188c:	3e f4       	brtc	.+14     	; 0x189c <__floatsisf+0x12>
    188e:	90 95       	com	r25
    1890:	80 95       	com	r24
    1892:	70 95       	com	r23
    1894:	61 95       	neg	r22
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	8f 4f       	sbci	r24, 0xFF	; 255
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	99 23       	and	r25, r25
    189e:	a9 f0       	breq	.+42     	; 0x18ca <__floatsisf+0x40>
    18a0:	f9 2f       	mov	r31, r25
    18a2:	96 e9       	ldi	r25, 0x96	; 150
    18a4:	bb 27       	eor	r27, r27
    18a6:	93 95       	inc	r25
    18a8:	f6 95       	lsr	r31
    18aa:	87 95       	ror	r24
    18ac:	77 95       	ror	r23
    18ae:	67 95       	ror	r22
    18b0:	b7 95       	ror	r27
    18b2:	f1 11       	cpse	r31, r1
    18b4:	f8 cf       	rjmp	.-16     	; 0x18a6 <__floatsisf+0x1c>
    18b6:	fa f4       	brpl	.+62     	; 0x18f6 <__floatsisf+0x6c>
    18b8:	bb 0f       	add	r27, r27
    18ba:	11 f4       	brne	.+4      	; 0x18c0 <__floatsisf+0x36>
    18bc:	60 ff       	sbrs	r22, 0
    18be:	1b c0       	rjmp	.+54     	; 0x18f6 <__floatsisf+0x6c>
    18c0:	6f 5f       	subi	r22, 0xFF	; 255
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	8f 4f       	sbci	r24, 0xFF	; 255
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	16 c0       	rjmp	.+44     	; 0x18f6 <__floatsisf+0x6c>
    18ca:	88 23       	and	r24, r24
    18cc:	11 f0       	breq	.+4      	; 0x18d2 <__floatsisf+0x48>
    18ce:	96 e9       	ldi	r25, 0x96	; 150
    18d0:	11 c0       	rjmp	.+34     	; 0x18f4 <__floatsisf+0x6a>
    18d2:	77 23       	and	r23, r23
    18d4:	21 f0       	breq	.+8      	; 0x18de <__floatsisf+0x54>
    18d6:	9e e8       	ldi	r25, 0x8E	; 142
    18d8:	87 2f       	mov	r24, r23
    18da:	76 2f       	mov	r23, r22
    18dc:	05 c0       	rjmp	.+10     	; 0x18e8 <__floatsisf+0x5e>
    18de:	66 23       	and	r22, r22
    18e0:	71 f0       	breq	.+28     	; 0x18fe <__floatsisf+0x74>
    18e2:	96 e8       	ldi	r25, 0x86	; 134
    18e4:	86 2f       	mov	r24, r22
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	2a f0       	brmi	.+10     	; 0x18f6 <__floatsisf+0x6c>
    18ec:	9a 95       	dec	r25
    18ee:	66 0f       	add	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24
    18f4:	da f7       	brpl	.-10     	; 0x18ec <__floatsisf+0x62>
    18f6:	88 0f       	add	r24, r24
    18f8:	96 95       	lsr	r25
    18fa:	87 95       	ror	r24
    18fc:	97 f9       	bld	r25, 7
    18fe:	08 95       	ret

00001900 <__fp_cmp>:
    1900:	99 0f       	add	r25, r25
    1902:	00 08       	sbc	r0, r0
    1904:	55 0f       	add	r21, r21
    1906:	aa 0b       	sbc	r26, r26
    1908:	e0 e8       	ldi	r30, 0x80	; 128
    190a:	fe ef       	ldi	r31, 0xFE	; 254
    190c:	16 16       	cp	r1, r22
    190e:	17 06       	cpc	r1, r23
    1910:	e8 07       	cpc	r30, r24
    1912:	f9 07       	cpc	r31, r25
    1914:	c0 f0       	brcs	.+48     	; 0x1946 <__fp_cmp+0x46>
    1916:	12 16       	cp	r1, r18
    1918:	13 06       	cpc	r1, r19
    191a:	e4 07       	cpc	r30, r20
    191c:	f5 07       	cpc	r31, r21
    191e:	98 f0       	brcs	.+38     	; 0x1946 <__fp_cmp+0x46>
    1920:	62 1b       	sub	r22, r18
    1922:	73 0b       	sbc	r23, r19
    1924:	84 0b       	sbc	r24, r20
    1926:	95 0b       	sbc	r25, r21
    1928:	39 f4       	brne	.+14     	; 0x1938 <__fp_cmp+0x38>
    192a:	0a 26       	eor	r0, r26
    192c:	61 f0       	breq	.+24     	; 0x1946 <__fp_cmp+0x46>
    192e:	23 2b       	or	r18, r19
    1930:	24 2b       	or	r18, r20
    1932:	25 2b       	or	r18, r21
    1934:	21 f4       	brne	.+8      	; 0x193e <__fp_cmp+0x3e>
    1936:	08 95       	ret
    1938:	0a 26       	eor	r0, r26
    193a:	09 f4       	brne	.+2      	; 0x193e <__fp_cmp+0x3e>
    193c:	a1 40       	sbci	r26, 0x01	; 1
    193e:	a6 95       	lsr	r26
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	81 1d       	adc	r24, r1
    1944:	81 1d       	adc	r24, r1
    1946:	08 95       	ret

00001948 <__fp_inf>:
    1948:	97 f9       	bld	r25, 7
    194a:	9f 67       	ori	r25, 0x7F	; 127
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	08 95       	ret

00001954 <__fp_nan>:
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	80 ec       	ldi	r24, 0xC0	; 192
    1958:	08 95       	ret

0000195a <__fp_pscA>:
    195a:	00 24       	eor	r0, r0
    195c:	0a 94       	dec	r0
    195e:	16 16       	cp	r1, r22
    1960:	17 06       	cpc	r1, r23
    1962:	18 06       	cpc	r1, r24
    1964:	09 06       	cpc	r0, r25
    1966:	08 95       	ret

00001968 <__fp_pscB>:
    1968:	00 24       	eor	r0, r0
    196a:	0a 94       	dec	r0
    196c:	12 16       	cp	r1, r18
    196e:	13 06       	cpc	r1, r19
    1970:	14 06       	cpc	r1, r20
    1972:	05 06       	cpc	r0, r21
    1974:	08 95       	ret

00001976 <__fp_round>:
    1976:	09 2e       	mov	r0, r25
    1978:	03 94       	inc	r0
    197a:	00 0c       	add	r0, r0
    197c:	11 f4       	brne	.+4      	; 0x1982 <__fp_round+0xc>
    197e:	88 23       	and	r24, r24
    1980:	52 f0       	brmi	.+20     	; 0x1996 <__fp_round+0x20>
    1982:	bb 0f       	add	r27, r27
    1984:	40 f4       	brcc	.+16     	; 0x1996 <__fp_round+0x20>
    1986:	bf 2b       	or	r27, r31
    1988:	11 f4       	brne	.+4      	; 0x198e <__fp_round+0x18>
    198a:	60 ff       	sbrs	r22, 0
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <__fp_round+0x20>
    198e:	6f 5f       	subi	r22, 0xFF	; 255
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	8f 4f       	sbci	r24, 0xFF	; 255
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	08 95       	ret

00001998 <__fp_split3>:
    1998:	57 fd       	sbrc	r21, 7
    199a:	90 58       	subi	r25, 0x80	; 128
    199c:	44 0f       	add	r20, r20
    199e:	55 1f       	adc	r21, r21
    19a0:	59 f0       	breq	.+22     	; 0x19b8 <__fp_splitA+0x10>
    19a2:	5f 3f       	cpi	r21, 0xFF	; 255
    19a4:	71 f0       	breq	.+28     	; 0x19c2 <__fp_splitA+0x1a>
    19a6:	47 95       	ror	r20

000019a8 <__fp_splitA>:
    19a8:	88 0f       	add	r24, r24
    19aa:	97 fb       	bst	r25, 7
    19ac:	99 1f       	adc	r25, r25
    19ae:	61 f0       	breq	.+24     	; 0x19c8 <__fp_splitA+0x20>
    19b0:	9f 3f       	cpi	r25, 0xFF	; 255
    19b2:	79 f0       	breq	.+30     	; 0x19d2 <__fp_splitA+0x2a>
    19b4:	87 95       	ror	r24
    19b6:	08 95       	ret
    19b8:	12 16       	cp	r1, r18
    19ba:	13 06       	cpc	r1, r19
    19bc:	14 06       	cpc	r1, r20
    19be:	55 1f       	adc	r21, r21
    19c0:	f2 cf       	rjmp	.-28     	; 0x19a6 <__fp_split3+0xe>
    19c2:	46 95       	lsr	r20
    19c4:	f1 df       	rcall	.-30     	; 0x19a8 <__fp_splitA>
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <__fp_splitA+0x30>
    19c8:	16 16       	cp	r1, r22
    19ca:	17 06       	cpc	r1, r23
    19cc:	18 06       	cpc	r1, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	f1 cf       	rjmp	.-30     	; 0x19b4 <__fp_splitA+0xc>
    19d2:	86 95       	lsr	r24
    19d4:	71 05       	cpc	r23, r1
    19d6:	61 05       	cpc	r22, r1
    19d8:	08 94       	sec
    19da:	08 95       	ret

000019dc <__fp_zero>:
    19dc:	e8 94       	clt

000019de <__fp_szero>:
    19de:	bb 27       	eor	r27, r27
    19e0:	66 27       	eor	r22, r22
    19e2:	77 27       	eor	r23, r23
    19e4:	cb 01       	movw	r24, r22
    19e6:	97 f9       	bld	r25, 7
    19e8:	08 95       	ret

000019ea <__gesf2>:
    19ea:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_cmp>
    19ee:	08 f4       	brcc	.+2      	; 0x19f2 <__gesf2+0x8>
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	08 95       	ret

000019f4 <__mulsf3>:
    19f4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__mulsf3x>
    19f8:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_round>
    19fc:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fp_pscA>
    1a00:	38 f0       	brcs	.+14     	; 0x1a10 <__mulsf3+0x1c>
    1a02:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fp_pscB>
    1a06:	20 f0       	brcs	.+8      	; 0x1a10 <__mulsf3+0x1c>
    1a08:	95 23       	and	r25, r21
    1a0a:	11 f0       	breq	.+4      	; 0x1a10 <__mulsf3+0x1c>
    1a0c:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_inf>
    1a10:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_nan>
    1a14:	11 24       	eor	r1, r1
    1a16:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__fp_szero>

00001a1a <__mulsf3x>:
    1a1a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__fp_split3>
    1a1e:	70 f3       	brcs	.-36     	; 0x19fc <__mulsf3+0x8>

00001a20 <__mulsf3_pse>:
    1a20:	95 9f       	mul	r25, r21
    1a22:	c1 f3       	breq	.-16     	; 0x1a14 <__mulsf3+0x20>
    1a24:	95 0f       	add	r25, r21
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	55 1f       	adc	r21, r21
    1a2a:	62 9f       	mul	r22, r18
    1a2c:	f0 01       	movw	r30, r0
    1a2e:	72 9f       	mul	r23, r18
    1a30:	bb 27       	eor	r27, r27
    1a32:	f0 0d       	add	r31, r0
    1a34:	b1 1d       	adc	r27, r1
    1a36:	63 9f       	mul	r22, r19
    1a38:	aa 27       	eor	r26, r26
    1a3a:	f0 0d       	add	r31, r0
    1a3c:	b1 1d       	adc	r27, r1
    1a3e:	aa 1f       	adc	r26, r26
    1a40:	64 9f       	mul	r22, r20
    1a42:	66 27       	eor	r22, r22
    1a44:	b0 0d       	add	r27, r0
    1a46:	a1 1d       	adc	r26, r1
    1a48:	66 1f       	adc	r22, r22
    1a4a:	82 9f       	mul	r24, r18
    1a4c:	22 27       	eor	r18, r18
    1a4e:	b0 0d       	add	r27, r0
    1a50:	a1 1d       	adc	r26, r1
    1a52:	62 1f       	adc	r22, r18
    1a54:	73 9f       	mul	r23, r19
    1a56:	b0 0d       	add	r27, r0
    1a58:	a1 1d       	adc	r26, r1
    1a5a:	62 1f       	adc	r22, r18
    1a5c:	83 9f       	mul	r24, r19
    1a5e:	a0 0d       	add	r26, r0
    1a60:	61 1d       	adc	r22, r1
    1a62:	22 1f       	adc	r18, r18
    1a64:	74 9f       	mul	r23, r20
    1a66:	33 27       	eor	r19, r19
    1a68:	a0 0d       	add	r26, r0
    1a6a:	61 1d       	adc	r22, r1
    1a6c:	23 1f       	adc	r18, r19
    1a6e:	84 9f       	mul	r24, r20
    1a70:	60 0d       	add	r22, r0
    1a72:	21 1d       	adc	r18, r1
    1a74:	82 2f       	mov	r24, r18
    1a76:	76 2f       	mov	r23, r22
    1a78:	6a 2f       	mov	r22, r26
    1a7a:	11 24       	eor	r1, r1
    1a7c:	9f 57       	subi	r25, 0x7F	; 127
    1a7e:	50 40       	sbci	r21, 0x00	; 0
    1a80:	9a f0       	brmi	.+38     	; 0x1aa8 <__mulsf3_pse+0x88>
    1a82:	f1 f0       	breq	.+60     	; 0x1ac0 <__mulsf3_pse+0xa0>
    1a84:	88 23       	and	r24, r24
    1a86:	4a f0       	brmi	.+18     	; 0x1a9a <__mulsf3_pse+0x7a>
    1a88:	ee 0f       	add	r30, r30
    1a8a:	ff 1f       	adc	r31, r31
    1a8c:	bb 1f       	adc	r27, r27
    1a8e:	66 1f       	adc	r22, r22
    1a90:	77 1f       	adc	r23, r23
    1a92:	88 1f       	adc	r24, r24
    1a94:	91 50       	subi	r25, 0x01	; 1
    1a96:	50 40       	sbci	r21, 0x00	; 0
    1a98:	a9 f7       	brne	.-22     	; 0x1a84 <__mulsf3_pse+0x64>
    1a9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a9c:	51 05       	cpc	r21, r1
    1a9e:	80 f0       	brcs	.+32     	; 0x1ac0 <__mulsf3_pse+0xa0>
    1aa0:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_inf>
    1aa4:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__fp_szero>
    1aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aaa:	e4 f3       	brlt	.-8      	; 0x1aa4 <__mulsf3_pse+0x84>
    1aac:	98 3e       	cpi	r25, 0xE8	; 232
    1aae:	d4 f3       	brlt	.-12     	; 0x1aa4 <__mulsf3_pse+0x84>
    1ab0:	86 95       	lsr	r24
    1ab2:	77 95       	ror	r23
    1ab4:	67 95       	ror	r22
    1ab6:	b7 95       	ror	r27
    1ab8:	f7 95       	ror	r31
    1aba:	e7 95       	ror	r30
    1abc:	9f 5f       	subi	r25, 0xFF	; 255
    1abe:	c1 f7       	brne	.-16     	; 0x1ab0 <__mulsf3_pse+0x90>
    1ac0:	fe 2b       	or	r31, r30
    1ac2:	88 0f       	add	r24, r24
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	96 95       	lsr	r25
    1ac8:	87 95       	ror	r24
    1aca:	97 f9       	bld	r25, 7
    1acc:	08 95       	ret

00001ace <__udivmodsi4>:
    1ace:	a1 e2       	ldi	r26, 0x21	; 33
    1ad0:	1a 2e       	mov	r1, r26
    1ad2:	aa 1b       	sub	r26, r26
    1ad4:	bb 1b       	sub	r27, r27
    1ad6:	fd 01       	movw	r30, r26
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <__udivmodsi4_ep>

00001ada <__udivmodsi4_loop>:
    1ada:	aa 1f       	adc	r26, r26
    1adc:	bb 1f       	adc	r27, r27
    1ade:	ee 1f       	adc	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	a2 17       	cp	r26, r18
    1ae4:	b3 07       	cpc	r27, r19
    1ae6:	e4 07       	cpc	r30, r20
    1ae8:	f5 07       	cpc	r31, r21
    1aea:	20 f0       	brcs	.+8      	; 0x1af4 <__udivmodsi4_ep>
    1aec:	a2 1b       	sub	r26, r18
    1aee:	b3 0b       	sbc	r27, r19
    1af0:	e4 0b       	sbc	r30, r20
    1af2:	f5 0b       	sbc	r31, r21

00001af4 <__udivmodsi4_ep>:
    1af4:	66 1f       	adc	r22, r22
    1af6:	77 1f       	adc	r23, r23
    1af8:	88 1f       	adc	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	1a 94       	dec	r1
    1afe:	69 f7       	brne	.-38     	; 0x1ada <__udivmodsi4_loop>
    1b00:	60 95       	com	r22
    1b02:	70 95       	com	r23
    1b04:	80 95       	com	r24
    1b06:	90 95       	com	r25
    1b08:	9b 01       	movw	r18, r22
    1b0a:	ac 01       	movw	r20, r24
    1b0c:	bd 01       	movw	r22, r26
    1b0e:	cf 01       	movw	r24, r30
    1b10:	08 95       	ret

00001b12 <__tablejump2__>:
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	05 90       	lpm	r0, Z+
    1b18:	f4 91       	lpm	r31, Z
    1b1a:	e0 2d       	mov	r30, r0
    1b1c:	09 94       	ijmp

00001b1e <__umulhisi3>:
    1b1e:	a2 9f       	mul	r26, r18
    1b20:	b0 01       	movw	r22, r0
    1b22:	b3 9f       	mul	r27, r19
    1b24:	c0 01       	movw	r24, r0
    1b26:	a3 9f       	mul	r26, r19
    1b28:	70 0d       	add	r23, r0
    1b2a:	81 1d       	adc	r24, r1
    1b2c:	11 24       	eor	r1, r1
    1b2e:	91 1d       	adc	r25, r1
    1b30:	b2 9f       	mul	r27, r18
    1b32:	70 0d       	add	r23, r0
    1b34:	81 1d       	adc	r24, r1
    1b36:	11 24       	eor	r1, r1
    1b38:	91 1d       	adc	r25, r1
    1b3a:	08 95       	ret

00001b3c <atoi>:
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	88 27       	eor	r24, r24
    1b40:	99 27       	eor	r25, r25
    1b42:	e8 94       	clt
    1b44:	21 91       	ld	r18, Z+
    1b46:	20 32       	cpi	r18, 0x20	; 32
    1b48:	e9 f3       	breq	.-6      	; 0x1b44 <atoi+0x8>
    1b4a:	29 30       	cpi	r18, 0x09	; 9
    1b4c:	10 f0       	brcs	.+4      	; 0x1b52 <atoi+0x16>
    1b4e:	2e 30       	cpi	r18, 0x0E	; 14
    1b50:	c8 f3       	brcs	.-14     	; 0x1b44 <atoi+0x8>
    1b52:	2b 32       	cpi	r18, 0x2B	; 43
    1b54:	41 f0       	breq	.+16     	; 0x1b66 <atoi+0x2a>
    1b56:	2d 32       	cpi	r18, 0x2D	; 45
    1b58:	39 f4       	brne	.+14     	; 0x1b68 <atoi+0x2c>
    1b5a:	68 94       	set
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <atoi+0x2a>
    1b5e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__mulhi_const_10>
    1b62:	82 0f       	add	r24, r18
    1b64:	91 1d       	adc	r25, r1
    1b66:	21 91       	ld	r18, Z+
    1b68:	20 53       	subi	r18, 0x30	; 48
    1b6a:	2a 30       	cpi	r18, 0x0A	; 10
    1b6c:	c0 f3       	brcs	.-16     	; 0x1b5e <atoi+0x22>
    1b6e:	1e f4       	brtc	.+6      	; 0x1b76 <atoi+0x3a>
    1b70:	90 95       	com	r25
    1b72:	81 95       	neg	r24
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	08 95       	ret

00001b78 <itoa>:
    1b78:	45 32       	cpi	r20, 0x25	; 37
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	20 f4       	brcc	.+8      	; 0x1b86 <itoa+0xe>
    1b7e:	42 30       	cpi	r20, 0x02	; 2
    1b80:	10 f0       	brcs	.+4      	; 0x1b86 <itoa+0xe>
    1b82:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__itoa_ncheck>
    1b86:	fb 01       	movw	r30, r22
    1b88:	10 82       	st	Z, r1
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	08 95       	ret

00001b8e <__itoa_ncheck>:
    1b8e:	bb 27       	eor	r27, r27
    1b90:	4a 30       	cpi	r20, 0x0A	; 10
    1b92:	31 f4       	brne	.+12     	; 0x1ba0 <__itoa_ncheck+0x12>
    1b94:	99 23       	and	r25, r25
    1b96:	22 f4       	brpl	.+8      	; 0x1ba0 <__itoa_ncheck+0x12>
    1b98:	bd e2       	ldi	r27, 0x2D	; 45
    1b9a:	90 95       	com	r25
    1b9c:	81 95       	neg	r24
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__utoa_common>

00001ba4 <__mulhi_const_10>:
    1ba4:	7a e0       	ldi	r23, 0x0A	; 10
    1ba6:	97 9f       	mul	r25, r23
    1ba8:	90 2d       	mov	r25, r0
    1baa:	87 9f       	mul	r24, r23
    1bac:	80 2d       	mov	r24, r0
    1bae:	91 0d       	add	r25, r1
    1bb0:	11 24       	eor	r1, r1
    1bb2:	08 95       	ret

00001bb4 <__utoa_ncheck>:
    1bb4:	bb 27       	eor	r27, r27

00001bb6 <__utoa_common>:
    1bb6:	fb 01       	movw	r30, r22
    1bb8:	55 27       	eor	r21, r21
    1bba:	aa 27       	eor	r26, r26
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	aa 1f       	adc	r26, r26
    1bc2:	a4 17       	cp	r26, r20
    1bc4:	10 f0       	brcs	.+4      	; 0x1bca <__utoa_common+0x14>
    1bc6:	a4 1b       	sub	r26, r20
    1bc8:	83 95       	inc	r24
    1bca:	50 51       	subi	r21, 0x10	; 16
    1bcc:	b9 f7       	brne	.-18     	; 0x1bbc <__utoa_common+0x6>
    1bce:	a0 5d       	subi	r26, 0xD0	; 208
    1bd0:	aa 33       	cpi	r26, 0x3A	; 58
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <__utoa_common+0x20>
    1bd4:	a9 5d       	subi	r26, 0xD9	; 217
    1bd6:	a1 93       	st	Z+, r26
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	79 f7       	brne	.-34     	; 0x1bba <__utoa_common+0x4>
    1bdc:	b1 11       	cpse	r27, r1
    1bde:	b1 93       	st	Z+, r27
    1be0:	11 92       	st	Z+, r1
    1be2:	cb 01       	movw	r24, r22
    1be4:	0c 94 0d 10 	jmp	0x201a	; 0x201a <strrev>

00001be8 <sprintf>:
    1be8:	ae e0       	ldi	r26, 0x0E	; 14
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ea ef       	ldi	r30, 0xFA	; 250
    1bee:	fd e0       	ldi	r31, 0x0D	; 13
    1bf0:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__prologue_saves__+0x1c>
    1bf4:	0d 89       	ldd	r16, Y+21	; 0x15
    1bf6:	1e 89       	ldd	r17, Y+22	; 0x16
    1bf8:	86 e0       	ldi	r24, 0x06	; 6
    1bfa:	8c 83       	std	Y+4, r24	; 0x04
    1bfc:	1a 83       	std	Y+2, r17	; 0x02
    1bfe:	09 83       	std	Y+1, r16	; 0x01
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	9f e7       	ldi	r25, 0x7F	; 127
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	ae 01       	movw	r20, r28
    1c0a:	47 5e       	subi	r20, 0xE7	; 231
    1c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0e:	6f 89       	ldd	r22, Y+23	; 0x17
    1c10:	78 8d       	ldd	r23, Y+24	; 0x18
    1c12:	ce 01       	movw	r24, r28
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <vfprintf>
    1c1a:	ef 81       	ldd	r30, Y+7	; 0x07
    1c1c:	f8 85       	ldd	r31, Y+8	; 0x08
    1c1e:	e0 0f       	add	r30, r16
    1c20:	f1 1f       	adc	r31, r17
    1c22:	10 82       	st	Z, r1
    1c24:	2e 96       	adiw	r28, 0x0e	; 14
    1c26:	e4 e0       	ldi	r30, 0x04	; 4
    1c28:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__epilogue_restores__+0x1c>

00001c2c <vfprintf>:
    1c2c:	ab e0       	ldi	r26, 0x0B	; 11
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ec e1       	ldi	r30, 0x1C	; 28
    1c32:	fe e0       	ldi	r31, 0x0E	; 14
    1c34:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__>
    1c38:	6c 01       	movw	r12, r24
    1c3a:	7b 01       	movw	r14, r22
    1c3c:	8a 01       	movw	r16, r20
    1c3e:	fc 01       	movw	r30, r24
    1c40:	17 82       	std	Z+7, r1	; 0x07
    1c42:	16 82       	std	Z+6, r1	; 0x06
    1c44:	83 81       	ldd	r24, Z+3	; 0x03
    1c46:	81 ff       	sbrs	r24, 1
    1c48:	cc c1       	rjmp	.+920    	; 0x1fe2 <vfprintf+0x3b6>
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	3c 01       	movw	r6, r24
    1c50:	f6 01       	movw	r30, r12
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	f7 01       	movw	r30, r14
    1c56:	93 fd       	sbrc	r25, 3
    1c58:	85 91       	lpm	r24, Z+
    1c5a:	93 ff       	sbrs	r25, 3
    1c5c:	81 91       	ld	r24, Z+
    1c5e:	7f 01       	movw	r14, r30
    1c60:	88 23       	and	r24, r24
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <vfprintf+0x3a>
    1c64:	ba c1       	rjmp	.+884    	; 0x1fda <vfprintf+0x3ae>
    1c66:	85 32       	cpi	r24, 0x25	; 37
    1c68:	39 f4       	brne	.+14     	; 0x1c78 <vfprintf+0x4c>
    1c6a:	93 fd       	sbrc	r25, 3
    1c6c:	85 91       	lpm	r24, Z+
    1c6e:	93 ff       	sbrs	r25, 3
    1c70:	81 91       	ld	r24, Z+
    1c72:	7f 01       	movw	r14, r30
    1c74:	85 32       	cpi	r24, 0x25	; 37
    1c76:	29 f4       	brne	.+10     	; 0x1c82 <vfprintf+0x56>
    1c78:	b6 01       	movw	r22, r12
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1c80:	e7 cf       	rjmp	.-50     	; 0x1c50 <vfprintf+0x24>
    1c82:	91 2c       	mov	r9, r1
    1c84:	21 2c       	mov	r2, r1
    1c86:	31 2c       	mov	r3, r1
    1c88:	ff e1       	ldi	r31, 0x1F	; 31
    1c8a:	f3 15       	cp	r31, r3
    1c8c:	d8 f0       	brcs	.+54     	; 0x1cc4 <vfprintf+0x98>
    1c8e:	8b 32       	cpi	r24, 0x2B	; 43
    1c90:	79 f0       	breq	.+30     	; 0x1cb0 <vfprintf+0x84>
    1c92:	38 f4       	brcc	.+14     	; 0x1ca2 <vfprintf+0x76>
    1c94:	80 32       	cpi	r24, 0x20	; 32
    1c96:	79 f0       	breq	.+30     	; 0x1cb6 <vfprintf+0x8a>
    1c98:	83 32       	cpi	r24, 0x23	; 35
    1c9a:	a1 f4       	brne	.+40     	; 0x1cc4 <vfprintf+0x98>
    1c9c:	23 2d       	mov	r18, r3
    1c9e:	20 61       	ori	r18, 0x10	; 16
    1ca0:	1d c0       	rjmp	.+58     	; 0x1cdc <vfprintf+0xb0>
    1ca2:	8d 32       	cpi	r24, 0x2D	; 45
    1ca4:	61 f0       	breq	.+24     	; 0x1cbe <vfprintf+0x92>
    1ca6:	80 33       	cpi	r24, 0x30	; 48
    1ca8:	69 f4       	brne	.+26     	; 0x1cc4 <vfprintf+0x98>
    1caa:	23 2d       	mov	r18, r3
    1cac:	21 60       	ori	r18, 0x01	; 1
    1cae:	16 c0       	rjmp	.+44     	; 0x1cdc <vfprintf+0xb0>
    1cb0:	83 2d       	mov	r24, r3
    1cb2:	82 60       	ori	r24, 0x02	; 2
    1cb4:	38 2e       	mov	r3, r24
    1cb6:	e3 2d       	mov	r30, r3
    1cb8:	e4 60       	ori	r30, 0x04	; 4
    1cba:	3e 2e       	mov	r3, r30
    1cbc:	2a c0       	rjmp	.+84     	; 0x1d12 <vfprintf+0xe6>
    1cbe:	f3 2d       	mov	r31, r3
    1cc0:	f8 60       	ori	r31, 0x08	; 8
    1cc2:	1d c0       	rjmp	.+58     	; 0x1cfe <vfprintf+0xd2>
    1cc4:	37 fc       	sbrc	r3, 7
    1cc6:	2d c0       	rjmp	.+90     	; 0x1d22 <vfprintf+0xf6>
    1cc8:	20 ed       	ldi	r18, 0xD0	; 208
    1cca:	28 0f       	add	r18, r24
    1ccc:	2a 30       	cpi	r18, 0x0A	; 10
    1cce:	40 f0       	brcs	.+16     	; 0x1ce0 <vfprintf+0xb4>
    1cd0:	8e 32       	cpi	r24, 0x2E	; 46
    1cd2:	b9 f4       	brne	.+46     	; 0x1d02 <vfprintf+0xd6>
    1cd4:	36 fc       	sbrc	r3, 6
    1cd6:	81 c1       	rjmp	.+770    	; 0x1fda <vfprintf+0x3ae>
    1cd8:	23 2d       	mov	r18, r3
    1cda:	20 64       	ori	r18, 0x40	; 64
    1cdc:	32 2e       	mov	r3, r18
    1cde:	19 c0       	rjmp	.+50     	; 0x1d12 <vfprintf+0xe6>
    1ce0:	36 fe       	sbrs	r3, 6
    1ce2:	06 c0       	rjmp	.+12     	; 0x1cf0 <vfprintf+0xc4>
    1ce4:	8a e0       	ldi	r24, 0x0A	; 10
    1ce6:	98 9e       	mul	r9, r24
    1ce8:	20 0d       	add	r18, r0
    1cea:	11 24       	eor	r1, r1
    1cec:	92 2e       	mov	r9, r18
    1cee:	11 c0       	rjmp	.+34     	; 0x1d12 <vfprintf+0xe6>
    1cf0:	ea e0       	ldi	r30, 0x0A	; 10
    1cf2:	2e 9e       	mul	r2, r30
    1cf4:	20 0d       	add	r18, r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	22 2e       	mov	r2, r18
    1cfa:	f3 2d       	mov	r31, r3
    1cfc:	f0 62       	ori	r31, 0x20	; 32
    1cfe:	3f 2e       	mov	r3, r31
    1d00:	08 c0       	rjmp	.+16     	; 0x1d12 <vfprintf+0xe6>
    1d02:	8c 36       	cpi	r24, 0x6C	; 108
    1d04:	21 f4       	brne	.+8      	; 0x1d0e <vfprintf+0xe2>
    1d06:	83 2d       	mov	r24, r3
    1d08:	80 68       	ori	r24, 0x80	; 128
    1d0a:	38 2e       	mov	r3, r24
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0xe6>
    1d0e:	88 36       	cpi	r24, 0x68	; 104
    1d10:	41 f4       	brne	.+16     	; 0x1d22 <vfprintf+0xf6>
    1d12:	f7 01       	movw	r30, r14
    1d14:	93 fd       	sbrc	r25, 3
    1d16:	85 91       	lpm	r24, Z+
    1d18:	93 ff       	sbrs	r25, 3
    1d1a:	81 91       	ld	r24, Z+
    1d1c:	7f 01       	movw	r14, r30
    1d1e:	81 11       	cpse	r24, r1
    1d20:	b3 cf       	rjmp	.-154    	; 0x1c88 <vfprintf+0x5c>
    1d22:	98 2f       	mov	r25, r24
    1d24:	9f 7d       	andi	r25, 0xDF	; 223
    1d26:	95 54       	subi	r25, 0x45	; 69
    1d28:	93 30       	cpi	r25, 0x03	; 3
    1d2a:	28 f4       	brcc	.+10     	; 0x1d36 <vfprintf+0x10a>
    1d2c:	0c 5f       	subi	r16, 0xFC	; 252
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	9f e3       	ldi	r25, 0x3F	; 63
    1d32:	99 83       	std	Y+1, r25	; 0x01
    1d34:	0d c0       	rjmp	.+26     	; 0x1d50 <vfprintf+0x124>
    1d36:	83 36       	cpi	r24, 0x63	; 99
    1d38:	31 f0       	breq	.+12     	; 0x1d46 <vfprintf+0x11a>
    1d3a:	83 37       	cpi	r24, 0x73	; 115
    1d3c:	71 f0       	breq	.+28     	; 0x1d5a <vfprintf+0x12e>
    1d3e:	83 35       	cpi	r24, 0x53	; 83
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <vfprintf+0x118>
    1d42:	59 c0       	rjmp	.+178    	; 0x1df6 <vfprintf+0x1ca>
    1d44:	21 c0       	rjmp	.+66     	; 0x1d88 <vfprintf+0x15c>
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 81       	ld	r24, Z
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	0e 5f       	subi	r16, 0xFE	; 254
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	88 24       	eor	r8, r8
    1d52:	83 94       	inc	r8
    1d54:	91 2c       	mov	r9, r1
    1d56:	53 01       	movw	r10, r6
    1d58:	13 c0       	rjmp	.+38     	; 0x1d80 <vfprintf+0x154>
    1d5a:	28 01       	movw	r4, r16
    1d5c:	f2 e0       	ldi	r31, 0x02	; 2
    1d5e:	4f 0e       	add	r4, r31
    1d60:	51 1c       	adc	r5, r1
    1d62:	f8 01       	movw	r30, r16
    1d64:	a0 80       	ld	r10, Z
    1d66:	b1 80       	ldd	r11, Z+1	; 0x01
    1d68:	36 fe       	sbrs	r3, 6
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <vfprintf+0x146>
    1d6c:	69 2d       	mov	r22, r9
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x14a>
    1d72:	6f ef       	ldi	r22, 0xFF	; 255
    1d74:	7f ef       	ldi	r23, 0xFF	; 255
    1d76:	c5 01       	movw	r24, r10
    1d78:	0e 94 02 10 	call	0x2004	; 0x2004 <strnlen>
    1d7c:	4c 01       	movw	r8, r24
    1d7e:	82 01       	movw	r16, r4
    1d80:	f3 2d       	mov	r31, r3
    1d82:	ff 77       	andi	r31, 0x7F	; 127
    1d84:	3f 2e       	mov	r3, r31
    1d86:	16 c0       	rjmp	.+44     	; 0x1db4 <vfprintf+0x188>
    1d88:	28 01       	movw	r4, r16
    1d8a:	22 e0       	ldi	r18, 0x02	; 2
    1d8c:	42 0e       	add	r4, r18
    1d8e:	51 1c       	adc	r5, r1
    1d90:	f8 01       	movw	r30, r16
    1d92:	a0 80       	ld	r10, Z
    1d94:	b1 80       	ldd	r11, Z+1	; 0x01
    1d96:	36 fe       	sbrs	r3, 6
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <vfprintf+0x174>
    1d9a:	69 2d       	mov	r22, r9
    1d9c:	70 e0       	ldi	r23, 0x00	; 0
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <vfprintf+0x178>
    1da0:	6f ef       	ldi	r22, 0xFF	; 255
    1da2:	7f ef       	ldi	r23, 0xFF	; 255
    1da4:	c5 01       	movw	r24, r10
    1da6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <strnlen_P>
    1daa:	4c 01       	movw	r8, r24
    1dac:	f3 2d       	mov	r31, r3
    1dae:	f0 68       	ori	r31, 0x80	; 128
    1db0:	3f 2e       	mov	r3, r31
    1db2:	82 01       	movw	r16, r4
    1db4:	33 fc       	sbrc	r3, 3
    1db6:	1b c0       	rjmp	.+54     	; 0x1dee <vfprintf+0x1c2>
    1db8:	82 2d       	mov	r24, r2
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	88 16       	cp	r8, r24
    1dbe:	99 06       	cpc	r9, r25
    1dc0:	b0 f4       	brcc	.+44     	; 0x1dee <vfprintf+0x1c2>
    1dc2:	b6 01       	movw	r22, r12
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1dcc:	2a 94       	dec	r2
    1dce:	f4 cf       	rjmp	.-24     	; 0x1db8 <vfprintf+0x18c>
    1dd0:	f5 01       	movw	r30, r10
    1dd2:	37 fc       	sbrc	r3, 7
    1dd4:	85 91       	lpm	r24, Z+
    1dd6:	37 fe       	sbrs	r3, 7
    1dd8:	81 91       	ld	r24, Z+
    1dda:	5f 01       	movw	r10, r30
    1ddc:	b6 01       	movw	r22, r12
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1de4:	21 10       	cpse	r2, r1
    1de6:	2a 94       	dec	r2
    1de8:	21 e0       	ldi	r18, 0x01	; 1
    1dea:	82 1a       	sub	r8, r18
    1dec:	91 08       	sbc	r9, r1
    1dee:	81 14       	cp	r8, r1
    1df0:	91 04       	cpc	r9, r1
    1df2:	71 f7       	brne	.-36     	; 0x1dd0 <vfprintf+0x1a4>
    1df4:	e8 c0       	rjmp	.+464    	; 0x1fc6 <vfprintf+0x39a>
    1df6:	84 36       	cpi	r24, 0x64	; 100
    1df8:	11 f0       	breq	.+4      	; 0x1dfe <vfprintf+0x1d2>
    1dfa:	89 36       	cpi	r24, 0x69	; 105
    1dfc:	41 f5       	brne	.+80     	; 0x1e4e <vfprintf+0x222>
    1dfe:	f8 01       	movw	r30, r16
    1e00:	37 fe       	sbrs	r3, 7
    1e02:	07 c0       	rjmp	.+14     	; 0x1e12 <vfprintf+0x1e6>
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	0c 5f       	subi	r16, 0xFC	; 252
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	08 c0       	rjmp	.+16     	; 0x1e22 <vfprintf+0x1f6>
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	07 2e       	mov	r0, r23
    1e18:	00 0c       	add	r0, r0
    1e1a:	88 0b       	sbc	r24, r24
    1e1c:	99 0b       	sbc	r25, r25
    1e1e:	0e 5f       	subi	r16, 0xFE	; 254
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	f3 2d       	mov	r31, r3
    1e24:	ff 76       	andi	r31, 0x6F	; 111
    1e26:	3f 2e       	mov	r3, r31
    1e28:	97 ff       	sbrs	r25, 7
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <vfprintf+0x212>
    1e2c:	90 95       	com	r25
    1e2e:	80 95       	com	r24
    1e30:	70 95       	com	r23
    1e32:	61 95       	neg	r22
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	8f 4f       	sbci	r24, 0xFF	; 255
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	f0 68       	ori	r31, 0x80	; 128
    1e3c:	3f 2e       	mov	r3, r31
    1e3e:	2a e0       	ldi	r18, 0x0A	; 10
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	a3 01       	movw	r20, r6
    1e44:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__ultoa_invert>
    1e48:	88 2e       	mov	r8, r24
    1e4a:	86 18       	sub	r8, r6
    1e4c:	45 c0       	rjmp	.+138    	; 0x1ed8 <vfprintf+0x2ac>
    1e4e:	85 37       	cpi	r24, 0x75	; 117
    1e50:	31 f4       	brne	.+12     	; 0x1e5e <vfprintf+0x232>
    1e52:	23 2d       	mov	r18, r3
    1e54:	2f 7e       	andi	r18, 0xEF	; 239
    1e56:	b2 2e       	mov	r11, r18
    1e58:	2a e0       	ldi	r18, 0x0A	; 10
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	25 c0       	rjmp	.+74     	; 0x1ea8 <vfprintf+0x27c>
    1e5e:	93 2d       	mov	r25, r3
    1e60:	99 7f       	andi	r25, 0xF9	; 249
    1e62:	b9 2e       	mov	r11, r25
    1e64:	8f 36       	cpi	r24, 0x6F	; 111
    1e66:	c1 f0       	breq	.+48     	; 0x1e98 <vfprintf+0x26c>
    1e68:	18 f4       	brcc	.+6      	; 0x1e70 <vfprintf+0x244>
    1e6a:	88 35       	cpi	r24, 0x58	; 88
    1e6c:	79 f0       	breq	.+30     	; 0x1e8c <vfprintf+0x260>
    1e6e:	b5 c0       	rjmp	.+362    	; 0x1fda <vfprintf+0x3ae>
    1e70:	80 37       	cpi	r24, 0x70	; 112
    1e72:	19 f0       	breq	.+6      	; 0x1e7a <vfprintf+0x24e>
    1e74:	88 37       	cpi	r24, 0x78	; 120
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <vfprintf+0x254>
    1e78:	b0 c0       	rjmp	.+352    	; 0x1fda <vfprintf+0x3ae>
    1e7a:	e9 2f       	mov	r30, r25
    1e7c:	e0 61       	ori	r30, 0x10	; 16
    1e7e:	be 2e       	mov	r11, r30
    1e80:	b4 fe       	sbrs	r11, 4
    1e82:	0d c0       	rjmp	.+26     	; 0x1e9e <vfprintf+0x272>
    1e84:	fb 2d       	mov	r31, r11
    1e86:	f4 60       	ori	r31, 0x04	; 4
    1e88:	bf 2e       	mov	r11, r31
    1e8a:	09 c0       	rjmp	.+18     	; 0x1e9e <vfprintf+0x272>
    1e8c:	34 fe       	sbrs	r3, 4
    1e8e:	0a c0       	rjmp	.+20     	; 0x1ea4 <vfprintf+0x278>
    1e90:	29 2f       	mov	r18, r25
    1e92:	26 60       	ori	r18, 0x06	; 6
    1e94:	b2 2e       	mov	r11, r18
    1e96:	06 c0       	rjmp	.+12     	; 0x1ea4 <vfprintf+0x278>
    1e98:	28 e0       	ldi	r18, 0x08	; 8
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <vfprintf+0x27c>
    1e9e:	20 e1       	ldi	r18, 0x10	; 16
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <vfprintf+0x27c>
    1ea4:	20 e1       	ldi	r18, 0x10	; 16
    1ea6:	32 e0       	ldi	r19, 0x02	; 2
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	b7 fe       	sbrs	r11, 7
    1eac:	07 c0       	rjmp	.+14     	; 0x1ebc <vfprintf+0x290>
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	0c 5f       	subi	r16, 0xFC	; 252
    1eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eba:	06 c0       	rjmp	.+12     	; 0x1ec8 <vfprintf+0x29c>
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0e 5f       	subi	r16, 0xFE	; 254
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	a3 01       	movw	r20, r6
    1eca:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__ultoa_invert>
    1ece:	88 2e       	mov	r8, r24
    1ed0:	86 18       	sub	r8, r6
    1ed2:	fb 2d       	mov	r31, r11
    1ed4:	ff 77       	andi	r31, 0x7F	; 127
    1ed6:	3f 2e       	mov	r3, r31
    1ed8:	36 fe       	sbrs	r3, 6
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <vfprintf+0x2ca>
    1edc:	23 2d       	mov	r18, r3
    1ede:	2e 7f       	andi	r18, 0xFE	; 254
    1ee0:	a2 2e       	mov	r10, r18
    1ee2:	89 14       	cp	r8, r9
    1ee4:	58 f4       	brcc	.+22     	; 0x1efc <vfprintf+0x2d0>
    1ee6:	34 fe       	sbrs	r3, 4
    1ee8:	0b c0       	rjmp	.+22     	; 0x1f00 <vfprintf+0x2d4>
    1eea:	32 fc       	sbrc	r3, 2
    1eec:	09 c0       	rjmp	.+18     	; 0x1f00 <vfprintf+0x2d4>
    1eee:	83 2d       	mov	r24, r3
    1ef0:	8e 7e       	andi	r24, 0xEE	; 238
    1ef2:	a8 2e       	mov	r10, r24
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <vfprintf+0x2d4>
    1ef6:	b8 2c       	mov	r11, r8
    1ef8:	a3 2c       	mov	r10, r3
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <vfprintf+0x2d6>
    1efc:	b8 2c       	mov	r11, r8
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <vfprintf+0x2d6>
    1f00:	b9 2c       	mov	r11, r9
    1f02:	a4 fe       	sbrs	r10, 4
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <vfprintf+0x2f8>
    1f06:	fe 01       	movw	r30, r28
    1f08:	e8 0d       	add	r30, r8
    1f0a:	f1 1d       	adc	r31, r1
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 33       	cpi	r24, 0x30	; 48
    1f10:	21 f4       	brne	.+8      	; 0x1f1a <vfprintf+0x2ee>
    1f12:	9a 2d       	mov	r25, r10
    1f14:	99 7e       	andi	r25, 0xE9	; 233
    1f16:	a9 2e       	mov	r10, r25
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <vfprintf+0x300>
    1f1a:	a2 fe       	sbrs	r10, 2
    1f1c:	06 c0       	rjmp	.+12     	; 0x1f2a <vfprintf+0x2fe>
    1f1e:	b3 94       	inc	r11
    1f20:	b3 94       	inc	r11
    1f22:	04 c0       	rjmp	.+8      	; 0x1f2c <vfprintf+0x300>
    1f24:	8a 2d       	mov	r24, r10
    1f26:	86 78       	andi	r24, 0x86	; 134
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <vfprintf+0x300>
    1f2a:	b3 94       	inc	r11
    1f2c:	a3 fc       	sbrc	r10, 3
    1f2e:	11 c0       	rjmp	.+34     	; 0x1f52 <vfprintf+0x326>
    1f30:	a0 fe       	sbrs	r10, 0
    1f32:	06 c0       	rjmp	.+12     	; 0x1f40 <vfprintf+0x314>
    1f34:	b2 14       	cp	r11, r2
    1f36:	88 f4       	brcc	.+34     	; 0x1f5a <vfprintf+0x32e>
    1f38:	28 0c       	add	r2, r8
    1f3a:	92 2c       	mov	r9, r2
    1f3c:	9b 18       	sub	r9, r11
    1f3e:	0e c0       	rjmp	.+28     	; 0x1f5c <vfprintf+0x330>
    1f40:	b2 14       	cp	r11, r2
    1f42:	60 f4       	brcc	.+24     	; 0x1f5c <vfprintf+0x330>
    1f44:	b6 01       	movw	r22, r12
    1f46:	80 e2       	ldi	r24, 0x20	; 32
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1f4e:	b3 94       	inc	r11
    1f50:	f7 cf       	rjmp	.-18     	; 0x1f40 <vfprintf+0x314>
    1f52:	b2 14       	cp	r11, r2
    1f54:	18 f4       	brcc	.+6      	; 0x1f5c <vfprintf+0x330>
    1f56:	2b 18       	sub	r2, r11
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <vfprintf+0x332>
    1f5a:	98 2c       	mov	r9, r8
    1f5c:	21 2c       	mov	r2, r1
    1f5e:	a4 fe       	sbrs	r10, 4
    1f60:	10 c0       	rjmp	.+32     	; 0x1f82 <vfprintf+0x356>
    1f62:	b6 01       	movw	r22, r12
    1f64:	80 e3       	ldi	r24, 0x30	; 48
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1f6c:	a2 fe       	sbrs	r10, 2
    1f6e:	17 c0       	rjmp	.+46     	; 0x1f9e <vfprintf+0x372>
    1f70:	a1 fc       	sbrc	r10, 1
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <vfprintf+0x34e>
    1f74:	88 e7       	ldi	r24, 0x78	; 120
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0x352>
    1f7a:	88 e5       	ldi	r24, 0x58	; 88
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	b6 01       	movw	r22, r12
    1f80:	0c c0       	rjmp	.+24     	; 0x1f9a <vfprintf+0x36e>
    1f82:	8a 2d       	mov	r24, r10
    1f84:	86 78       	andi	r24, 0x86	; 134
    1f86:	59 f0       	breq	.+22     	; 0x1f9e <vfprintf+0x372>
    1f88:	a1 fe       	sbrs	r10, 1
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <vfprintf+0x364>
    1f8c:	8b e2       	ldi	r24, 0x2B	; 43
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <vfprintf+0x366>
    1f90:	80 e2       	ldi	r24, 0x20	; 32
    1f92:	a7 fc       	sbrc	r10, 7
    1f94:	8d e2       	ldi	r24, 0x2D	; 45
    1f96:	b6 01       	movw	r22, r12
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1f9e:	89 14       	cp	r8, r9
    1fa0:	38 f4       	brcc	.+14     	; 0x1fb0 <vfprintf+0x384>
    1fa2:	b6 01       	movw	r22, r12
    1fa4:	80 e3       	ldi	r24, 0x30	; 48
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1fac:	9a 94       	dec	r9
    1fae:	f7 cf       	rjmp	.-18     	; 0x1f9e <vfprintf+0x372>
    1fb0:	8a 94       	dec	r8
    1fb2:	f3 01       	movw	r30, r6
    1fb4:	e8 0d       	add	r30, r8
    1fb6:	f1 1d       	adc	r31, r1
    1fb8:	80 81       	ld	r24, Z
    1fba:	b6 01       	movw	r22, r12
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1fc2:	81 10       	cpse	r8, r1
    1fc4:	f5 cf       	rjmp	.-22     	; 0x1fb0 <vfprintf+0x384>
    1fc6:	22 20       	and	r2, r2
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <vfprintf+0x3a0>
    1fca:	42 ce       	rjmp	.-892    	; 0x1c50 <vfprintf+0x24>
    1fcc:	b6 01       	movw	r22, r12
    1fce:	80 e2       	ldi	r24, 0x20	; 32
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	0e 94 1d 10 	call	0x203a	; 0x203a <fputc>
    1fd6:	2a 94       	dec	r2
    1fd8:	f6 cf       	rjmp	.-20     	; 0x1fc6 <vfprintf+0x39a>
    1fda:	f6 01       	movw	r30, r12
    1fdc:	86 81       	ldd	r24, Z+6	; 0x06
    1fde:	97 81       	ldd	r25, Z+7	; 0x07
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <vfprintf+0x3ba>
    1fe2:	8f ef       	ldi	r24, 0xFF	; 255
    1fe4:	9f ef       	ldi	r25, 0xFF	; 255
    1fe6:	2b 96       	adiw	r28, 0x0b	; 11
    1fe8:	e2 e1       	ldi	r30, 0x12	; 18
    1fea:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__>

00001fee <strnlen_P>:
    1fee:	fc 01       	movw	r30, r24
    1ff0:	05 90       	lpm	r0, Z+
    1ff2:	61 50       	subi	r22, 0x01	; 1
    1ff4:	70 40       	sbci	r23, 0x00	; 0
    1ff6:	01 10       	cpse	r0, r1
    1ff8:	d8 f7       	brcc	.-10     	; 0x1ff0 <strnlen_P+0x2>
    1ffa:	80 95       	com	r24
    1ffc:	90 95       	com	r25
    1ffe:	8e 0f       	add	r24, r30
    2000:	9f 1f       	adc	r25, r31
    2002:	08 95       	ret

00002004 <strnlen>:
    2004:	fc 01       	movw	r30, r24
    2006:	61 50       	subi	r22, 0x01	; 1
    2008:	70 40       	sbci	r23, 0x00	; 0
    200a:	01 90       	ld	r0, Z+
    200c:	01 10       	cpse	r0, r1
    200e:	d8 f7       	brcc	.-10     	; 0x2006 <strnlen+0x2>
    2010:	80 95       	com	r24
    2012:	90 95       	com	r25
    2014:	8e 0f       	add	r24, r30
    2016:	9f 1f       	adc	r25, r31
    2018:	08 95       	ret

0000201a <strrev>:
    201a:	dc 01       	movw	r26, r24
    201c:	fc 01       	movw	r30, r24
    201e:	67 2f       	mov	r22, r23
    2020:	71 91       	ld	r23, Z+
    2022:	77 23       	and	r23, r23
    2024:	e1 f7       	brne	.-8      	; 0x201e <strrev+0x4>
    2026:	32 97       	sbiw	r30, 0x02	; 2
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <strrev+0x18>
    202a:	7c 91       	ld	r23, X
    202c:	6d 93       	st	X+, r22
    202e:	70 83       	st	Z, r23
    2030:	62 91       	ld	r22, -Z
    2032:	ae 17       	cp	r26, r30
    2034:	bf 07       	cpc	r27, r31
    2036:	c8 f3       	brcs	.-14     	; 0x202a <strrev+0x10>
    2038:	08 95       	ret

0000203a <fputc>:
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	fb 01       	movw	r30, r22
    2044:	23 81       	ldd	r18, Z+3	; 0x03
    2046:	21 fd       	sbrc	r18, 1
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <fputc+0x16>
    204a:	8f ef       	ldi	r24, 0xFF	; 255
    204c:	9f ef       	ldi	r25, 0xFF	; 255
    204e:	2c c0       	rjmp	.+88     	; 0x20a8 <fputc+0x6e>
    2050:	22 ff       	sbrs	r18, 2
    2052:	16 c0       	rjmp	.+44     	; 0x2080 <fputc+0x46>
    2054:	46 81       	ldd	r20, Z+6	; 0x06
    2056:	57 81       	ldd	r21, Z+7	; 0x07
    2058:	24 81       	ldd	r18, Z+4	; 0x04
    205a:	35 81       	ldd	r19, Z+5	; 0x05
    205c:	42 17       	cp	r20, r18
    205e:	53 07       	cpc	r21, r19
    2060:	44 f4       	brge	.+16     	; 0x2072 <fputc+0x38>
    2062:	a0 81       	ld	r26, Z
    2064:	b1 81       	ldd	r27, Z+1	; 0x01
    2066:	9d 01       	movw	r18, r26
    2068:	2f 5f       	subi	r18, 0xFF	; 255
    206a:	3f 4f       	sbci	r19, 0xFF	; 255
    206c:	31 83       	std	Z+1, r19	; 0x01
    206e:	20 83       	st	Z, r18
    2070:	8c 93       	st	X, r24
    2072:	26 81       	ldd	r18, Z+6	; 0x06
    2074:	37 81       	ldd	r19, Z+7	; 0x07
    2076:	2f 5f       	subi	r18, 0xFF	; 255
    2078:	3f 4f       	sbci	r19, 0xFF	; 255
    207a:	37 83       	std	Z+7, r19	; 0x07
    207c:	26 83       	std	Z+6, r18	; 0x06
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <fputc+0x6e>
    2080:	8b 01       	movw	r16, r22
    2082:	ec 01       	movw	r28, r24
    2084:	fb 01       	movw	r30, r22
    2086:	00 84       	ldd	r0, Z+8	; 0x08
    2088:	f1 85       	ldd	r31, Z+9	; 0x09
    208a:	e0 2d       	mov	r30, r0
    208c:	09 95       	icall
    208e:	89 2b       	or	r24, r25
    2090:	e1 f6       	brne	.-72     	; 0x204a <fputc+0x10>
    2092:	d8 01       	movw	r26, r16
    2094:	16 96       	adiw	r26, 0x06	; 6
    2096:	8d 91       	ld	r24, X+
    2098:	9c 91       	ld	r25, X
    209a:	17 97       	sbiw	r26, 0x07	; 7
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	17 96       	adiw	r26, 0x07	; 7
    20a0:	9c 93       	st	X, r25
    20a2:	8e 93       	st	-X, r24
    20a4:	16 97       	sbiw	r26, 0x06	; 6
    20a6:	ce 01       	movw	r24, r28
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	08 95       	ret

000020b2 <__ultoa_invert>:
    20b2:	fa 01       	movw	r30, r20
    20b4:	aa 27       	eor	r26, r26
    20b6:	28 30       	cpi	r18, 0x08	; 8
    20b8:	51 f1       	breq	.+84     	; 0x210e <__ultoa_invert+0x5c>
    20ba:	20 31       	cpi	r18, 0x10	; 16
    20bc:	81 f1       	breq	.+96     	; 0x211e <__ultoa_invert+0x6c>
    20be:	e8 94       	clt
    20c0:	6f 93       	push	r22
    20c2:	6e 7f       	andi	r22, 0xFE	; 254
    20c4:	6e 5f       	subi	r22, 0xFE	; 254
    20c6:	7f 4f       	sbci	r23, 0xFF	; 255
    20c8:	8f 4f       	sbci	r24, 0xFF	; 255
    20ca:	9f 4f       	sbci	r25, 0xFF	; 255
    20cc:	af 4f       	sbci	r26, 0xFF	; 255
    20ce:	b1 e0       	ldi	r27, 0x01	; 1
    20d0:	3e d0       	rcall	.+124    	; 0x214e <__ultoa_invert+0x9c>
    20d2:	b4 e0       	ldi	r27, 0x04	; 4
    20d4:	3c d0       	rcall	.+120    	; 0x214e <__ultoa_invert+0x9c>
    20d6:	67 0f       	add	r22, r23
    20d8:	78 1f       	adc	r23, r24
    20da:	89 1f       	adc	r24, r25
    20dc:	9a 1f       	adc	r25, r26
    20de:	a1 1d       	adc	r26, r1
    20e0:	68 0f       	add	r22, r24
    20e2:	79 1f       	adc	r23, r25
    20e4:	8a 1f       	adc	r24, r26
    20e6:	91 1d       	adc	r25, r1
    20e8:	a1 1d       	adc	r26, r1
    20ea:	6a 0f       	add	r22, r26
    20ec:	71 1d       	adc	r23, r1
    20ee:	81 1d       	adc	r24, r1
    20f0:	91 1d       	adc	r25, r1
    20f2:	a1 1d       	adc	r26, r1
    20f4:	20 d0       	rcall	.+64     	; 0x2136 <__ultoa_invert+0x84>
    20f6:	09 f4       	brne	.+2      	; 0x20fa <__ultoa_invert+0x48>
    20f8:	68 94       	set
    20fa:	3f 91       	pop	r19
    20fc:	2a e0       	ldi	r18, 0x0A	; 10
    20fe:	26 9f       	mul	r18, r22
    2100:	11 24       	eor	r1, r1
    2102:	30 19       	sub	r19, r0
    2104:	30 5d       	subi	r19, 0xD0	; 208
    2106:	31 93       	st	Z+, r19
    2108:	de f6       	brtc	.-74     	; 0x20c0 <__ultoa_invert+0xe>
    210a:	cf 01       	movw	r24, r30
    210c:	08 95       	ret
    210e:	46 2f       	mov	r20, r22
    2110:	47 70       	andi	r20, 0x07	; 7
    2112:	40 5d       	subi	r20, 0xD0	; 208
    2114:	41 93       	st	Z+, r20
    2116:	b3 e0       	ldi	r27, 0x03	; 3
    2118:	0f d0       	rcall	.+30     	; 0x2138 <__ultoa_invert+0x86>
    211a:	c9 f7       	brne	.-14     	; 0x210e <__ultoa_invert+0x5c>
    211c:	f6 cf       	rjmp	.-20     	; 0x210a <__ultoa_invert+0x58>
    211e:	46 2f       	mov	r20, r22
    2120:	4f 70       	andi	r20, 0x0F	; 15
    2122:	40 5d       	subi	r20, 0xD0	; 208
    2124:	4a 33       	cpi	r20, 0x3A	; 58
    2126:	18 f0       	brcs	.+6      	; 0x212e <__ultoa_invert+0x7c>
    2128:	49 5d       	subi	r20, 0xD9	; 217
    212a:	31 fd       	sbrc	r19, 1
    212c:	40 52       	subi	r20, 0x20	; 32
    212e:	41 93       	st	Z+, r20
    2130:	02 d0       	rcall	.+4      	; 0x2136 <__ultoa_invert+0x84>
    2132:	a9 f7       	brne	.-22     	; 0x211e <__ultoa_invert+0x6c>
    2134:	ea cf       	rjmp	.-44     	; 0x210a <__ultoa_invert+0x58>
    2136:	b4 e0       	ldi	r27, 0x04	; 4
    2138:	a6 95       	lsr	r26
    213a:	97 95       	ror	r25
    213c:	87 95       	ror	r24
    213e:	77 95       	ror	r23
    2140:	67 95       	ror	r22
    2142:	ba 95       	dec	r27
    2144:	c9 f7       	brne	.-14     	; 0x2138 <__ultoa_invert+0x86>
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	61 05       	cpc	r22, r1
    214a:	71 05       	cpc	r23, r1
    214c:	08 95       	ret
    214e:	9b 01       	movw	r18, r22
    2150:	ac 01       	movw	r20, r24
    2152:	0a 2e       	mov	r0, r26
    2154:	06 94       	lsr	r0
    2156:	57 95       	ror	r21
    2158:	47 95       	ror	r20
    215a:	37 95       	ror	r19
    215c:	27 95       	ror	r18
    215e:	ba 95       	dec	r27
    2160:	c9 f7       	brne	.-14     	; 0x2154 <__ultoa_invert+0xa2>
    2162:	62 0f       	add	r22, r18
    2164:	73 1f       	adc	r23, r19
    2166:	84 1f       	adc	r24, r20
    2168:	95 1f       	adc	r25, r21
    216a:	a0 1d       	adc	r26, r0
    216c:	08 95       	ret

0000216e <__prologue_saves__>:
    216e:	2f 92       	push	r2
    2170:	3f 92       	push	r3
    2172:	4f 92       	push	r4
    2174:	5f 92       	push	r5
    2176:	6f 92       	push	r6
    2178:	7f 92       	push	r7
    217a:	8f 92       	push	r8
    217c:	9f 92       	push	r9
    217e:	af 92       	push	r10
    2180:	bf 92       	push	r11
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	ca 1b       	sub	r28, r26
    2198:	db 0b       	sbc	r29, r27
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	09 94       	ijmp

000021a6 <__epilogue_restores__>:
    21a6:	2a 88       	ldd	r2, Y+18	; 0x12
    21a8:	39 88       	ldd	r3, Y+17	; 0x11
    21aa:	48 88       	ldd	r4, Y+16	; 0x10
    21ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21b8:	b9 84       	ldd	r11, Y+9	; 0x09
    21ba:	c8 84       	ldd	r12, Y+8	; 0x08
    21bc:	df 80       	ldd	r13, Y+7	; 0x07
    21be:	ee 80       	ldd	r14, Y+6	; 0x06
    21c0:	fd 80       	ldd	r15, Y+5	; 0x05
    21c2:	0c 81       	ldd	r16, Y+4	; 0x04
    21c4:	1b 81       	ldd	r17, Y+3	; 0x03
    21c6:	aa 81       	ldd	r26, Y+2	; 0x02
    21c8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ca:	ce 0f       	add	r28, r30
    21cc:	d1 1d       	adc	r29, r1
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	ed 01       	movw	r28, r26
    21da:	08 95       	ret

000021dc <_exit>:
    21dc:	f8 94       	cli

000021de <__stop_program>:
    21de:	ff cf       	rjmp	.-2      	; 0x21de <__stop_program>
