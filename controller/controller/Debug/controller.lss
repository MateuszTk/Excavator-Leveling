
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800100  00002120  000021b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002120  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800392  00800392  00002446  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028cc  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cd  00000000  00000000  00004f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001254  00000000  00000000  000057fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000588  00000000  00000000  00006a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085e  00000000  00000000  00006fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d58  00000000  00000000  0000783a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009592  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_1>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_7>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	7a 06       	cpc	r7, r26
      6a:	88 06       	cpc	r8, r24
      6c:	a2 06       	cpc	r10, r18
      6e:	bc 06       	cpc	r11, r28
      70:	d6 06       	cpc	r13, r22
      72:	f0 06       	cpc	r15, r16
      74:	0a 07       	cpc	r16, r26
      76:	24 07       	cpc	r18, r20
      78:	3e 07       	cpc	r19, r30
      7a:	58 07       	cpc	r21, r24
      7c:	72 07       	cpc	r23, r18
      7e:	8c 07       	cpc	r24, r28
      80:	a6 07       	cpc	r26, r22
      82:	c0 07       	cpc	r28, r16
      84:	00 08       	sbc	r0, r0
      86:	3e 08       	sbc	r3, r14

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	13 e0       	ldi	r17, 0x03	; 3
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e0 e2       	ldi	r30, 0x20	; 32
      9c:	f1 e2       	ldi	r31, 0x21	; 33
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a2 39       	cpi	r26, 0x92	; 146
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	23 e0       	ldi	r18, 0x03	; 3
      ac:	a2 e9       	ldi	r26, 0x92	; 146
      ae:	b3 e0       	ldi	r27, 0x03	; 3
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a1 3a       	cpi	r26, 0xA1	; 161
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
      ba:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <main>
      be:	0c 94 8e 10 	jmp	0x211c	; 0x211c <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <USART_init>:
}

void USART_flush(){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
}
      c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
      ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      ce:	88 e1       	ldi	r24, 0x18	; 24
      d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
      d4:	86 e0       	ldi	r24, 0x06	; 6
      d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
      da:	08 95       	ret

000000dc <USART_transmit>:
      dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      e0:	95 ff       	sbrs	r25, 5
      e2:	fc cf       	rjmp	.-8      	; 0xdc <USART_transmit>
      e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      e8:	08 95       	ret

000000ea <USART_print>:
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	8c 01       	movw	r16, r24
      f4:	c0 e0       	ldi	r28, 0x00	; 0
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	03 c0       	rjmp	.+6      	; 0x100 <USART_print+0x16>
      fa:	21 96       	adiw	r28, 0x01	; 1
      fc:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_transmit>
     100:	f8 01       	movw	r30, r16
     102:	ec 0f       	add	r30, r28
     104:	fd 1f       	adc	r31, r29
     106:	80 81       	ld	r24, Z
     108:	81 11       	cpse	r24, r1
     10a:	f7 cf       	rjmp	.-18     	; 0xfa <USART_print+0x10>
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	08 95       	ret

00000116 <USART_print_int>:
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	60 97       	sbiw	r28, 0x10	; 16
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	f8 94       	cli
     124:	de bf       	out	0x3e, r29	; 62
     126:	0f be       	out	0x3f, r0	; 63
     128:	cd bf       	out	0x3d, r28	; 61
     12a:	ab 01       	movw	r20, r22
     12c:	be 01       	movw	r22, r28
     12e:	6f 5f       	subi	r22, 0xFF	; 255
     130:	7f 4f       	sbci	r23, 0xFF	; 255
     132:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <itoa>
     136:	ce 01       	movw	r24, r28
     138:	01 96       	adiw	r24, 0x01	; 1
     13a:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
     13e:	60 96       	adiw	r28, 0x10	; 16
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <USART_print_float>:
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	60 97       	sbiw	r28, 0x10	; 16
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	6b 01       	movw	r12, r22
     16e:	7c 01       	movw	r14, r24
     170:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fixsfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	4a e0       	ldi	r20, 0x0A	; 10
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	be 01       	movw	r22, r28
     17e:	6f 5f       	subi	r22, 0xFF	; 255
     180:	7f 4f       	sbci	r23, 0xFF	; 255
     182:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <itoa>
     186:	ce 01       	movw	r24, r28
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
     18e:	82 e2       	ldi	r24, 0x22	; 34
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	4a e7       	ldi	r20, 0x7A	; 122
     19c:	54 e4       	ldi	r21, 0x44	; 68
     19e:	c7 01       	movw	r24, r14
     1a0:	b6 01       	movw	r22, r12
     1a2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     1a6:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fixsfsi>
     1aa:	dc 01       	movw	r26, r24
     1ac:	cb 01       	movw	r24, r22
     1ae:	4a e0       	ldi	r20, 0x0A	; 10
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	be 01       	movw	r22, r28
     1b4:	6f 5f       	subi	r22, 0xFF	; 255
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <itoa>
     1bc:	ce 01       	movw	r24, r28
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
     1c4:	60 96       	adiw	r28, 0x10	; 16
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	df 90       	pop	r13
     1da:	cf 90       	pop	r12
     1dc:	08 95       	ret

000001de <USART_read>:
     1de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1e2:	88 23       	and	r24, r24
     1e4:	e4 f7       	brge	.-8      	; 0x1de <USART_read>
     1e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     1ea:	08 95       	ret

000001ec <USART_avaliable>:
     1ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1f0:	80 78       	andi	r24, 0x80	; 128
     1f2:	08 95       	ret

000001f4 <USART_read_int>:

int USART_read_int(){
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	60 97       	sbiw	r28, 0x10	; 16
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
	char buff[16];
	int i = 0;
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	08 c0       	rjmp	.+16     	; 0x222 <USART_read_int+0x2e>
	while (1){
		buff[i] = USART_read();
		if (buff[0] == ' ' || buff[0] == '\n' || buff[0] == '\r'){
			i = 0;
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	05 c0       	rjmp	.+10     	; 0x222 <USART_read_int+0x2e>
     218:	00 e0       	ldi	r16, 0x00	; 0
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <USART_read_int+0x2e>
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	10 e0       	ldi	r17, 0x00	; 0

int USART_read_int(){
	char buff[16];
	int i = 0;
	while (1){
		buff[i] = USART_read();
     222:	0e 94 ef 00 	call	0x1de	; 0x1de <USART_read>
     226:	e1 e0       	ldi	r30, 0x01	; 1
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	ec 0f       	add	r30, r28
     22c:	fd 1f       	adc	r31, r29
     22e:	e0 0f       	add	r30, r16
     230:	f1 1f       	adc	r31, r17
     232:	80 83       	st	Z, r24
		if (buff[0] == ' ' || buff[0] == '\n' || buff[0] == '\r'){
     234:	99 81       	ldd	r25, Y+1	; 0x01
     236:	90 32       	cpi	r25, 0x20	; 32
     238:	61 f3       	breq	.-40     	; 0x212 <USART_read_int+0x1e>
     23a:	9a 30       	cpi	r25, 0x0A	; 10
     23c:	69 f3       	breq	.-38     	; 0x218 <USART_read_int+0x24>
     23e:	9d 30       	cpi	r25, 0x0D	; 13
     240:	71 f3       	breq	.-36     	; 0x21e <USART_read_int+0x2a>
			i = 0;
			continue;
		}
		if (buff[i] == '\n' || buff[i] == '\r' || buff[i] == ' ' || i == 15){
     242:	8a 30       	cpi	r24, 0x0A	; 10
     244:	39 f0       	breq	.+14     	; 0x254 <USART_read_int+0x60>
     246:	8d 30       	cpi	r24, 0x0D	; 13
     248:	29 f0       	breq	.+10     	; 0x254 <USART_read_int+0x60>
     24a:	80 32       	cpi	r24, 0x20	; 32
     24c:	19 f0       	breq	.+6      	; 0x254 <USART_read_int+0x60>
     24e:	0f 30       	cpi	r16, 0x0F	; 15
     250:	11 05       	cpc	r17, r1
     252:	61 f4       	brne	.+24     	; 0x26c <USART_read_int+0x78>
			buff[i] = 0;
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	e0 0f       	add	r30, r16
     25e:	f1 1f       	adc	r31, r17
     260:	10 82       	st	Z, r1
			break;
		}

		i++;
	}
	return atoi(buff);
     262:	ce 01       	movw	r24, r28
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atoi>
     26a:	03 c0       	rjmp	.+6      	; 0x272 <USART_read_int+0x7e>
		if (buff[i] == '\n' || buff[i] == '\r' || buff[i] == ' ' || i == 15){
			buff[i] = 0;
			break;
		}

		i++;
     26c:	0f 5f       	subi	r16, 0xFF	; 255
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	d8 cf       	rjmp	.-80     	; 0x222 <USART_read_int+0x2e>
	}
	return atoi(buff);
}
     272:	60 96       	adiw	r28, 0x10	; 16
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	08 95       	ret

00000288 <software_serial_init>:
}
#else

void software_serial_init() {
	// input, pullup
	DDRD &= ~(1 << RX_PIN);
     288:	8a b1       	in	r24, 0x0a	; 10
     28a:	8b 7f       	andi	r24, 0xFB	; 251
     28c:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1 << RX_PIN);

	// Configure Timer2
	TCCR2A = (1 << WGM21); // CTC mode
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS21); // Prescaler 8
     294:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = BIT_DURATION; // Compare match value
     298:	80 ed       	ldi	r24, 0xD0	; 208
     29a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

	// Enable Timer2 compare match A interrupt
	TIMSK2 |= (1 << OCIE2A);
     29e:	e0 e7       	ldi	r30, 0x70	; 112
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	82 60       	ori	r24, 0x02	; 2
     2a6:	80 83       	st	Z, r24

	// Enable external interrupt INT0 for RX pin
	cli();
     2a8:	f8 94       	cli
	// Falling edge
	EICRA |= (1 << ISC01); 
     2aa:	e9 e6       	ldi	r30, 0x69	; 105
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
     2b4:	8d b3       	in	r24, 0x1d	; 29
     2b6:	81 60       	ori	r24, 0x01	; 1
     2b8:	8d bb       	out	0x1d, r24	; 29
	sei();
     2ba:	78 94       	sei
     2bc:	08 95       	ret

000002be <__vector_7>:
}

ISR(TIMER2_COMPA_vect) {
     2be:	1f 92       	push	r1
     2c0:	0f 92       	push	r0
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	0f 92       	push	r0
     2c6:	11 24       	eor	r1, r1
     2c8:	2f 93       	push	r18
     2ca:	3f 93       	push	r19
     2cc:	4f 93       	push	r20
     2ce:	5f 93       	push	r21
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	ef 93       	push	r30
     2d6:	ff 93       	push	r31
	static uint16_t rxByte = 0;
	static uint8_t rxBit = 0;

	if ((PIND & (1 << RX_PIN)) && rxBit > 0) {
     2d8:	4a 9b       	sbis	0x09, 2	; 9
     2da:	19 c0       	rjmp	.+50     	; 0x30e <__vector_7+0x50>
     2dc:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <rxBit.1788>
     2e0:	88 23       	and	r24, r24
     2e2:	a9 f0       	breq	.+42     	; 0x30e <__vector_7+0x50>
		rxByte |= (1 << rxBit - 1);
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	a9 01       	movw	r20, r18
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__vector_7+0x36>
     2f0:	44 0f       	add	r20, r20
     2f2:	55 1f       	adc	r21, r21
     2f4:	8a 95       	dec	r24
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <__vector_7+0x32>
     2f8:	ca 01       	movw	r24, r20
     2fa:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <rxByte.1787>
     2fe:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <rxByte.1787+0x1>
     302:	82 2b       	or	r24, r18
     304:	93 2b       	or	r25, r19
     306:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <rxByte.1787+0x1>
     30a:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <rxByte.1787>
	}

	rxBit++;
     30e:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <rxBit.1788>
     312:	8f 5f       	subi	r24, 0xFF	; 255
     314:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <rxBit.1788>
	if (rxBit >= 9) {
     318:	89 30       	cpi	r24, 0x09	; 9
     31a:	e0 f0       	brcs	.+56     	; 0x354 <__vector_7+0x96>
		rxBuffer = rxByte;
     31c:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <rxByte.1787>
     320:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <rxByte.1787+0x1>
     324:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <rxBuffer+0x1>
     328:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <rxBuffer>
		rxAvailable = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <rxAvailable>
		rxByte = 0;
     332:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <rxByte.1787+0x1>
     336:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <rxByte.1787>
		rxBit = 0;
     33a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <rxBit.1788>

		// Stop Timer2
		TIMSK2 &= ~(1 << OCIE2A);
     33e:	e0 e7       	ldi	r30, 0x70	; 112
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	80 83       	st	Z, r24

		// Re-enable INT0 interrupt
		EIFR |= (1 << INTF0);
     348:	8c b3       	in	r24, 0x1c	; 28
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	8c bb       	out	0x1c, r24	; 28
		EIMSK |= (1 << INT0);
     34e:	8d b3       	in	r24, 0x1d	; 29
     350:	81 60       	ori	r24, 0x01	; 1
     352:	8d bb       	out	0x1d, r24	; 29
	}
}
     354:	ff 91       	pop	r31
     356:	ef 91       	pop	r30
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	5f 91       	pop	r21
     35e:	4f 91       	pop	r20
     360:	3f 91       	pop	r19
     362:	2f 91       	pop	r18
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <__vector_1>:

ISR(INT0_vect) {
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	8f 93       	push	r24
     37a:	ef 93       	push	r30
     37c:	ff 93       	push	r31
	// Disable INT0 interrupt
	EIMSK &= ~(1 << INT0);
     37e:	8d b3       	in	r24, 0x1d	; 29
     380:	8e 7f       	andi	r24, 0xFE	; 254
     382:	8d bb       	out	0x1d, r24	; 29

	// Start Timer2 with phase offset
	TCNT2 = BIT_DURATION / 2;
     384:	88 e6       	ldi	r24, 0x68	; 104
     386:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	// Clear any pending compare match
	TIFR2 |= (1 << OCF2A);
     38a:	87 b3       	in	r24, 0x17	; 23
     38c:	82 60       	ori	r24, 0x02	; 2
     38e:	87 bb       	out	0x17, r24	; 23
	// Enable Timer2 compare match interrupt
	TIMSK2 |= (1 << OCIE2A);
     390:	e0 e7       	ldi	r30, 0x70	; 112
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	82 60       	ori	r24, 0x02	; 2
     398:	80 83       	st	Z, r24
}
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	8f 91       	pop	r24
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <software_serial_read>:

#endif

uint16_t software_serial_read() {
	while (!rxAvailable);
     3aa:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <rxAvailable>
     3ae:	88 23       	and	r24, r24
     3b0:	e1 f3       	breq	.-8      	; 0x3aa <software_serial_read>

	rxAvailable = 0;
     3b2:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <rxAvailable>
	return rxBuffer;
     3b6:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <rxBuffer>
     3ba:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <rxBuffer+0x1>
}
     3be:	08 95       	ret

000003c0 <software_serial_available>:

uint8_t software_serial_available() {
	return rxAvailable;
     3c0:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <rxAvailable>
}
     3c4:	08 95       	ret

000003c6 <EEPROM_read>:
#define EEPROM_H_

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     3c6:	f9 99       	sbic	0x1f, 1	; 31
     3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
     3ca:	92 bd       	out	0x22, r25	; 34
     3cc:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     3ce:	8f b3       	in	r24, 0x1f	; 31
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
     3d4:	80 b5       	in	r24, 0x20	; 32
}
     3d6:	08 95       	ret

000003d8 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	8c 01       	movw	r16, r24
     3e0:	c6 2f       	mov	r28, r22
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE)) ;
     3e2:	f9 99       	sbic	0x1f, 1	; 31
     3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <EEPROM_write+0xa>
	
	unsigned char current = EEPROM_read(uiAddress);
     3e6:	c8 01       	movw	r24, r16
     3e8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <EEPROM_read>
	if (current != ucData){
     3ec:	8c 17       	cp	r24, r28
     3ee:	49 f0       	breq	.+18     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		/* Set up address and Data Registers */
		EEAR = uiAddress;
     3f0:	12 bd       	out	0x22, r17	; 34
     3f2:	01 bd       	out	0x21, r16	; 33
		EEDR = ucData;
     3f4:	c0 bd       	out	0x20, r28	; 32
		/* Write logical one to EEMPE */
		EECR |= (1<<EEMPE);
     3f6:	8f b3       	in	r24, 0x1f	; 31
     3f8:	84 60       	ori	r24, 0x04	; 4
     3fa:	8f bb       	out	0x1f, r24	; 31
		/* Start eeprom write by setting EEPE */
		EECR |= (1<<EEPE);
     3fc:	8f b3       	in	r24, 0x1f	; 31
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	8f bb       	out	0x1f, r24	; 31
	}
}
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <config_print>:
	int16_t release_position_b;
	float step_up;
	float step_down;
} config_t;

void config_print(config_t* config){
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	8c 01       	movw	r16, r24
	USART_print("1. valid_sample_timeout: ");
     414:	84 e2       	ldi	r24, 0x24	; 36
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_int(config->valid_sample_timeout, 10);
     41c:	6a e0       	ldi	r22, 0x0A	; 10
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	f8 01       	movw	r30, r16
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>
	
	USART_print("\n2. positions_a: ");
     42a:	8e e3       	ldi	r24, 0x3E	; 62
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	for (int i = 0; i < 5; i++){
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	12 c0       	rjmp	.+36     	; 0x45c <config_print+0x52>
		USART_print_int(config->positions_a[i], 10);
     438:	ec 01       	movw	r28, r24
     43a:	21 96       	adiw	r28, 0x01	; 1
     43c:	fe 01       	movw	r30, r28
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	e0 0f       	add	r30, r16
     444:	f1 1f       	adc	r31, r17
     446:	6a e0       	ldi	r22, 0x0A	; 10
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>
		USART_print(" ");
     452:	89 ec       	ldi	r24, 0xC9	; 201
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
void config_print(config_t* config){
	USART_print("1. valid_sample_timeout: ");
	USART_print_int(config->valid_sample_timeout, 10);
	
	USART_print("\n2. positions_a: ");
	for (int i = 0; i < 5; i++){
     45a:	ce 01       	movw	r24, r28
     45c:	85 30       	cpi	r24, 0x05	; 5
     45e:	91 05       	cpc	r25, r1
     460:	5c f3       	brlt	.-42     	; 0x438 <config_print+0x2e>
		USART_print_int(config->positions_a[i], 10);
		USART_print(" ");
	}

	USART_print("\n3. positions_b: ");
     462:	80 e5       	ldi	r24, 0x50	; 80
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	for (int i = 0; i < 5; i++){
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	d0 e0       	ldi	r29, 0x00	; 0
     46e:	11 c0       	rjmp	.+34     	; 0x492 <config_print+0x88>
		USART_print_int(config->positions_b[i], 10);
     470:	fe 01       	movw	r30, r28
     472:	36 96       	adiw	r30, 0x06	; 6
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	e0 0f       	add	r30, r16
     47a:	f1 1f       	adc	r31, r17
     47c:	6a e0       	ldi	r22, 0x0A	; 10
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>
		USART_print(" ");
     488:	89 ec       	ldi	r24, 0xC9	; 201
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
		USART_print_int(config->positions_a[i], 10);
		USART_print(" ");
	}

	USART_print("\n3. positions_b: ");
	for (int i = 0; i < 5; i++){
     490:	21 96       	adiw	r28, 0x01	; 1
     492:	c5 30       	cpi	r28, 0x05	; 5
     494:	d1 05       	cpc	r29, r1
     496:	64 f3       	brlt	.-40     	; 0x470 <config_print+0x66>
		USART_print_int(config->positions_b[i], 10);
		USART_print(" ");
	}

	USART_print("\n4. release_position_a: ");
     498:	82 e6       	ldi	r24, 0x62	; 98
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_int(config->release_position_a, 10);
     4a0:	6a e0       	ldi	r22, 0x0A	; 10
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	f8 01       	movw	r30, r16
     4a6:	86 89       	ldd	r24, Z+22	; 0x16
     4a8:	97 89       	ldd	r25, Z+23	; 0x17
     4aa:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>

	USART_print("\n5. release_position_b: ");
     4ae:	8b e7       	ldi	r24, 0x7B	; 123
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_int(config->release_position_b, 10);
     4b6:	6a e0       	ldi	r22, 0x0A	; 10
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	f8 01       	movw	r30, r16
     4bc:	80 8d       	ldd	r24, Z+24	; 0x18
     4be:	91 8d       	ldd	r25, Z+25	; 0x19
     4c0:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>

	USART_print("\n6. step_up: ");
     4c4:	84 e9       	ldi	r24, 0x94	; 148
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_float(config->step_up);
     4cc:	f8 01       	movw	r30, r16
     4ce:	62 8d       	ldd	r22, Z+26	; 0x1a
     4d0:	73 8d       	ldd	r23, Z+27	; 0x1b
     4d2:	84 8d       	ldd	r24, Z+28	; 0x1c
     4d4:	95 8d       	ldd	r25, Z+29	; 0x1d
     4d6:	0e 94 a8 00 	call	0x150	; 0x150 <USART_print_float>

	USART_print("\n7. step_down: ");
     4da:	82 ea       	ldi	r24, 0xA2	; 162
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	USART_print_float(config->step_down);
     4e2:	f8 01       	movw	r30, r16
     4e4:	66 8d       	ldd	r22, Z+30	; 0x1e
     4e6:	77 8d       	ldd	r23, Z+31	; 0x1f
     4e8:	80 a1       	ldd	r24, Z+32	; 0x20
     4ea:	91 a1       	ldd	r25, Z+33	; 0x21
     4ec:	0e 94 a8 00 	call	0x150	; 0x150 <USART_print_float>
	
	USART_print("\n");
     4f0:	84 e0       	ldi	r24, 0x04	; 4
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <config_save>:

void config_save(const config_t* config){
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	8c 01       	movw	r16, r24
	cli();
     50c:	f8 94       	cli
	uint8_t* config_data = (uint8_t*)config;
	
	for (int i = 0; i < sizeof(config_t) + 1; i++){
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	10 c0       	rjmp	.+32     	; 0x534 <config_save+0x32>
		if (i == 0){
     514:	20 97       	sbiw	r28, 0x00	; 0
     516:	31 f4       	brne	.+12     	; 0x524 <config_save+0x22>
			EEPROM_write(CONFGIG_ADDR, MAGIC_NUMBER);
     518:	62 e2       	ldi	r22, 0x22	; 34
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <EEPROM_write>
     522:	07 c0       	rjmp	.+14     	; 0x532 <config_save+0x30>
		}
		else{
			EEPROM_write(CONFGIG_ADDR + i, config_data[i - 1]);
     524:	fc 01       	movw	r30, r24
     526:	31 97       	sbiw	r30, 0x01	; 1
     528:	e0 0f       	add	r30, r16
     52a:	f1 1f       	adc	r31, r17
     52c:	60 81       	ld	r22, Z
     52e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <EEPROM_write>

void config_save(const config_t* config){
	cli();
	uint8_t* config_data = (uint8_t*)config;
	
	for (int i = 0; i < sizeof(config_t) + 1; i++){
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	ce 01       	movw	r24, r28
     536:	c3 32       	cpi	r28, 0x23	; 35
     538:	d1 05       	cpc	r29, r1
     53a:	60 f3       	brcs	.-40     	; 0x514 <config_save+0x12>
		}
		else{
			EEPROM_write(CONFGIG_ADDR + i, config_data[i - 1]);
		}
	}
	sei();
     53c:	78 94       	sei
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <config_load>:

uint8_t config_load(config_t* config){
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	7c 01       	movw	r14, r24
	cli();
     558:	f8 94       	cli
	uint8_t success = EEPROM_read(CONFGIG_ADDR) == MAGIC_NUMBER;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <EEPROM_read>
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	82 32       	cpi	r24, 0x22	; 34
     566:	09 f0       	breq	.+2      	; 0x56a <config_load+0x22>
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	d9 2e       	mov	r13, r25
	if (success){
     56c:	82 32       	cpi	r24, 0x22	; 34
     56e:	81 f4       	brne	.+32     	; 0x590 <config_load+0x48>
     570:	0a c0       	rjmp	.+20     	; 0x586 <config_load+0x3e>
		uint8_t* config_data = (uint8_t*)config;
		
		for (int i = 0; i < sizeof(config_t); i++){
			config_data[i] = EEPROM_read(CONFGIG_ADDR + 1 + i);
     572:	87 01       	movw	r16, r14
     574:	0c 0f       	add	r16, r28
     576:	1d 1f       	adc	r17, r29
     578:	21 96       	adiw	r28, 0x01	; 1
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <EEPROM_read>
     580:	f8 01       	movw	r30, r16
     582:	80 83       	st	Z, r24
     584:	02 c0       	rjmp	.+4      	; 0x58a <config_load+0x42>
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
	cli();
	uint8_t success = EEPROM_read(CONFGIG_ADDR) == MAGIC_NUMBER;
	if (success){
		uint8_t* config_data = (uint8_t*)config;
		
		for (int i = 0; i < sizeof(config_t); i++){
     58a:	c2 32       	cpi	r28, 0x22	; 34
     58c:	d1 05       	cpc	r29, r1
     58e:	88 f3       	brcs	.-30     	; 0x572 <config_load+0x2a>
			config_data[i] = EEPROM_read(CONFGIG_ADDR + 1 + i);
		}
	}
	sei();
     590:	78 94       	sei
	
	return success;
}
     592:	8d 2d       	mov	r24, r13
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	08 95       	ret

000005a4 <servo_init>:

#define SERVO_MIN 500
#define SERVO_MAX 2400

void servo_init(){
    SERVO_1_DDR |= (1 << SERVO_1_PIN);
     5a4:	84 b1       	in	r24, 0x04	; 4
     5a6:	82 60       	ori	r24, 0x02	; 2
     5a8:	84 b9       	out	0x04, r24	; 4
    SERVO_2_DDR |= (1 << SERVO_2_PIN);
     5aa:	84 b1       	in	r24, 0x04	; 4
     5ac:	84 60       	ori	r24, 0x04	; 4
     5ae:	84 b9       	out	0x04, r24	; 4
    
    // Configure Timer1, Fast PWM, prescaler 8, clear OC1A on compare match, set OC1A at BOTTOM
    // 16MHz / 8 = 2MHz
    TCCR1A = (1 << COM1A1) | (1 << WGM11) | (1 << COM1B1);
     5b0:	82 ea       	ldi	r24, 0xA2	; 162
     5b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
     5b6:	8a e1       	ldi	r24, 0x1A	; 26
     5b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    
    ICR1 = 39999;
     5bc:	8f e3       	ldi	r24, 0x3F	; 63
     5be:	9c e9       	ldi	r25, 0x9C	; 156
     5c0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     5c4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

    OCR1A = SERVO_MIN * 2;
     5c8:	88 ee       	ldi	r24, 0xE8	; 232
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     5d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    OCR1B = SERVO_MIN * 2;
     5d4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     5d8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     5dc:	08 95       	ret

000005de <servo_1_set>:
}

void servo_1_set(uint16_t value){
    if (value < SERVO_MIN){
     5de:	84 3f       	cpi	r24, 0xF4	; 244
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	92 07       	cpc	r25, r18
     5e4:	28 f0       	brcs	.+10     	; 0x5f0 <servo_1_set+0x12>
        value = SERVO_MIN;
    }
    else if (value > SERVO_MAX){
     5e6:	81 36       	cpi	r24, 0x61	; 97
     5e8:	29 e0       	ldi	r18, 0x09	; 9
     5ea:	92 07       	cpc	r25, r18
     5ec:	20 f4       	brcc	.+8      	; 0x5f6 <servo_1_set+0x18>
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <servo_1_set+0x1c>
    OCR1B = SERVO_MIN * 2;
}

void servo_1_set(uint16_t value){
    if (value < SERVO_MIN){
        value = SERVO_MIN;
     5f0:	84 ef       	ldi	r24, 0xF4	; 244
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <servo_1_set+0x1c>
    }
    else if (value > SERVO_MAX){
        value = SERVO_MAX;
     5f6:	80 e6       	ldi	r24, 0x60	; 96
     5f8:	99 e0       	ldi	r25, 0x09	; 9
    }
    
    OCR1A = value * 2;
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     602:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     606:	08 95       	ret

00000608 <servo_2_set>:
}

void servo_2_set(uint16_t value){
    if (value < SERVO_MIN){
     608:	84 3f       	cpi	r24, 0xF4	; 244
     60a:	21 e0       	ldi	r18, 0x01	; 1
     60c:	92 07       	cpc	r25, r18
     60e:	28 f0       	brcs	.+10     	; 0x61a <servo_2_set+0x12>
        value = SERVO_MIN;
    }
    else if (value > SERVO_MAX){
     610:	81 36       	cpi	r24, 0x61	; 97
     612:	29 e0       	ldi	r18, 0x09	; 9
     614:	92 07       	cpc	r25, r18
     616:	20 f4       	brcc	.+8      	; 0x620 <servo_2_set+0x18>
     618:	05 c0       	rjmp	.+10     	; 0x624 <servo_2_set+0x1c>
    OCR1A = value * 2;
}

void servo_2_set(uint16_t value){
    if (value < SERVO_MIN){
        value = SERVO_MIN;
     61a:	84 ef       	ldi	r24, 0xF4	; 244
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	02 c0       	rjmp	.+4      	; 0x624 <servo_2_set+0x1c>
    }
    else if (value > SERVO_MAX){
        value = SERVO_MAX;
     620:	80 e6       	ldi	r24, 0x60	; 96
     622:	99 e0       	ldi	r25, 0x09	; 9
    }
    
    OCR1B = value * 2;
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     62c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     630:	08 95       	ret

00000632 <servo_set_angle_180>:
}

void servo_set_angle_180(uint8_t angle, uint8_t servo){
    if (angle > 180){
     632:	85 3b       	cpi	r24, 0xB5	; 181
     634:	08 f0       	brcs	.+2      	; 0x638 <servo_set_angle_180+0x6>
        angle = 180;
     636:	84 eb       	ldi	r24, 0xB4	; 180
    }
    
    if (servo == 1){
     638:	61 30       	cpi	r22, 0x01	; 1
     63a:	91 f4       	brne	.+36     	; 0x660 <servo_set_angle_180+0x2e>
        servo_1_set(SERVO_MIN + (((uint32_t)angle) * (SERVO_MAX - SERVO_MIN) / 180));
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	ac e6       	ldi	r26, 0x6C	; 108
     642:	b7 e0       	ldi	r27, 0x07	; 7
     644:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__umulhisi3>
     648:	24 eb       	ldi	r18, 0xB4	; 180
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
     654:	c9 01       	movw	r24, r18
     656:	8c 50       	subi	r24, 0x0C	; 12
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	0e 94 ef 02 	call	0x5de	; 0x5de <servo_1_set>
     65e:	08 95       	ret
    }
    else{
        servo_2_set(SERVO_MIN + (((uint32_t)angle) * (SERVO_MAX - SERVO_MIN) / 180));
     660:	28 2f       	mov	r18, r24
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	ac e6       	ldi	r26, 0x6C	; 108
     666:	b7 e0       	ldi	r27, 0x07	; 7
     668:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__umulhisi3>
     66c:	24 eb       	ldi	r18, 0xB4	; 180
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
     678:	c9 01       	movw	r24, r18
     67a:	8c 50       	subi	r24, 0x0C	; 12
     67c:	9e 4f       	sbci	r25, 0xFE	; 254
     67e:	0e 94 04 03 	call	0x608	; 0x608 <servo_2_set>
     682:	08 95       	ret

00000684 <servo_set_angle_minus_90_90>:
    }
}

void servo_set_angle_minus_90_90(int8_t angle, uint8_t servo){
    if (angle < -90){
     684:	86 3a       	cpi	r24, 0xA6	; 166
     686:	1c f0       	brlt	.+6      	; 0x68e <servo_set_angle_minus_90_90+0xa>
        angle = -90;
    }
    else if (angle > 90){
     688:	8b 35       	cpi	r24, 0x5B	; 91
     68a:	1c f4       	brge	.+6      	; 0x692 <servo_set_angle_minus_90_90+0xe>
     68c:	03 c0       	rjmp	.+6      	; 0x694 <servo_set_angle_minus_90_90+0x10>
    }
}

void servo_set_angle_minus_90_90(int8_t angle, uint8_t servo){
    if (angle < -90){
        angle = -90;
     68e:	86 ea       	ldi	r24, 0xA6	; 166
     690:	01 c0       	rjmp	.+2      	; 0x694 <servo_set_angle_minus_90_90+0x10>
    }
    else if (angle > 90){
        angle = 90;
     692:	8a e5       	ldi	r24, 0x5A	; 90
    }
    
    servo_set_angle_180(angle + 90, servo);
     694:	86 5a       	subi	r24, 0xA6	; 166
     696:	0e 94 19 03 	call	0x632	; 0x632 <servo_set_angle_180>
     69a:	08 95       	ret

0000069c <lcd_send>:
    // Clear display
    lcd_clear();
}

void lcd_send(uint8_t data, uint8_t mode){
    LCD_PORT = ((data & 0xF0) >> 4) | (mode << LCD_RS) | (1 << LCD_EN);
     69c:	98 2f       	mov	r25, r24
     69e:	92 95       	swap	r25
     6a0:	9f 70       	andi	r25, 0x0F	; 15
     6a2:	20 e2       	ldi	r18, 0x20	; 32
     6a4:	62 9f       	mul	r22, r18
     6a6:	b0 01       	movw	r22, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	96 2b       	or	r25, r22
     6ac:	90 61       	ori	r25, 0x10	; 16
     6ae:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b0:	95 e0       	ldi	r25, 0x05	; 5
     6b2:	9a 95       	dec	r25
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <lcd_send+0x16>
     6b6:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1 << LCD_EN);
     6b8:	98 b1       	in	r25, 0x08	; 8
     6ba:	9f 7e       	andi	r25, 0xEF	; 239
     6bc:	98 b9       	out	0x08, r25	; 8
     6be:	25 e0       	ldi	r18, 0x05	; 5
     6c0:	2a 95       	dec	r18
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <lcd_send+0x24>
     6c4:	00 00       	nop
    _delay_us(1);
    
    LCD_PORT = (data & 0x0F) | (mode << LCD_RS) | (1 << LCD_EN);
     6c6:	8f 70       	andi	r24, 0x0F	; 15
     6c8:	68 2b       	or	r22, r24
     6ca:	60 61       	ori	r22, 0x10	; 16
     6cc:	68 b9       	out	0x08, r22	; 8
     6ce:	85 e0       	ldi	r24, 0x05	; 5
     6d0:	8a 95       	dec	r24
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <lcd_send+0x34>
     6d4:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1 << LCD_EN);
     6d6:	88 b1       	in	r24, 0x08	; 8
     6d8:	8f 7e       	andi	r24, 0xEF	; 239
     6da:	88 b9       	out	0x08, r24	; 8
     6dc:	8f e8       	ldi	r24, 0x8F	; 143
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <lcd_send+0x44>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <lcd_send+0x4a>
     6e6:	00 00       	nop
     6e8:	08 95       	ret

000006ea <lcd_print>:
    _delay_us(100);
}

void lcd_print(const char* str){
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	ec 01       	movw	r28, r24
    while (*str){
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <lcd_print+0x10>
        lcd_send(*str++, LCD_MODE_DATA);
     6f2:	21 96       	adiw	r28, 0x01	; 1
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
    LCD_PORT &= ~(1 << LCD_EN);
    _delay_us(100);
}

void lcd_print(const char* str){
    while (*str){
     6fa:	88 81       	ld	r24, Y
     6fc:	81 11       	cpse	r24, r1
     6fe:	f9 cf       	rjmp	.-14     	; 0x6f2 <lcd_print+0x8>
        lcd_send(*str++, LCD_MODE_DATA);
    }
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <lcd_print_int>:

void lcd_print_int(int num, int base){
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	60 97       	sbiw	r28, 0x10	; 16
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	ab 01       	movw	r20, r22
    char buff[16];
    itoa(num, buff, base);
     71c:	be 01       	movw	r22, r28
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <itoa>
    lcd_print(buff);
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
}
     72e:	60 96       	adiw	r28, 0x10	; 16
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <lcd_print_float>:

void lcd_print_float(float num){
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	60 97       	sbiw	r28, 0x10	; 16
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	4b 01       	movw	r8, r22
     76a:	5c 01       	movw	r10, r24
    char buff[16];
    if (num < 0){
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	a9 01       	movw	r20, r18
     772:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
     776:	88 23       	and	r24, r24
     778:	44 f4       	brge	.+16     	; 0x78a <lcd_print_float+0x4a>
        lcd_print("-");
     77a:	82 eb       	ldi	r24, 0xB2	; 178
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
        num = -num;
     782:	b7 fa       	bst	r11, 7
     784:	b0 94       	com	r11
     786:	b7 f8       	bld	r11, 7
     788:	b0 94       	com	r11
    }
    itoa((int)num, buff, 10);
     78a:	c5 01       	movw	r24, r10
     78c:	b4 01       	movw	r22, r8
     78e:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fixsfsi>
     792:	6b 01       	movw	r12, r22
     794:	7c 01       	movw	r14, r24
     796:	4a e0       	ldi	r20, 0x0A	; 10
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	8e 01       	movw	r16, r28
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	b8 01       	movw	r22, r16
     7a2:	c6 01       	movw	r24, r12
     7a4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <itoa>
    lcd_print(buff);
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    lcd_print(".");
     7ae:	82 e2       	ldi	r24, 0x22	; 34
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    float fraction = num - (int)num;
     7b6:	b6 01       	movw	r22, r12
     7b8:	dd 0c       	add	r13, r13
     7ba:	88 0b       	sbc	r24, r24
     7bc:	99 0b       	sbc	r25, r25
     7be:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__floatsisf>
     7c2:	9b 01       	movw	r18, r22
     7c4:	ac 01       	movw	r20, r24
     7c6:	c5 01       	movw	r24, r10
     7c8:	b4 01       	movw	r22, r8
     7ca:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    sprintf(buff, "%03d", (int)(fraction * 1000.0f));
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	4a e7       	ldi	r20, 0x7A	; 122
     7d4:	54 e4       	ldi	r21, 0x44	; 68
     7d6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     7da:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fixsfsi>
     7de:	7f 93       	push	r23
     7e0:	6f 93       	push	r22
     7e2:	84 eb       	ldi	r24, 0xB4	; 180
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	1f 93       	push	r17
     7ec:	0f 93       	push	r16
     7ee:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <sprintf>
    lcd_print(buff);
     7f2:	c8 01       	movw	r24, r16
     7f4:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
}
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	60 96       	adiw	r28, 0x10	; 16
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	bf 90       	pop	r11
     822:	af 90       	pop	r10
     824:	9f 90       	pop	r9
     826:	8f 90       	pop	r8
     828:	08 95       	ret

0000082a <lcd_clear>:

void lcd_clear(){
    lcd_send(0x01, LCD_MODE_CMD);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     832:	8f e3       	ldi	r24, 0x3F	; 63
     834:	9f e1       	ldi	r25, 0x1F	; 31
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <lcd_clear+0xc>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <lcd_clear+0x12>
     83c:	00 00       	nop
     83e:	08 95       	ret

00000840 <lcd_init>:

#define LCD_MODE_CMD 0
#define LCD_MODE_DATA 1

void lcd_init(){
    LCD_DDR = 0xFF;
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	87 b9       	out	0x07, r24	; 7
    LCD_PORT = 0x00;
     844:	18 b8       	out	0x08, r1	; 8
     846:	8f e5       	ldi	r24, 0x5F	; 95
     848:	9a ee       	ldi	r25, 0xEA	; 234
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <lcd_init+0xa>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <lcd_init+0x10>
     850:	00 00       	nop
    
    _delay_ms(15);
    
    lcd_send(0x03, LCD_MODE_CMD);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     85e:	8f e1       	ldi	r24, 0x1F	; 31
     860:	9e e4       	ldi	r25, 0x4E	; 78
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <lcd_init+0x22>
     866:	00 c0       	rjmp	.+0      	; 0x868 <lcd_init+0x28>
     868:	00 00       	nop
    _delay_ms(5);
    lcd_send(0x03, LCD_MODE_CMD);
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     876:	8f e8       	ldi	r24, 0x8F	; 143
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	f1 f7       	brne	.-4      	; 0x87a <lcd_init+0x3a>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <lcd_init+0x40>
     880:	00 00       	nop
    _delay_us(100);
    lcd_send(0x03, LCD_MODE_CMD);
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	8f e1       	ldi	r24, 0x1F	; 31
     890:	9e e4       	ldi	r25, 0x4E	; 78
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <lcd_init+0x52>
     896:	00 c0       	rjmp	.+0      	; 0x898 <lcd_init+0x58>
     898:	00 00       	nop
    _delay_ms(5);
    lcd_send(0x02, LCD_MODE_CMD);
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     8a6:	8f e9       	ldi	r24, 0x9F	; 159
     8a8:	9f e0       	ldi	r25, 0x0F	; 15
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <lcd_init+0x6a>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <lcd_init+0x70>
     8b0:	00 00       	nop
    _delay_ms(1);
    
    // 4-bit mode
    lcd_send(0x28, LCD_MODE_CMD);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	88 e2       	ldi	r24, 0x28	; 40
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     8be:	8f e9       	ldi	r24, 0x9F	; 159
     8c0:	9f e0       	ldi	r25, 0x0F	; 15
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <lcd_init+0x82>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <lcd_init+0x88>
     8c8:	00 00       	nop
    _delay_ms(1);
    // Display on, cursor off, blink off
    lcd_send(0x0C, LCD_MODE_CMD);
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	8c e0       	ldi	r24, 0x0C	; 12
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     8d6:	8f e9       	ldi	r24, 0x9F	; 159
     8d8:	9f e0       	ldi	r25, 0x0F	; 15
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <lcd_init+0x9a>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <lcd_init+0xa0>
     8e0:	00 00       	nop
    _delay_ms(1);
    // Entry mode
    lcd_send(0x06, LCD_MODE_CMD);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	86 e0       	ldi	r24, 0x06	; 6
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     8ee:	8f e9       	ldi	r24, 0x9F	; 159
     8f0:	9f e0       	ldi	r25, 0x0F	; 15
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_init+0xb2>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <lcd_init+0xb8>
     8f8:	00 00       	nop
    _delay_ms(1);

    // Clear display
    lcd_clear();
     8fa:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
     8fe:	08 95       	ret

00000900 <lcd_set_cursor>:
void lcd_clear(){
    lcd_send(0x01, LCD_MODE_CMD);
    _delay_ms(2);
}

void lcd_set_cursor(uint8_t row, uint8_t col){
     900:	96 2f       	mov	r25, r22
    uint8_t addr = 0x80;
    if (row == 1){
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	11 f0       	breq	.+4      	; 0x90a <lcd_set_cursor+0xa>
    lcd_send(0x01, LCD_MODE_CMD);
    _delay_ms(2);
}

void lcd_set_cursor(uint8_t row, uint8_t col){
    uint8_t addr = 0x80;
     906:	80 e8       	ldi	r24, 0x80	; 128
     908:	01 c0       	rjmp	.+2      	; 0x90c <lcd_set_cursor+0xc>
    if (row == 1){
        addr = 0xC0;
     90a:	80 ec       	ldi	r24, 0xC0	; 192
    }
    addr += col;
    lcd_send(addr, LCD_MODE_CMD);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	89 0f       	add	r24, r25
     910:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_send>
     914:	08 95       	ret

00000916 <buttons_init>:
#define BUTTON_OK_PORT PORTD
#define BUTTON_OK_PIN PIND
#define BUTTON_OK PD6

void buttons_init(){
    BUTTON_UP_DDR &= ~(1 << BUTTON_UP);
     916:	8a b1       	in	r24, 0x0a	; 10
     918:	8f 7d       	andi	r24, 0xDF	; 223
     91a:	8a b9       	out	0x0a, r24	; 10
    BUTTON_UP_PORT |= (1 << BUTTON_UP);
     91c:	8b b1       	in	r24, 0x0b	; 11
     91e:	80 62       	ori	r24, 0x20	; 32
     920:	8b b9       	out	0x0b, r24	; 11
    
    BUTTON_DOWN_DDR &= ~(1 << BUTTON_DOWN);
     922:	8a b1       	in	r24, 0x0a	; 10
     924:	8f 7e       	andi	r24, 0xEF	; 239
     926:	8a b9       	out	0x0a, r24	; 10
    BUTTON_DOWN_PORT |= (1 << BUTTON_DOWN);
     928:	8b b1       	in	r24, 0x0b	; 11
     92a:	80 61       	ori	r24, 0x10	; 16
     92c:	8b b9       	out	0x0b, r24	; 11
    
    BUTTON_OK_DDR &= ~(1 << BUTTON_OK);
     92e:	8a b1       	in	r24, 0x0a	; 10
     930:	8f 7b       	andi	r24, 0xBF	; 191
     932:	8a b9       	out	0x0a, r24	; 10
    BUTTON_OK_PORT |= (1 << BUTTON_OK);
     934:	8b b1       	in	r24, 0x0b	; 11
     936:	80 64       	ori	r24, 0x40	; 64
     938:	8b b9       	out	0x0b, r24	; 11
     93a:	08 95       	ret

0000093c <button_up>:
}

uint8_t button_up(){
    return !(BUTTON_UP_PIN & (1 << BUTTON_UP));
     93c:	89 b1       	in	r24, 0x09	; 9
     93e:	82 95       	swap	r24
     940:	86 95       	lsr	r24
     942:	87 70       	andi	r24, 0x07	; 7
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	89 27       	eor	r24, r25
}
     948:	81 70       	andi	r24, 0x01	; 1
     94a:	08 95       	ret

0000094c <button_down>:

uint8_t button_down(){
    return !(BUTTON_DOWN_PIN & (1 << BUTTON_DOWN));
     94c:	89 b1       	in	r24, 0x09	; 9
     94e:	82 95       	swap	r24
     950:	8f 70       	andi	r24, 0x0F	; 15
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	89 27       	eor	r24, r25
}
     956:	81 70       	andi	r24, 0x01	; 1
     958:	08 95       	ret

0000095a <button_ok>:

uint8_t button_ok(){
    return !(BUTTON_OK_PIN & (1 << BUTTON_OK));
     95a:	89 b1       	in	r24, 0x09	; 9
     95c:	82 95       	swap	r24
     95e:	86 95       	lsr	r24
     960:	86 95       	lsr	r24
     962:	83 70       	andi	r24, 0x03	; 3
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	89 27       	eor	r24, r25
}
     968:	81 70       	andi	r24, 0x01	; 1
     96a:	08 95       	ret

0000096c <set_speed>:
#define CONTROL_H_

#include "servo.h"
#include "config.h"

void set_speed(int8_t speed_a, int8_t speed_b){
     96c:	cf 93       	push	r28
     96e:	c6 2f       	mov	r28, r22
	servo_set_angle_minus_90_90(speed_a, 1);
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 42 03 	call	0x684	; 0x684 <servo_set_angle_minus_90_90>
	servo_set_angle_minus_90_90(speed_b, 2);
     976:	62 e0       	ldi	r22, 0x02	; 2
     978:	8c 2f       	mov	r24, r28
     97a:	0e 94 42 03 	call	0x684	; 0x684 <servo_set_angle_minus_90_90>
}
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <set_normalized_speed>:

void set_normalized_speed(config_t* config, float speed_normalized){
     982:	8f 92       	push	r8
     984:	9f 92       	push	r9
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	ec 01       	movw	r28, r24
     99c:	cb 01       	movw	r24, r22
     99e:	ba 01       	movw	r22, r20
	int8_t speed_a = 0;
	int8_t speed_b = 0;

	float speed_0_1 = (speed_normalized + 1.0f) / 2.0f; 
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e8       	ldi	r20, 0x80	; 128
     9a6:	5f e3       	ldi	r21, 0x3F	; 63
     9a8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	5f e3       	ldi	r21, 0x3F	; 63
     9b4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
	int8_t position_floor = (int8_t)(speed_0_1 * 4);
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e8       	ldi	r20, 0x80	; 128
     9be:	50 e4       	ldi	r21, 0x40	; 64
     9c0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
     9c8:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fixsfsi>
     9cc:	16 2f       	mov	r17, r22
	int8_t position_ceil = position_floor + 1;
     9ce:	01 e0       	ldi	r16, 0x01	; 1
     9d0:	06 0f       	add	r16, r22
	float position_blend = (speed_0_1 * 4.0f) - position_floor;
     9d2:	06 2e       	mov	r0, r22
     9d4:	00 0c       	add	r0, r0
     9d6:	77 0b       	sbc	r23, r23
     9d8:	88 0b       	sbc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__floatsisf>
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	c7 01       	movw	r24, r14
     9e6:	b6 01       	movw	r22, r12
     9e8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24

	if (position_ceil > 4){
     9f0:	05 30       	cpi	r16, 0x05	; 5
     9f2:	14 f0       	brlt	.+4      	; 0x9f8 <set_normalized_speed+0x76>
		position_ceil = 4;
     9f4:	04 e0       	ldi	r16, 0x04	; 4
		position_floor = 4;
     9f6:	14 e0       	ldi	r17, 0x04	; 4
	}

	int8_t speed_a_floor = config->positions_a[position_floor];
     9f8:	81 2f       	mov	r24, r17
     9fa:	11 0f       	add	r17, r17
     9fc:	99 0b       	sbc	r25, r25
     9fe:	fc 01       	movw	r30, r24
     a00:	31 96       	adiw	r30, 0x01	; 1
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	ec 0f       	add	r30, r28
     a08:	fd 1f       	adc	r31, r29
     a0a:	10 81       	ld	r17, Z
	int8_t speed_a_ceil = config->positions_a[position_ceil];
     a0c:	e0 2f       	mov	r30, r16
     a0e:	00 0f       	add	r16, r16
     a10:	ff 0b       	sbc	r31, r31
     a12:	df 01       	movw	r26, r30
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	aa 0f       	add	r26, r26
     a18:	bb 1f       	adc	r27, r27
     a1a:	ac 0f       	add	r26, r28
     a1c:	bd 1f       	adc	r27, r29
     a1e:	6c 91       	ld	r22, X
	int8_t speed_b_floor = config->positions_b[position_floor];
     a20:	dc 01       	movw	r26, r24
     a22:	16 96       	adiw	r26, 0x06	; 6
     a24:	aa 0f       	add	r26, r26
     a26:	bb 1f       	adc	r27, r27
     a28:	ac 0f       	add	r26, r28
     a2a:	bd 1f       	adc	r27, r29
     a2c:	0c 91       	ld	r16, X
	int8_t speed_b_ceil = config->positions_b[position_ceil];
     a2e:	36 96       	adiw	r30, 0x06	; 6
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	ec 0f       	add	r30, r28
     a36:	fd 1f       	adc	r31, r29
     a38:	c0 81       	ld	r28, Z

	speed_a = (int8_t)(speed_a_floor + (speed_a_ceil - speed_a_floor) * position_blend);
     a3a:	06 2e       	mov	r0, r22
     a3c:	00 0c       	add	r0, r0
     a3e:	77 0b       	sbc	r23, r23
     a40:	61 1b       	sub	r22, r17
     a42:	71 09       	sbc	r23, r1
     a44:	17 fd       	sbrc	r17, 7
     a46:	73 95       	inc	r23
     a48:	07 2e       	mov	r0, r23
     a4a:	00 0c       	add	r0, r0
     a4c:	88 0b       	sbc	r24, r24
     a4e:	99 0b       	sbc	r25, r25
     a50:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__floatsisf>
     a54:	a7 01       	movw	r20, r14
     a56:	96 01       	movw	r18, r12
     a58:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     a5c:	4b 01       	movw	r8, r22
     a5e:	5c 01       	movw	r10, r24
     a60:	61 2f       	mov	r22, r17
     a62:	11 0f       	add	r17, r17
     a64:	77 0b       	sbc	r23, r23
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__floatsisf>
     a6e:	a5 01       	movw	r20, r10
     a70:	94 01       	movw	r18, r8
     a72:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     a76:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fixsfsi>
     a7a:	d6 2f       	mov	r29, r22
	speed_b = (int8_t)(speed_b_floor + (speed_b_ceil - speed_b_floor) * position_blend);
     a7c:	6c 2f       	mov	r22, r28
     a7e:	cc 0f       	add	r28, r28
     a80:	77 0b       	sbc	r23, r23
     a82:	60 1b       	sub	r22, r16
     a84:	71 09       	sbc	r23, r1
     a86:	07 fd       	sbrc	r16, 7
     a88:	73 95       	inc	r23
     a8a:	07 2e       	mov	r0, r23
     a8c:	00 0c       	add	r0, r0
     a8e:	88 0b       	sbc	r24, r24
     a90:	99 0b       	sbc	r25, r25
     a92:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__floatsisf>
     a96:	a7 01       	movw	r20, r14
     a98:	96 01       	movw	r18, r12
     a9a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     a9e:	6b 01       	movw	r12, r22
     aa0:	7c 01       	movw	r14, r24
     aa2:	60 2f       	mov	r22, r16
     aa4:	00 0f       	add	r16, r16
     aa6:	77 0b       	sbc	r23, r23
     aa8:	88 0b       	sbc	r24, r24
     aaa:	99 0b       	sbc	r25, r25
     aac:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__floatsisf>
     ab0:	a7 01       	movw	r20, r14
     ab2:	96 01       	movw	r18, r12
     ab4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     ab8:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fixsfsi>
     abc:	c6 2f       	mov	r28, r22

	servo_set_angle_minus_90_90(speed_a, 1);
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	8d 2f       	mov	r24, r29
     ac2:	0e 94 42 03 	call	0x684	; 0x684 <servo_set_angle_minus_90_90>
	servo_set_angle_minus_90_90(speed_b, 2);
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	8c 2f       	mov	r24, r28
     aca:	0e 94 42 03 	call	0x684	; 0x684 <servo_set_angle_minus_90_90>
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	9f 90       	pop	r9
     ae4:	8f 90       	pop	r8
     ae6:	08 95       	ret

00000ae8 <setup_exit>:

#define MODE_RUNNING 0
#define MODE_SETUP 1

void setup_exit(uint8_t* mode, config_t* config, uint8_t* focused){
    *mode = MODE_RUNNING;
     ae8:	fc 01       	movw	r30, r24
     aea:	10 82       	st	Z, r1
    *focused = 0;
     aec:	fa 01       	movw	r30, r20
     aee:	10 82       	st	Z, r1
    //config_save(config);
    lcd_clear();
     af0:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
    lcd_set_cursor(0, 0);
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
    lcd_print("Exit");
     afc:	8f ec       	ldi	r24, 0xCF	; 207
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
     b04:	ff ef       	ldi	r31, 0xFF	; 255
     b06:	23 ed       	ldi	r18, 0xD3	; 211
     b08:	80 e3       	ldi	r24, 0x30	; 48
     b0a:	f1 50       	subi	r31, 0x01	; 1
     b0c:	20 40       	sbci	r18, 0x00	; 0
     b0e:	80 40       	sbci	r24, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <setup_exit+0x22>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <setup_exit+0x2c>
     b14:	00 00       	nop
    _delay_ms(1000);
    lcd_clear();
     b16:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
     b1a:	08 95       	ret

00000b1c <setup_case>:
}

void setup_case(const char* text, uint8_t* focused, uint8_t* up_pressed, uint8_t* down_pressed, int16_t* config_value){
     b1c:	8f 92       	push	r8
     b1e:	9f 92       	push	r9
     b20:	af 92       	push	r10
     b22:	bf 92       	push	r11
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	4c 01       	movw	r8, r24
     b36:	7b 01       	movw	r14, r22
     b38:	5a 01       	movw	r10, r20
     b3a:	69 01       	movw	r12, r18
     b3c:	e8 01       	movw	r28, r16
    lcd_set_cursor(0, 0);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
    lcd_print(text);
     b46:	c4 01       	movw	r24, r8
     b48:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    lcd_set_cursor(1, 0);
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
    lcd_print_int(*config_value, 10);
     b54:	6a e0       	ldi	r22, 0x0A	; 10
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	88 81       	ld	r24, Y
     b5a:	99 81       	ldd	r25, Y+1	; 0x01
     b5c:	0e 94 83 03 	call	0x706	; 0x706 <lcd_print_int>
    if (*focused){
     b60:	f7 01       	movw	r30, r14
     b62:	80 81       	ld	r24, Z
     b64:	88 23       	and	r24, r24
     b66:	91 f0       	breq	.+36     	; 0xb8c <setup_case+0x70>
        if (*up_pressed){
     b68:	f5 01       	movw	r30, r10
     b6a:	80 81       	ld	r24, Z
     b6c:	88 23       	and	r24, r24
     b6e:	29 f0       	breq	.+10     	; 0xb7a <setup_case+0x5e>
            *config_value += 1;
     b70:	88 81       	ld	r24, Y
     b72:	99 81       	ldd	r25, Y+1	; 0x01
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	99 83       	std	Y+1, r25	; 0x01
     b78:	88 83       	st	Y, r24
        }
        if (*down_pressed){
     b7a:	f6 01       	movw	r30, r12
     b7c:	80 81       	ld	r24, Z
     b7e:	88 23       	and	r24, r24
     b80:	29 f0       	breq	.+10     	; 0xb8c <setup_case+0x70>
            *config_value -= 1;
     b82:	88 81       	ld	r24, Y
     b84:	99 81       	ldd	r25, Y+1	; 0x01
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	99 83       	std	Y+1, r25	; 0x01
     b8a:	88 83       	st	Y, r24
        }
    }
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	9f 90       	pop	r9
     ba2:	8f 90       	pop	r8
     ba4:	08 95       	ret

00000ba6 <setup_mode>:

void setup_mode(config_t* config, uint8_t* mode){
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <setup_mode+0xe>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	7c 01       	movw	r14, r24
     bba:	8b 01       	movw	r16, r22
	static uint8_t setup_position = 0;
	static uint8_t focused = 0;

	if (button_ok()){
     bbc:	0e 94 ad 04 	call	0x95a	; 0x95a <button_ok>
     bc0:	88 23       	and	r24, r24
     bc2:	19 f1       	breq	.+70     	; 0xc0a <setup_mode+0x64>
		focused = !focused;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <focused.1947>
     bca:	91 11       	cpse	r25, r1
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <focused.1947>
		if (focused){
     bd2:	88 23       	and	r24, r24
     bd4:	49 f0       	breq	.+18     	; 0xbe8 <setup_mode+0x42>
			lcd_set_cursor(1, 15);
     bd6:	6f e0       	ldi	r22, 0x0F	; 15
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("<");
     bde:	89 eb       	ldi	r24, 0xB9	; 185
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <setup_mode+0x52>
		}
		else{
			lcd_set_cursor(1, 15);
     be8:	6f e0       	ldi	r22, 0x0F	; 15
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print(" ");
     bf0:	89 ec       	ldi	r24, 0xC9	; 201
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
     bf8:	2f ef       	ldi	r18, 0xFF	; 255
     bfa:	83 ec       	ldi	r24, 0xC3	; 195
     bfc:	99 e0       	ldi	r25, 0x09	; 9
     bfe:	21 50       	subi	r18, 0x01	; 1
     c00:	80 40       	sbci	r24, 0x00	; 0
     c02:	90 40       	sbci	r25, 0x00	; 0
     c04:	e1 f7       	brne	.-8      	; 0xbfe <setup_mode+0x58>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <setup_mode+0x62>
     c08:	00 00       	nop
		}
		_delay_ms(200);
	}
	if (!focused){
     c0a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     c0e:	81 11       	cpse	r24, r1
     c10:	4d c0       	rjmp	.+154    	; 0xcac <setup_mode+0x106>
		if (button_up() && button_down() && !button_ok()){
     c12:	0e 94 9e 04 	call	0x93c	; 0x93c <button_up>
     c16:	88 23       	and	r24, r24
     c18:	79 f0       	breq	.+30     	; 0xc38 <setup_mode+0x92>
     c1a:	0e 94 a6 04 	call	0x94c	; 0x94c <button_down>
     c1e:	88 23       	and	r24, r24
     c20:	59 f0       	breq	.+22     	; 0xc38 <setup_mode+0x92>
     c22:	0e 94 ad 04 	call	0x95a	; 0x95a <button_ok>
     c26:	81 11       	cpse	r24, r1
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <setup_mode+0x92>
			setup_exit(mode, config, &focused);
     c2a:	4a e9       	ldi	r20, 0x9A	; 154
     c2c:	53 e0       	ldi	r21, 0x03	; 3
     c2e:	b7 01       	movw	r22, r14
     c30:	c8 01       	movw	r24, r16
     c32:	0e 94 74 05 	call	0xae8	; 0xae8 <setup_exit>
			return;
     c36:	4a c2       	rjmp	.+1172   	; 0x10cc <setup_mode+0x526>
		}
		if (button_up()){
     c38:	0e 94 9e 04 	call	0x93c	; 0x93c <button_up>
     c3c:	88 23       	and	r24, r24
     c3e:	c9 f0       	breq	.+50     	; 0xc72 <setup_mode+0xcc>
			setup_position = (setup_position + 1) % 16;
     c40:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <setup_position.1946>
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	8f 70       	andi	r24, 0x0F	; 15
     c4a:	90 78       	andi	r25, 0x80	; 128
     c4c:	99 23       	and	r25, r25
     c4e:	24 f4       	brge	.+8      	; 0xc58 <setup_mode+0xb2>
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	80 6f       	ori	r24, 0xF0	; 240
     c54:	9f 6f       	ori	r25, 0xFF	; 255
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <setup_position.1946>
     c5c:	ef ef       	ldi	r30, 0xFF	; 255
     c5e:	f3 ec       	ldi	r31, 0xC3	; 195
     c60:	29 e0       	ldi	r18, 0x09	; 9
     c62:	e1 50       	subi	r30, 0x01	; 1
     c64:	f0 40       	sbci	r31, 0x00	; 0
     c66:	20 40       	sbci	r18, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <setup_mode+0xbc>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <setup_mode+0xc6>
     c6c:	00 00       	nop
			_delay_ms(200);
			lcd_clear();
     c6e:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
		}
		if (button_down()){
     c72:	0e 94 a6 04 	call	0x94c	; 0x94c <button_down>
     c76:	88 23       	and	r24, r24
     c78:	c9 f0       	breq	.+50     	; 0xcac <setup_mode+0x106>
			setup_position = (setup_position + 15) % 16;
     c7a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <setup_position.1946>
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0f 96       	adiw	r24, 0x0f	; 15
     c82:	8f 70       	andi	r24, 0x0F	; 15
     c84:	90 78       	andi	r25, 0x80	; 128
     c86:	99 23       	and	r25, r25
     c88:	24 f4       	brge	.+8      	; 0xc92 <setup_mode+0xec>
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	80 6f       	ori	r24, 0xF0	; 240
     c8e:	9f 6f       	ori	r25, 0xFF	; 255
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <setup_position.1946>
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	93 ec       	ldi	r25, 0xC3	; 195
     c9a:	e9 e0       	ldi	r30, 0x09	; 9
     c9c:	81 50       	subi	r24, 0x01	; 1
     c9e:	90 40       	sbci	r25, 0x00	; 0
     ca0:	e0 40       	sbci	r30, 0x00	; 0
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <setup_mode+0xf6>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <setup_mode+0x100>
     ca6:	00 00       	nop
			_delay_ms(200);
			lcd_clear();
     ca8:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
		}
	}

	uint8_t up_pressed = button_up();
     cac:	0e 94 9e 04 	call	0x93c	; 0x93c <button_up>
     cb0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t down_pressed = button_down();
     cb2:	0e 94 a6 04 	call	0x94c	; 0x94c <button_down>
     cb6:	8a 83       	std	Y+2, r24	; 0x02

	if (focused && (up_pressed || down_pressed)){
     cb8:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <focused.1947>
     cbc:	99 23       	and	r25, r25
     cbe:	69 f0       	breq	.+26     	; 0xcda <setup_mode+0x134>
     cc0:	99 81       	ldd	r25, Y+1	; 0x01
     cc2:	91 11       	cpse	r25, r1
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <setup_mode+0x124>
     cc6:	88 23       	and	r24, r24
     cc8:	41 f0       	breq	.+16     	; 0xcda <setup_mode+0x134>
		lcd_set_cursor(1, 0);
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
		lcd_print("               ");
     cd2:	8b eb       	ldi	r24, 0xBB	; 187
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
	}
	// TODO: ask if servo preview should be enabled
    uint8_t servo_preview = true;

	switch (setup_position){
     cda:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <setup_position.1946>
     cde:	8e 2f       	mov	r24, r30
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	80 31       	cpi	r24, 0x10	; 16
     ce4:	91 05       	cpc	r25, r1
     ce6:	08 f0       	brcs	.+2      	; 0xcea <setup_mode+0x144>
     ce8:	de c1       	rjmp	.+956    	; 0x10a6 <setup_mode+0x500>
     cea:	fc 01       	movw	r30, r24
     cec:	ec 5c       	subi	r30, 0xCC	; 204
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__tablejump2__>
        case 0:
            setup_case("1.valid_sample_timeout", &focused, &up_pressed, &down_pressed, &config->valid_sample_timeout);
     cf4:	87 01       	movw	r16, r14
     cf6:	9e 01       	movw	r18, r28
     cf8:	2e 5f       	subi	r18, 0xFE	; 254
     cfa:	3f 4f       	sbci	r19, 0xFF	; 255
     cfc:	ae 01       	movw	r20, r28
     cfe:	4f 5f       	subi	r20, 0xFF	; 255
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	6a e9       	ldi	r22, 0x9A	; 154
     d04:	73 e0       	ldi	r23, 0x03	; 3
     d06:	8b ec       	ldi	r24, 0xCB	; 203
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            break;
     d0e:	cb c1       	rjmp	.+918    	; 0x10a6 <setup_mode+0x500>

        case 1:
            setup_case("2.positions_a_-2", &focused, &up_pressed, &down_pressed, &config->positions_a[0]);
     d10:	87 01       	movw	r16, r14
     d12:	0e 5f       	subi	r16, 0xFE	; 254
     d14:	1f 4f       	sbci	r17, 0xFF	; 255
     d16:	9e 01       	movw	r18, r28
     d18:	2e 5f       	subi	r18, 0xFE	; 254
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	ae 01       	movw	r20, r28
     d1e:	4f 5f       	subi	r20, 0xFF	; 255
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	6a e9       	ldi	r22, 0x9A	; 154
     d24:	73 e0       	ldi	r23, 0x03	; 3
     d26:	82 ee       	ldi	r24, 0xE2	; 226
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[0], config->positions_b[0]);
     d2e:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     d32:	88 23       	and	r24, r24
     d34:	09 f4       	brne	.+2      	; 0xd38 <setup_mode+0x192>
     d36:	b7 c1       	rjmp	.+878    	; 0x10a6 <setup_mode+0x500>
     d38:	f7 01       	movw	r30, r14
     d3a:	64 85       	ldd	r22, Z+12	; 0x0c
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     d42:	b1 c1       	rjmp	.+866    	; 0x10a6 <setup_mode+0x500>
            break;

        case 2:
            setup_case("3.positions_b_-2", &focused, &up_pressed, &down_pressed, &config->positions_b[0]);
     d44:	87 01       	movw	r16, r14
     d46:	04 5f       	subi	r16, 0xF4	; 244
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	9e 01       	movw	r18, r28
     d4c:	2e 5f       	subi	r18, 0xFE	; 254
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	ae 01       	movw	r20, r28
     d52:	4f 5f       	subi	r20, 0xFF	; 255
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	6a e9       	ldi	r22, 0x9A	; 154
     d58:	73 e0       	ldi	r23, 0x03	; 3
     d5a:	83 ef       	ldi	r24, 0xF3	; 243
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview)  set_speed(config->positions_a[0], config->positions_b[0]);
     d62:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     d66:	88 23       	and	r24, r24
     d68:	09 f4       	brne	.+2      	; 0xd6c <setup_mode+0x1c6>
     d6a:	9d c1       	rjmp	.+826    	; 0x10a6 <setup_mode+0x500>
     d6c:	f7 01       	movw	r30, r14
     d6e:	64 85       	ldd	r22, Z+12	; 0x0c
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     d76:	97 c1       	rjmp	.+814    	; 0x10a6 <setup_mode+0x500>
            break;

        case 3:
            setup_case("4.positions_a_-1", &focused, &up_pressed, &down_pressed, &config->positions_a[1]);
     d78:	87 01       	movw	r16, r14
     d7a:	0c 5f       	subi	r16, 0xFC	; 252
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	9e 01       	movw	r18, r28
     d80:	2e 5f       	subi	r18, 0xFE	; 254
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	ae 01       	movw	r20, r28
     d86:	4f 5f       	subi	r20, 0xFF	; 255
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	6a e9       	ldi	r22, 0x9A	; 154
     d8c:	73 e0       	ldi	r23, 0x03	; 3
     d8e:	84 e0       	ldi	r24, 0x04	; 4
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[1], config->positions_b[1]);
     d96:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     d9a:	88 23       	and	r24, r24
     d9c:	09 f4       	brne	.+2      	; 0xda0 <setup_mode+0x1fa>
     d9e:	83 c1       	rjmp	.+774    	; 0x10a6 <setup_mode+0x500>
     da0:	f7 01       	movw	r30, r14
     da2:	66 85       	ldd	r22, Z+14	; 0x0e
     da4:	84 81       	ldd	r24, Z+4	; 0x04
     da6:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     daa:	7d c1       	rjmp	.+762    	; 0x10a6 <setup_mode+0x500>
            break;

        case 4:
            setup_case("5.positions_b_-1", &focused, &up_pressed, &down_pressed, &config->positions_b[1]);
     dac:	87 01       	movw	r16, r14
     dae:	02 5f       	subi	r16, 0xF2	; 242
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	9e 01       	movw	r18, r28
     db4:	2e 5f       	subi	r18, 0xFE	; 254
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	ae 01       	movw	r20, r28
     dba:	4f 5f       	subi	r20, 0xFF	; 255
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	6a e9       	ldi	r22, 0x9A	; 154
     dc0:	73 e0       	ldi	r23, 0x03	; 3
     dc2:	85 e1       	ldi	r24, 0x15	; 21
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[1], config->positions_b[1]);
     dca:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     dce:	88 23       	and	r24, r24
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <setup_mode+0x22e>
     dd2:	69 c1       	rjmp	.+722    	; 0x10a6 <setup_mode+0x500>
     dd4:	f7 01       	movw	r30, r14
     dd6:	66 85       	ldd	r22, Z+14	; 0x0e
     dd8:	84 81       	ldd	r24, Z+4	; 0x04
     dda:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     dde:	63 c1       	rjmp	.+710    	; 0x10a6 <setup_mode+0x500>
            break;

        case 5:
            setup_case("6.positions_a_0", &focused, &up_pressed, &down_pressed, &config->positions_a[2]);
     de0:	87 01       	movw	r16, r14
     de2:	0a 5f       	subi	r16, 0xFA	; 250
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	9e 01       	movw	r18, r28
     de8:	2e 5f       	subi	r18, 0xFE	; 254
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	ae 01       	movw	r20, r28
     dee:	4f 5f       	subi	r20, 0xFF	; 255
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	6a e9       	ldi	r22, 0x9A	; 154
     df4:	73 e0       	ldi	r23, 0x03	; 3
     df6:	86 e2       	ldi	r24, 0x26	; 38
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[2], config->positions_b[2]);
     dfe:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     e02:	88 23       	and	r24, r24
     e04:	09 f4       	brne	.+2      	; 0xe08 <setup_mode+0x262>
     e06:	4f c1       	rjmp	.+670    	; 0x10a6 <setup_mode+0x500>
     e08:	f7 01       	movw	r30, r14
     e0a:	60 89       	ldd	r22, Z+16	; 0x10
     e0c:	86 81       	ldd	r24, Z+6	; 0x06
     e0e:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     e12:	49 c1       	rjmp	.+658    	; 0x10a6 <setup_mode+0x500>
            break;

        case 6:
            setup_case("7.positions_b_0", &focused, &up_pressed, &down_pressed, &config->positions_b[2]);
     e14:	87 01       	movw	r16, r14
     e16:	00 5f       	subi	r16, 0xF0	; 240
     e18:	1f 4f       	sbci	r17, 0xFF	; 255
     e1a:	9e 01       	movw	r18, r28
     e1c:	2e 5f       	subi	r18, 0xFE	; 254
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
     e20:	ae 01       	movw	r20, r28
     e22:	4f 5f       	subi	r20, 0xFF	; 255
     e24:	5f 4f       	sbci	r21, 0xFF	; 255
     e26:	6a e9       	ldi	r22, 0x9A	; 154
     e28:	73 e0       	ldi	r23, 0x03	; 3
     e2a:	86 e3       	ldi	r24, 0x36	; 54
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[2], config->positions_b[2]);
     e32:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     e36:	88 23       	and	r24, r24
     e38:	09 f4       	brne	.+2      	; 0xe3c <setup_mode+0x296>
     e3a:	35 c1       	rjmp	.+618    	; 0x10a6 <setup_mode+0x500>
     e3c:	f7 01       	movw	r30, r14
     e3e:	60 89       	ldd	r22, Z+16	; 0x10
     e40:	86 81       	ldd	r24, Z+6	; 0x06
     e42:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     e46:	2f c1       	rjmp	.+606    	; 0x10a6 <setup_mode+0x500>
            break;

        case 7:
            setup_case("8.positions_a_1", &focused, &up_pressed, &down_pressed, &config->positions_a[3]);
     e48:	87 01       	movw	r16, r14
     e4a:	08 5f       	subi	r16, 0xF8	; 248
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	9e 01       	movw	r18, r28
     e50:	2e 5f       	subi	r18, 0xFE	; 254
     e52:	3f 4f       	sbci	r19, 0xFF	; 255
     e54:	ae 01       	movw	r20, r28
     e56:	4f 5f       	subi	r20, 0xFF	; 255
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	6a e9       	ldi	r22, 0x9A	; 154
     e5c:	73 e0       	ldi	r23, 0x03	; 3
     e5e:	86 e4       	ldi	r24, 0x46	; 70
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[3], config->positions_b[3]);
     e66:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     e6a:	88 23       	and	r24, r24
     e6c:	09 f4       	brne	.+2      	; 0xe70 <setup_mode+0x2ca>
     e6e:	1b c1       	rjmp	.+566    	; 0x10a6 <setup_mode+0x500>
     e70:	f7 01       	movw	r30, r14
     e72:	62 89       	ldd	r22, Z+18	; 0x12
     e74:	80 85       	ldd	r24, Z+8	; 0x08
     e76:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     e7a:	15 c1       	rjmp	.+554    	; 0x10a6 <setup_mode+0x500>
            break;

        case 8:
            setup_case("9.positions_b_1", &focused, &up_pressed, &down_pressed, &config->positions_b[3]);
     e7c:	87 01       	movw	r16, r14
     e7e:	0e 5e       	subi	r16, 0xEE	; 238
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	9e 01       	movw	r18, r28
     e84:	2e 5f       	subi	r18, 0xFE	; 254
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	ae 01       	movw	r20, r28
     e8a:	4f 5f       	subi	r20, 0xFF	; 255
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	6a e9       	ldi	r22, 0x9A	; 154
     e90:	73 e0       	ldi	r23, 0x03	; 3
     e92:	86 e5       	ldi	r24, 0x56	; 86
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[3], config->positions_b[3]);
     e9a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     e9e:	88 23       	and	r24, r24
     ea0:	09 f4       	brne	.+2      	; 0xea4 <setup_mode+0x2fe>
     ea2:	01 c1       	rjmp	.+514    	; 0x10a6 <setup_mode+0x500>
     ea4:	f7 01       	movw	r30, r14
     ea6:	62 89       	ldd	r22, Z+18	; 0x12
     ea8:	80 85       	ldd	r24, Z+8	; 0x08
     eaa:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     eae:	fb c0       	rjmp	.+502    	; 0x10a6 <setup_mode+0x500>
            break;

        case 9:
            setup_case("10.positions_a_2", &focused, &up_pressed, &down_pressed, &config->positions_a[4]);
     eb0:	87 01       	movw	r16, r14
     eb2:	06 5f       	subi	r16, 0xF6	; 246
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	9e 01       	movw	r18, r28
     eb8:	2e 5f       	subi	r18, 0xFE	; 254
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	ae 01       	movw	r20, r28
     ebe:	4f 5f       	subi	r20, 0xFF	; 255
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255
     ec2:	6a e9       	ldi	r22, 0x9A	; 154
     ec4:	73 e0       	ldi	r23, 0x03	; 3
     ec6:	86 e6       	ldi	r24, 0x66	; 102
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[4], config->positions_b[4]);
     ece:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     ed2:	88 23       	and	r24, r24
     ed4:	09 f4       	brne	.+2      	; 0xed8 <setup_mode+0x332>
     ed6:	e7 c0       	rjmp	.+462    	; 0x10a6 <setup_mode+0x500>
     ed8:	f7 01       	movw	r30, r14
     eda:	64 89       	ldd	r22, Z+20	; 0x14
     edc:	82 85       	ldd	r24, Z+10	; 0x0a
     ede:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     ee2:	e1 c0       	rjmp	.+450    	; 0x10a6 <setup_mode+0x500>
            break;

        case 10:
            setup_case("11.positions_b_2", &focused, &up_pressed, &down_pressed, &config->positions_b[4]);
     ee4:	87 01       	movw	r16, r14
     ee6:	0c 5e       	subi	r16, 0xEC	; 236
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	9e 01       	movw	r18, r28
     eec:	2e 5f       	subi	r18, 0xFE	; 254
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	ae 01       	movw	r20, r28
     ef2:	4f 5f       	subi	r20, 0xFF	; 255
     ef4:	5f 4f       	sbci	r21, 0xFF	; 255
     ef6:	6a e9       	ldi	r22, 0x9A	; 154
     ef8:	73 e0       	ldi	r23, 0x03	; 3
     efa:	87 e7       	ldi	r24, 0x77	; 119
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[4], config->positions_b[4]);
     f02:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     f06:	88 23       	and	r24, r24
     f08:	09 f4       	brne	.+2      	; 0xf0c <setup_mode+0x366>
     f0a:	cd c0       	rjmp	.+410    	; 0x10a6 <setup_mode+0x500>
     f0c:	f7 01       	movw	r30, r14
     f0e:	64 89       	ldd	r22, Z+20	; 0x14
     f10:	82 85       	ldd	r24, Z+10	; 0x0a
     f12:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     f16:	c7 c0       	rjmp	.+398    	; 0x10a6 <setup_mode+0x500>
            break;

        case 11:
            setup_case("12.release_position_a", &focused, &up_pressed, &down_pressed, &config->release_position_a);
     f18:	87 01       	movw	r16, r14
     f1a:	0a 5e       	subi	r16, 0xEA	; 234
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	9e 01       	movw	r18, r28
     f20:	2e 5f       	subi	r18, 0xFE	; 254
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	ae 01       	movw	r20, r28
     f26:	4f 5f       	subi	r20, 0xFF	; 255
     f28:	5f 4f       	sbci	r21, 0xFF	; 255
     f2a:	6a e9       	ldi	r22, 0x9A	; 154
     f2c:	73 e0       	ldi	r23, 0x03	; 3
     f2e:	88 e8       	ldi	r24, 0x88	; 136
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->release_position_a, config->release_position_b);
     f36:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     f3a:	88 23       	and	r24, r24
     f3c:	09 f4       	brne	.+2      	; 0xf40 <setup_mode+0x39a>
     f3e:	b3 c0       	rjmp	.+358    	; 0x10a6 <setup_mode+0x500>
     f40:	f7 01       	movw	r30, r14
     f42:	60 8d       	ldd	r22, Z+24	; 0x18
     f44:	86 89       	ldd	r24, Z+22	; 0x16
     f46:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     f4a:	ad c0       	rjmp	.+346    	; 0x10a6 <setup_mode+0x500>
            break;

        case 12:
            setup_case("13.release_position_b", &focused, &up_pressed, &down_pressed, &config->release_position_b);
     f4c:	87 01       	movw	r16, r14
     f4e:	08 5e       	subi	r16, 0xE8	; 232
     f50:	1f 4f       	sbci	r17, 0xFF	; 255
     f52:	9e 01       	movw	r18, r28
     f54:	2e 5f       	subi	r18, 0xFE	; 254
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	ae 01       	movw	r20, r28
     f5a:	4f 5f       	subi	r20, 0xFF	; 255
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	6a e9       	ldi	r22, 0x9A	; 154
     f60:	73 e0       	ldi	r23, 0x03	; 3
     f62:	8e e9       	ldi	r24, 0x9E	; 158
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	0e 94 8e 05 	call	0xb1c	; 0xb1c <setup_case>
            if (focused && servo_preview) set_speed(config->release_position_a, config->release_position_b);
     f6a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     f6e:	88 23       	and	r24, r24
     f70:	09 f4       	brne	.+2      	; 0xf74 <setup_mode+0x3ce>
     f72:	99 c0       	rjmp	.+306    	; 0x10a6 <setup_mode+0x500>
     f74:	f7 01       	movw	r30, r14
     f76:	60 8d       	ldd	r22, Z+24	; 0x18
     f78:	86 89       	ldd	r24, Z+22	; 0x16
     f7a:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
     f7e:	93 c0       	rjmp	.+294    	; 0x10a6 <setup_mode+0x500>
            break;

		case 13:
			lcd_set_cursor(0, 0);
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("14.step_up");
     f88:	84 eb       	ldi	r24, 0xB4	; 180
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			lcd_set_cursor(1, 0);
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print_float(config->step_up);
     f98:	f7 01       	movw	r30, r14
     f9a:	62 8d       	ldd	r22, Z+26	; 0x1a
     f9c:	73 8d       	ldd	r23, Z+27	; 0x1b
     f9e:	84 8d       	ldd	r24, Z+28	; 0x1c
     fa0:	95 8d       	ldd	r25, Z+29	; 0x1d
     fa2:	0e 94 a0 03 	call	0x740	; 0x740 <lcd_print_float>
			if (focused){
     fa6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <setup_mode+0x40a>
     fae:	7b c0       	rjmp	.+246    	; 0x10a6 <setup_mode+0x500>
				if (up_pressed){
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	88 23       	and	r24, r24
     fb4:	81 f0       	breq	.+32     	; 0xfd6 <setup_mode+0x430>
					config->step_up += 0.001f;
     fb6:	2f e6       	ldi	r18, 0x6F	; 111
     fb8:	32 e1       	ldi	r19, 0x12	; 18
     fba:	43 e8       	ldi	r20, 0x83	; 131
     fbc:	5a e3       	ldi	r21, 0x3A	; 58
     fbe:	f7 01       	movw	r30, r14
     fc0:	62 8d       	ldd	r22, Z+26	; 0x1a
     fc2:	73 8d       	ldd	r23, Z+27	; 0x1b
     fc4:	84 8d       	ldd	r24, Z+28	; 0x1c
     fc6:	95 8d       	ldd	r25, Z+29	; 0x1d
     fc8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     fcc:	f7 01       	movw	r30, r14
     fce:	62 8f       	std	Z+26, r22	; 0x1a
     fd0:	73 8f       	std	Z+27, r23	; 0x1b
     fd2:	84 8f       	std	Z+28, r24	; 0x1c
     fd4:	95 8f       	std	Z+29, r25	; 0x1d
				}
				if (down_pressed){
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <setup_mode+0x438>
     fdc:	64 c0       	rjmp	.+200    	; 0x10a6 <setup_mode+0x500>
					config->step_up -= 0.001f;
     fde:	2f e6       	ldi	r18, 0x6F	; 111
     fe0:	32 e1       	ldi	r19, 0x12	; 18
     fe2:	43 e8       	ldi	r20, 0x83	; 131
     fe4:	5a e3       	ldi	r21, 0x3A	; 58
     fe6:	f7 01       	movw	r30, r14
     fe8:	62 8d       	ldd	r22, Z+26	; 0x1a
     fea:	73 8d       	ldd	r23, Z+27	; 0x1b
     fec:	84 8d       	ldd	r24, Z+28	; 0x1c
     fee:	95 8d       	ldd	r25, Z+29	; 0x1d
     ff0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     ff4:	f7 01       	movw	r30, r14
     ff6:	62 8f       	std	Z+26, r22	; 0x1a
     ff8:	73 8f       	std	Z+27, r23	; 0x1b
     ffa:	84 8f       	std	Z+28, r24	; 0x1c
     ffc:	95 8f       	std	Z+29, r25	; 0x1d
     ffe:	53 c0       	rjmp	.+166    	; 0x10a6 <setup_mode+0x500>
				}
			}
			break;

		case 14:
			lcd_set_cursor(0, 0);
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("15.step_down");
    1008:	8f eb       	ldi	r24, 0xBF	; 191
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			lcd_set_cursor(1, 0);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print_float(config->step_down);
    1018:	f7 01       	movw	r30, r14
    101a:	66 8d       	ldd	r22, Z+30	; 0x1e
    101c:	77 8d       	ldd	r23, Z+31	; 0x1f
    101e:	80 a1       	ldd	r24, Z+32	; 0x20
    1020:	91 a1       	ldd	r25, Z+33	; 0x21
    1022:	0e 94 a0 03 	call	0x740	; 0x740 <lcd_print_float>
			if (focused){
    1026:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
    102a:	88 23       	and	r24, r24
    102c:	e1 f1       	breq	.+120    	; 0x10a6 <setup_mode+0x500>
				if (up_pressed){
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	88 23       	and	r24, r24
    1032:	81 f0       	breq	.+32     	; 0x1054 <setup_mode+0x4ae>
					config->step_down += 0.001f;
    1034:	2f e6       	ldi	r18, 0x6F	; 111
    1036:	32 e1       	ldi	r19, 0x12	; 18
    1038:	43 e8       	ldi	r20, 0x83	; 131
    103a:	5a e3       	ldi	r21, 0x3A	; 58
    103c:	f7 01       	movw	r30, r14
    103e:	66 8d       	ldd	r22, Z+30	; 0x1e
    1040:	77 8d       	ldd	r23, Z+31	; 0x1f
    1042:	80 a1       	ldd	r24, Z+32	; 0x20
    1044:	91 a1       	ldd	r25, Z+33	; 0x21
    1046:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
    104a:	f7 01       	movw	r30, r14
    104c:	66 8f       	std	Z+30, r22	; 0x1e
    104e:	77 8f       	std	Z+31, r23	; 0x1f
    1050:	80 a3       	std	Z+32, r24	; 0x20
    1052:	91 a3       	std	Z+33, r25	; 0x21
				}
				if (down_pressed){
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	88 23       	and	r24, r24
    1058:	31 f1       	breq	.+76     	; 0x10a6 <setup_mode+0x500>
					config->step_down -= 0.001f;
    105a:	2f e6       	ldi	r18, 0x6F	; 111
    105c:	32 e1       	ldi	r19, 0x12	; 18
    105e:	43 e8       	ldi	r20, 0x83	; 131
    1060:	5a e3       	ldi	r21, 0x3A	; 58
    1062:	f7 01       	movw	r30, r14
    1064:	66 8d       	ldd	r22, Z+30	; 0x1e
    1066:	77 8d       	ldd	r23, Z+31	; 0x1f
    1068:	80 a1       	ldd	r24, Z+32	; 0x20
    106a:	91 a1       	ldd	r25, Z+33	; 0x21
    106c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    1070:	f7 01       	movw	r30, r14
    1072:	66 8f       	std	Z+30, r22	; 0x1e
    1074:	77 8f       	std	Z+31, r23	; 0x1f
    1076:	80 a3       	std	Z+32, r24	; 0x20
    1078:	91 a3       	std	Z+33, r25	; 0x21
    107a:	15 c0       	rjmp	.+42     	; 0x10a6 <setup_mode+0x500>
				}
			}
			break;

		case 15:
			lcd_set_cursor(0, 0);
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("16.Exit");
    1084:	8c ec       	ldi	r24, 0xCC	; 204
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			if (focused){
    108c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
    1090:	88 23       	and	r24, r24
    1092:	49 f0       	breq	.+18     	; 0x10a6 <setup_mode+0x500>
				*mode = MODE_RUNNING;
    1094:	f8 01       	movw	r30, r16
    1096:	10 82       	st	Z, r1
				focused = 0;
    1098:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <focused.1947>
				setup_position = 0;
    109c:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <setup_position.1946>
				lcd_clear();
    10a0:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
				return;
    10a4:	13 c0       	rjmp	.+38     	; 0x10cc <setup_mode+0x526>
			break;
		default:
			break;
	}

	if ((up_pressed || down_pressed) && focused){
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	81 11       	cpse	r24, r1
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <setup_mode+0x50c>
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 23       	and	r24, r24
    10b0:	69 f0       	breq	.+26     	; 0x10cc <setup_mode+0x526>
    10b2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <focused.1947>
    10b6:	88 23       	and	r24, r24
    10b8:	49 f0       	breq	.+18     	; 0x10cc <setup_mode+0x526>
    10ba:	ff ef       	ldi	r31, 0xFF	; 255
    10bc:	23 ec       	ldi	r18, 0xC3	; 195
    10be:	89 e0       	ldi	r24, 0x09	; 9
    10c0:	f1 50       	subi	r31, 0x01	; 1
    10c2:	20 40       	sbci	r18, 0x00	; 0
    10c4:	80 40       	sbci	r24, 0x00	; 0
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <setup_mode+0x51a>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <setup_mode+0x524>
    10ca:	00 00       	nop
		_delay_ms(200);
	}
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	08 95       	ret

000010de <process_serial>:
#define CONFIG_SERIAL_H_

#include "config.h"
#include "USART.h"

void process_serial(uint8_t data, config_t* config){
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
	// config
	if (data == 'c'){
    10e2:	83 36       	cpi	r24, 0x63	; 99
    10e4:	29 f5       	brne	.+74     	; 0x1130 <process_serial+0x52>
    10e6:	eb 01       	movw	r28, r22
		USART_print("1 - Print config\n");
    10e8:	84 ed       	ldi	r24, 0xD4	; 212
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
		//USART_print("2 - Edit config\n");
		USART_print("3 - Save config\n");
    10f0:	86 ee       	ldi	r24, 0xE6	; 230
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
		USART_print("Enter option:\n");
    10f8:	87 ef       	ldi	r24, 0xF7	; 247
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	0e 94 75 00 	call	0xea	; 0xea <USART_print>

		int option = USART_read_int();
    1100:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <USART_read_int>
		switch (option){
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	19 f0       	breq	.+6      	; 0x1110 <process_serial+0x32>
    110a:	03 97       	sbiw	r24, 0x03	; 3
    110c:	29 f0       	breq	.+10     	; 0x1118 <process_serial+0x3a>
    110e:	0c c0       	rjmp	.+24     	; 0x1128 <process_serial+0x4a>
			case 1:
				config_print(config);
    1110:	ce 01       	movw	r24, r28
    1112:	0e 94 05 02 	call	0x40a	; 0x40a <config_print>
				break;
    1116:	0c c0       	rjmp	.+24     	; 0x1130 <process_serial+0x52>
				}
				config_print(config);
				break;
			}*/
			case 3:
				config_save(config);
    1118:	ce 01       	movw	r24, r28
    111a:	0e 94 81 02 	call	0x502	; 0x502 <config_save>
				USART_print("Config saved\n");
    111e:	86 e0       	ldi	r24, 0x06	; 6
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
				break;
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <process_serial+0x52>
			default:
				USART_print("Invalid option\n");
    1128:	84 e1       	ldi	r24, 0x14	; 20
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
				break;
		}
	}
}
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <transmit_binary>:
#include "buttons.h"
#include "config_screen.h"
#include "config_serial.h"
#include "control.h"

void transmit_binary(uint16_t data, uint8_t bits){
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	6c 01       	movw	r12, r24
	int mask = 1 << (bits - 1);
    1148:	e6 2e       	mov	r14, r22
    114a:	f1 2c       	mov	r15, r1
    114c:	c7 01       	movw	r24, r14
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	c1 e0       	ldi	r28, 0x01	; 1
    1152:	d0 e0       	ldi	r29, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <transmit_binary+0x24>
    1156:	cc 0f       	add	r28, r28
    1158:	dd 1f       	adc	r29, r29
    115a:	8a 95       	dec	r24
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <transmit_binary+0x20>
	for (int i = 0; i < bits; i++){
    115e:	00 e0       	ldi	r16, 0x00	; 0
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <transmit_binary+0x4a>
		USART_transmit((data & mask) ? '1' : '0');
    1164:	ce 01       	movw	r24, r28
    1166:	8c 21       	and	r24, r12
    1168:	9d 21       	and	r25, r13
    116a:	89 2b       	or	r24, r25
    116c:	11 f0       	breq	.+4      	; 0x1172 <transmit_binary+0x3c>
    116e:	81 e3       	ldi	r24, 0x31	; 49
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <transmit_binary+0x3e>
    1172:	80 e3       	ldi	r24, 0x30	; 48
    1174:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_transmit>
		mask >>= 1;
    1178:	d5 95       	asr	r29
    117a:	c7 95       	ror	r28
#include "config_serial.h"
#include "control.h"

void transmit_binary(uint16_t data, uint8_t bits){
	int mask = 1 << (bits - 1);
	for (int i = 0; i < bits; i++){
    117c:	0f 5f       	subi	r16, 0xFF	; 255
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	0e 15       	cp	r16, r14
    1182:	1f 05       	cpc	r17, r15
    1184:	7c f3       	brlt	.-34     	; 0x1164 <transmit_binary+0x2e>
		USART_transmit((data & mask) ? '1' : '0');
		mask >>= 1;
	}
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	08 95       	ret

00001198 <bit_index>:

int8_t bit_index(uint8_t data){
    1198:	48 2f       	mov	r20, r24
	int8_t state_index = -1;
	for (uint8_t bit = 0; bit < 5; bit++){
    119a:	90 e0       	ldi	r25, 0x00	; 0
		mask >>= 1;
	}
}

int8_t bit_index(uint8_t data){
	int8_t state_index = -1;
    119c:	8f ef       	ldi	r24, 0xFF	; 255
	for (uint8_t bit = 0; bit < 5; bit++){
    119e:	10 c0       	rjmp	.+32     	; 0x11c0 <bit_index+0x28>
		if (data & (1 << bit)){
    11a0:	24 2f       	mov	r18, r20
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	09 2e       	mov	r0, r25
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <bit_index+0x14>
    11a8:	35 95       	asr	r19
    11aa:	27 95       	ror	r18
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <bit_index+0x10>
    11b0:	20 ff       	sbrs	r18, 0
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <bit_index+0x26>
			if (state_index == -1){
    11b4:	8f 3f       	cpi	r24, 0xFF	; 255
    11b6:	11 f4       	brne	.+4      	; 0x11bc <bit_index+0x24>
				state_index = bit;
    11b8:	89 2f       	mov	r24, r25
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <bit_index+0x26>
			}
			else{
				// if state_index is already set, it means that there are more than one non zero bit in the sample
				// it is considered invalid state
				state_index = -2;
    11bc:	8e ef       	ldi	r24, 0xFE	; 254
	}
}

int8_t bit_index(uint8_t data){
	int8_t state_index = -1;
	for (uint8_t bit = 0; bit < 5; bit++){
    11be:	9f 5f       	subi	r25, 0xFF	; 255
    11c0:	95 30       	cpi	r25, 0x05	; 5
    11c2:	70 f3       	brcs	.-36     	; 0x11a0 <bit_index+0x8>
				state_index = -2;
			}
		}
	}
	return state_index;
}
    11c4:	08 95       	ret

000011c6 <process_sample>:

void process_sample(uint8_t data, const config_t* config, uint8_t* release_out, float* speed_out_normalized){
    11c6:	4f 92       	push	r4
    11c8:	5f 92       	push	r5
    11ca:	6f 92       	push	r6
    11cc:	7f 92       	push	r7
    11ce:	8f 92       	push	r8
    11d0:	9f 92       	push	r9
    11d2:	af 92       	push	r10
    11d4:	bf 92       	push	r11
    11d6:	cf 92       	push	r12
    11d8:	df 92       	push	r13
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	c8 2f       	mov	r28, r24
    11e6:	5b 01       	movw	r10, r22
    11e8:	7a 01       	movw	r14, r20
    11ea:	89 01       	movw	r16, r18
	//static uint16_t uncertain_steps = 0;

	static float target_speed_normalized = 0;

	
	if ((data >> 5) == 0b010){
    11ec:	82 95       	swap	r24
    11ee:	86 95       	lsr	r24
    11f0:	87 70       	andi	r24, 0x07	; 7
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <process_sample+0x32>
    11f6:	53 c1       	rjmp	.+678    	; 0x149e <process_sample+0x2d8>
		if (data != prev_state){
    11f8:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <prev_state.2001>
    11fc:	c8 17       	cp	r28, r24
    11fe:	09 f4       	brne	.+2      	; 0x1202 <process_sample+0x3c>
    1200:	89 c0       	rjmp	.+274    	; 0x1314 <process_sample+0x14e>
			if (state_rep < config->valid_sample_timeout){
    1202:	fb 01       	movw	r30, r22
    1204:	20 81       	ld	r18, Z
    1206:	31 81       	ldd	r19, Z+1	; 0x01
    1208:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <state_rep.2002>
    120c:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <state_rep.2002+0x1>
    1210:	82 17       	cp	r24, r18
    1212:	93 07       	cpc	r25, r19
    1214:	08 f0       	brcs	.+2      	; 0x1218 <process_sample+0x52>
    1216:	53 c0       	rjmp	.+166    	; 0x12be <process_sample+0xf8>
				//if high frequency samples are being received
				transmit_binary(data, 5);
    1218:	cc 2e       	mov	r12, r28
    121a:	d1 2c       	mov	r13, r1
    121c:	65 e0       	ldi	r22, 0x05	; 5
    121e:	c6 01       	movw	r24, r12
    1220:	0e 94 9b 08 	call	0x1136	; 0x1136 <transmit_binary>
				USART_transmit('\n');
    1224:	8a e0       	ldi	r24, 0x0A	; 10
    1226:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_transmit>
				
				int8_t state_index = bit_index(data);
    122a:	8c 2f       	mov	r24, r28
    122c:	0e 94 cc 08 	call	0x1198	; 0x1198 <bit_index>
				if (state_index >= 0){
    1230:	88 23       	and	r24, r24
    1232:	b4 f1       	brlt	.+108    	; 0x12a0 <process_sample+0xda>
					//uncertain_steps = 0;
					//target_speed_normalized = config->speeds[state_index];
					// map from 0-4 to -1 to 1
					target_speed_normalized = (float)state_index / 2.0f - 1.0f;
    1234:	68 2f       	mov	r22, r24
    1236:	88 0f       	add	r24, r24
    1238:	77 0b       	sbc	r23, r23
    123a:	88 0b       	sbc	r24, r24
    123c:	99 0b       	sbc	r25, r25
    123e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__floatsisf>
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	5f e3       	ldi	r21, 0x3F	; 63
    1256:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    125a:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <__data_end>
    125e:	70 93 93 03 	sts	0x0393, r23	; 0x800393 <__data_end+0x1>
    1262:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <__data_end+0x2>
    1266:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <__data_end+0x3>
					*release_out = false;
    126a:	f7 01       	movw	r30, r14
    126c:	10 82       	st	Z, r1
					USART_print("Target speed: ");
    126e:	84 e2       	ldi	r24, 0x24	; 36
    1270:	93 e0       	ldi	r25, 0x03	; 3
    1272:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
					USART_print_int(target_speed_normalized, 10);
    1276:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <__data_end>
    127a:	70 91 93 03 	lds	r23, 0x0393	; 0x800393 <__data_end+0x1>
    127e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <__data_end+0x2>
    1282:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <__data_end+0x3>
    1286:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fixsfsi>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	6a e0       	ldi	r22, 0x0A	; 10
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	0e 94 8b 00 	call	0x116	; 0x116 <USART_print_int>
					USART_print("\n");
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	93 e0       	ldi	r25, 0x03	; 3
    129a:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
    129e:	33 c0       	rjmp	.+102    	; 0x1306 <process_sample+0x140>
				}
				else if (state_index == -2){
    12a0:	8e 3f       	cpi	r24, 0xFE	; 254
    12a2:	89 f5       	brne	.+98     	; 0x1306 <process_sample+0x140>
					USART_print("None-control data: ");
    12a4:	83 e3       	ldi	r24, 0x33	; 51
    12a6:	93 e0       	ldi	r25, 0x03	; 3
    12a8:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
					transmit_binary(data, 5);
    12ac:	65 e0       	ldi	r22, 0x05	; 5
    12ae:	c6 01       	movw	r24, r12
    12b0:	0e 94 9b 08 	call	0x1136	; 0x1136 <transmit_binary>
					USART_print("\n");
    12b4:	84 e0       	ldi	r24, 0x04	; 4
    12b6:	93 e0       	ldi	r25, 0x03	; 3
    12b8:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
    12bc:	24 c0       	rjmp	.+72     	; 0x1306 <process_sample+0x140>
				}
			}
			else{		
				// samples are not frequent enough to be sure
				target_speed_normalized = 0.0f;
    12be:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <__data_end>
    12c2:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__data_end+0x1>
    12c6:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <__data_end+0x2>
    12ca:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <__data_end+0x3>
				if (*speed_out_normalized < 0.0001f && *speed_out_normalized > -0.0001f){
    12ce:	f8 01       	movw	r30, r16
    12d0:	40 80       	ld	r4, Z
    12d2:	51 80       	ldd	r5, Z+1	; 0x01
    12d4:	62 80       	ldd	r6, Z+2	; 0x02
    12d6:	73 80       	ldd	r7, Z+3	; 0x03
    12d8:	27 e1       	ldi	r18, 0x17	; 23
    12da:	37 eb       	ldi	r19, 0xB7	; 183
    12dc:	41 ed       	ldi	r20, 0xD1	; 209
    12de:	58 e3       	ldi	r21, 0x38	; 56
    12e0:	c3 01       	movw	r24, r6
    12e2:	b2 01       	movw	r22, r4
    12e4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	6c f4       	brge	.+26     	; 0x1306 <process_sample+0x140>
    12ec:	27 e1       	ldi	r18, 0x17	; 23
    12ee:	37 eb       	ldi	r19, 0xB7	; 183
    12f0:	41 ed       	ldi	r20, 0xD1	; 209
    12f2:	58 eb       	ldi	r21, 0xB8	; 184
    12f4:	c3 01       	movw	r24, r6
    12f6:	b2 01       	movw	r22, r4
    12f8:	0e 94 95 0c 	call	0x192a	; 0x192a <__gesf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	1c f4       	brge	.+6      	; 0x1306 <process_sample+0x140>
					// release if speed is already at 0
					*release_out = true;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	f7 01       	movw	r30, r14
    1304:	80 83       	st	Z, r24
				}*/
			}
			//if (data & 0b11111){
			//	prev_non_zero_state = data;
			//}
			prev_state = data;
    1306:	c0 93 98 03 	sts	0x0398, r28	; 0x800398 <prev_state.2001>
			state_rep = 0;
    130a:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <state_rep.2002+0x1>
    130e:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <state_rep.2002>
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <process_sample+0x160>
		}
		else{
			state_rep++;
    1314:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <state_rep.2002>
    1318:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <state_rep.2002+0x1>
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <state_rep.2002+0x1>
    1322:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <state_rep.2002>
		}

		if (target_speed_normalized != *speed_out_normalized){
    1326:	f8 01       	movw	r30, r16
    1328:	c0 80       	ld	r12, Z
    132a:	d1 80       	ldd	r13, Z+1	; 0x01
    132c:	e2 80       	ldd	r14, Z+2	; 0x02
    132e:	f3 80       	ldd	r15, Z+3	; 0x03
    1330:	40 90 92 03 	lds	r4, 0x0392	; 0x800392 <__data_end>
    1334:	50 90 93 03 	lds	r5, 0x0393	; 0x800393 <__data_end+0x1>
    1338:	60 90 94 03 	lds	r6, 0x0394	; 0x800394 <__data_end+0x2>
    133c:	70 90 95 03 	lds	r7, 0x0395	; 0x800395 <__data_end+0x3>
    1340:	a3 01       	movw	r20, r6
    1342:	92 01       	movw	r18, r4
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
    134c:	88 23       	and	r24, r24
    134e:	09 f4       	brne	.+2      	; 0x1352 <process_sample+0x18c>
    1350:	b5 c0       	rjmp	.+362    	; 0x14bc <process_sample+0x2f6>
			if (*speed_out_normalized > 0){
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	a9 01       	movw	r20, r18
    1358:	c7 01       	movw	r24, r14
    135a:	b6 01       	movw	r22, r12
    135c:	0e 94 95 0c 	call	0x192a	; 0x192a <__gesf2>
    1360:	18 16       	cp	r1, r24
    1362:	0c f0       	brlt	.+2      	; 0x1366 <process_sample+0x1a0>
    1364:	4e c0       	rjmp	.+156    	; 0x1402 <process_sample+0x23c>
				if (target_speed_normalized > *speed_out_normalized){
    1366:	a3 01       	movw	r20, r6
    1368:	92 01       	movw	r18, r4
    136a:	c7 01       	movw	r24, r14
    136c:	b6 01       	movw	r22, r12
    136e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
    1372:	88 23       	and	r24, r24
    1374:	1c f5       	brge	.+70     	; 0x13bc <process_sample+0x1f6>
					if (target_speed_normalized - *speed_out_normalized < config->step_up){
    1376:	a7 01       	movw	r20, r14
    1378:	96 01       	movw	r18, r12
    137a:	c3 01       	movw	r24, r6
    137c:	b2 01       	movw	r22, r4
    137e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    1382:	f5 01       	movw	r30, r10
    1384:	82 8c       	ldd	r8, Z+26	; 0x1a
    1386:	93 8c       	ldd	r9, Z+27	; 0x1b
    1388:	a4 8c       	ldd	r10, Z+28	; 0x1c
    138a:	b5 8c       	ldd	r11, Z+29	; 0x1d
    138c:	a5 01       	movw	r20, r10
    138e:	94 01       	movw	r18, r8
    1390:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
    1394:	88 23       	and	r24, r24
    1396:	34 f4       	brge	.+12     	; 0x13a4 <process_sample+0x1de>
						*speed_out_normalized = target_speed_normalized;
    1398:	f8 01       	movw	r30, r16
    139a:	40 82       	st	Z, r4
    139c:	51 82       	std	Z+1, r5	; 0x01
    139e:	62 82       	std	Z+2, r6	; 0x02
    13a0:	73 82       	std	Z+3, r7	; 0x03
    13a2:	8c c0       	rjmp	.+280    	; 0x14bc <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized += config->step_up;
    13a4:	a5 01       	movw	r20, r10
    13a6:	94 01       	movw	r18, r8
    13a8:	c7 01       	movw	r24, r14
    13aa:	b6 01       	movw	r22, r12
    13ac:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
    13b0:	f8 01       	movw	r30, r16
    13b2:	60 83       	st	Z, r22
    13b4:	71 83       	std	Z+1, r23	; 0x01
    13b6:	82 83       	std	Z+2, r24	; 0x02
    13b8:	93 83       	std	Z+3, r25	; 0x03
    13ba:	80 c0       	rjmp	.+256    	; 0x14bc <process_sample+0x2f6>
					}
				}
				else{
					if (*speed_out_normalized - target_speed_normalized < config->step_down){
    13bc:	a3 01       	movw	r20, r6
    13be:	92 01       	movw	r18, r4
    13c0:	c7 01       	movw	r24, r14
    13c2:	b6 01       	movw	r22, r12
    13c4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    13c8:	f5 01       	movw	r30, r10
    13ca:	86 8c       	ldd	r8, Z+30	; 0x1e
    13cc:	97 8c       	ldd	r9, Z+31	; 0x1f
    13ce:	a0 a0       	ldd	r10, Z+32	; 0x20
    13d0:	b1 a0       	ldd	r11, Z+33	; 0x21
    13d2:	a5 01       	movw	r20, r10
    13d4:	94 01       	movw	r18, r8
    13d6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
    13da:	88 23       	and	r24, r24
    13dc:	34 f4       	brge	.+12     	; 0x13ea <process_sample+0x224>
						*speed_out_normalized = target_speed_normalized;
    13de:	f8 01       	movw	r30, r16
    13e0:	40 82       	st	Z, r4
    13e2:	51 82       	std	Z+1, r5	; 0x01
    13e4:	62 82       	std	Z+2, r6	; 0x02
    13e6:	73 82       	std	Z+3, r7	; 0x03
    13e8:	69 c0       	rjmp	.+210    	; 0x14bc <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized -= config->step_down;
    13ea:	a5 01       	movw	r20, r10
    13ec:	94 01       	movw	r18, r8
    13ee:	c7 01       	movw	r24, r14
    13f0:	b6 01       	movw	r22, r12
    13f2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    13f6:	f8 01       	movw	r30, r16
    13f8:	60 83       	st	Z, r22
    13fa:	71 83       	std	Z+1, r23	; 0x01
    13fc:	82 83       	std	Z+2, r24	; 0x02
    13fe:	93 83       	std	Z+3, r25	; 0x03
    1400:	5d c0       	rjmp	.+186    	; 0x14bc <process_sample+0x2f6>
					}
				}
			}
			else{
				if (target_speed_normalized > *speed_out_normalized){
    1402:	a3 01       	movw	r20, r6
    1404:	92 01       	movw	r18, r4
    1406:	c7 01       	movw	r24, r14
    1408:	b6 01       	movw	r22, r12
    140a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
    140e:	88 23       	and	r24, r24
    1410:	1c f5       	brge	.+70     	; 0x1458 <process_sample+0x292>
					if (target_speed_normalized - *speed_out_normalized < config->step_down){
    1412:	a7 01       	movw	r20, r14
    1414:	96 01       	movw	r18, r12
    1416:	c3 01       	movw	r24, r6
    1418:	b2 01       	movw	r22, r4
    141a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    141e:	f5 01       	movw	r30, r10
    1420:	86 8c       	ldd	r8, Z+30	; 0x1e
    1422:	97 8c       	ldd	r9, Z+31	; 0x1f
    1424:	a0 a0       	ldd	r10, Z+32	; 0x20
    1426:	b1 a0       	ldd	r11, Z+33	; 0x21
    1428:	a5 01       	movw	r20, r10
    142a:	94 01       	movw	r18, r8
    142c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
    1430:	88 23       	and	r24, r24
    1432:	34 f4       	brge	.+12     	; 0x1440 <process_sample+0x27a>
						*speed_out_normalized = target_speed_normalized;
    1434:	f8 01       	movw	r30, r16
    1436:	40 82       	st	Z, r4
    1438:	51 82       	std	Z+1, r5	; 0x01
    143a:	62 82       	std	Z+2, r6	; 0x02
    143c:	73 82       	std	Z+3, r7	; 0x03
    143e:	3e c0       	rjmp	.+124    	; 0x14bc <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized += config->step_down;
    1440:	a5 01       	movw	r20, r10
    1442:	94 01       	movw	r18, r8
    1444:	c7 01       	movw	r24, r14
    1446:	b6 01       	movw	r22, r12
    1448:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
    144c:	f8 01       	movw	r30, r16
    144e:	60 83       	st	Z, r22
    1450:	71 83       	std	Z+1, r23	; 0x01
    1452:	82 83       	std	Z+2, r24	; 0x02
    1454:	93 83       	std	Z+3, r25	; 0x03
    1456:	32 c0       	rjmp	.+100    	; 0x14bc <process_sample+0x2f6>
					}
				}
				else{
					if (*speed_out_normalized - target_speed_normalized < config->step_up){
    1458:	a3 01       	movw	r20, r6
    145a:	92 01       	movw	r18, r4
    145c:	c7 01       	movw	r24, r14
    145e:	b6 01       	movw	r22, r12
    1460:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    1464:	f5 01       	movw	r30, r10
    1466:	82 8c       	ldd	r8, Z+26	; 0x1a
    1468:	93 8c       	ldd	r9, Z+27	; 0x1b
    146a:	a4 8c       	ldd	r10, Z+28	; 0x1c
    146c:	b5 8c       	ldd	r11, Z+29	; 0x1d
    146e:	a5 01       	movw	r20, r10
    1470:	94 01       	movw	r18, r8
    1472:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__cmpsf2>
    1476:	88 23       	and	r24, r24
    1478:	34 f4       	brge	.+12     	; 0x1486 <process_sample+0x2c0>
						*speed_out_normalized = target_speed_normalized;
    147a:	f8 01       	movw	r30, r16
    147c:	40 82       	st	Z, r4
    147e:	51 82       	std	Z+1, r5	; 0x01
    1480:	62 82       	std	Z+2, r6	; 0x02
    1482:	73 82       	std	Z+3, r7	; 0x03
    1484:	1b c0       	rjmp	.+54     	; 0x14bc <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized -= config->step_up;
    1486:	a5 01       	movw	r20, r10
    1488:	94 01       	movw	r18, r8
    148a:	c7 01       	movw	r24, r14
    148c:	b6 01       	movw	r22, r12
    148e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
    1492:	f8 01       	movw	r30, r16
    1494:	60 83       	st	Z, r22
    1496:	71 83       	std	Z+1, r23	; 0x01
    1498:	82 83       	std	Z+2, r24	; 0x02
    149a:	93 83       	std	Z+3, r25	; 0x03
    149c:	0f c0       	rjmp	.+30     	; 0x14bc <process_sample+0x2f6>
				}
			}
		}
	}
	else{
		*release_out = true;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	fa 01       	movw	r30, r20
    14a2:	80 83       	st	Z, r24
		target_speed_normalized = 0.0f;
    14a4:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <__data_end>
    14a8:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__data_end+0x1>
    14ac:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <__data_end+0x2>
    14b0:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <__data_end+0x3>
		USART_print("Bad data\n");
    14b4:	87 e4       	ldi	r24, 0x47	; 71
    14b6:	93 e0       	ldi	r25, 0x03	; 3
    14b8:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	}
}
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	9f 90       	pop	r9
    14d0:	8f 90       	pop	r8
    14d2:	7f 90       	pop	r7
    14d4:	6f 90       	pop	r6
    14d6:	5f 90       	pop	r5
    14d8:	4f 90       	pop	r4
    14da:	08 95       	ret

000014dc <main>:

int main(void){
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	a8 97       	sbiw	r28, 0x28	; 40
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
	// default config
	config_t config = {
    14f0:	82 e2       	ldi	r24, 0x22	; 34
    14f2:	e0 e0       	ldi	r30, 0x00	; 0
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
    14f6:	de 01       	movw	r26, r28
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	01 90       	ld	r0, Z+
    14fc:	0d 92       	st	X+, r0
    14fe:	8a 95       	dec	r24
    1500:	e1 f7       	brne	.-8      	; 0x14fa <main+0x1e>
		.release_position_b = 90,
		.step_up = 0.05f,
		.step_down = 0.01f
	};
	
	USART_init(MYUBRR);
    1502:	80 e1       	ldi	r24, 0x10	; 16
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_init>
	
	// try to load config from EEPROM
	uint8_t result = config_load(&config);
    150a:	ce 01       	movw	r24, r28
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	0e 94 a4 02 	call	0x548	; 0x548 <config_load>
	if (result){
    1512:	88 23       	and	r24, r24
    1514:	29 f0       	breq	.+10     	; 0x1520 <main+0x44>
		USART_print("Config loaded\n");
    1516:	81 e5       	ldi	r24, 0x51	; 81
    1518:	93 e0       	ldi	r25, 0x03	; 3
    151a:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <main+0x4c>
	}
	else{
		USART_print("Using default config\n");
    1520:	80 e6       	ldi	r24, 0x60	; 96
    1522:	93 e0       	ldi	r25, 0x03	; 3
    1524:	0e 94 75 00 	call	0xea	; 0xea <USART_print>
	}
	config_print(&config);
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 05 02 	call	0x40a	; 0x40a <config_print>
		
	servo_init();
    1530:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <servo_init>
	software_serial_init();
    1534:	0e 94 44 01 	call	0x288	; 0x288 <software_serial_init>
	lcd_init();
    1538:	0e 94 20 04 	call	0x840	; 0x840 <lcd_init>
	buttons_init();
    153c:	0e 94 8b 04 	call	0x916	; 0x916 <buttons_init>
	
	float speed_normalized = 0;
    1540:	1b a2       	std	Y+35, r1	; 0x23
    1542:	1c a2       	std	Y+36, r1	; 0x24
    1544:	1d a2       	std	Y+37, r1	; 0x25
    1546:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t release = true;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	8f a3       	std	Y+39, r24	; 0x27
	uint8_t raw_sensor_data = 0;

	uint8_t mode = MODE_RUNNING;
    154c:	18 a6       	std	Y+40, r1	; 0x28
	lcd_init();
	buttons_init();
	
	float speed_normalized = 0;
	uint8_t release = true;
	uint8_t raw_sensor_data = 0;
    154e:	f1 2c       	mov	r15, r1
	uint8_t mode = MODE_RUNNING;
	
	// TODO: reset speed after timeout (in case sensor got disconnected)
	
    while (1){
		if (USART_avaliable()){
    1550:	0e 94 f6 00 	call	0x1ec	; 0x1ec <USART_avaliable>
    1554:	88 23       	and	r24, r24
    1556:	39 f0       	breq	.+14     	; 0x1566 <main+0x8a>
			char data = USART_read();
    1558:	0e 94 ef 00 	call	0x1de	; 0x1de <USART_read>
			process_serial(data, &config);
    155c:	be 01       	movw	r22, r28
    155e:	6f 5f       	subi	r22, 0xFF	; 255
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	0e 94 6f 08 	call	0x10de	; 0x10de <process_serial>
		}

		if (mode == MODE_RUNNING){
    1566:	88 a5       	ldd	r24, Y+40	; 0x28
    1568:	81 11       	cpse	r24, r1
    156a:	79 c0       	rjmp	.+242    	; 0x165e <main+0x182>
			if (software_serial_available()){
    156c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <software_serial_available>
    1570:	88 23       	and	r24, r24
    1572:	71 f0       	breq	.+28     	; 0x1590 <main+0xb4>
				uint8_t data = software_serial_read();
    1574:	0e 94 d5 01 	call	0x3aa	; 0x3aa <software_serial_read>
    1578:	f8 2e       	mov	r15, r24
				process_sample(data, &config, &release, &speed_normalized);
    157a:	9e 01       	movw	r18, r28
    157c:	2d 5d       	subi	r18, 0xDD	; 221
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
    1580:	ae 01       	movw	r20, r28
    1582:	49 5d       	subi	r20, 0xD9	; 217
    1584:	5f 4f       	sbci	r21, 0xFF	; 255
    1586:	be 01       	movw	r22, r28
    1588:	6f 5f       	subi	r22, 0xFF	; 255
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <process_sample>
				raw_sensor_data = data;
			}	
			
			if (release){
    1590:	8f a1       	ldd	r24, Y+39	; 0x27
    1592:	88 23       	and	r24, r24
    1594:	29 f0       	breq	.+10     	; 0x15a0 <main+0xc4>
				set_speed(config.release_position_a, config.release_position_b);
    1596:	69 8d       	ldd	r22, Y+25	; 0x19
    1598:	8f 89       	ldd	r24, Y+23	; 0x17
    159a:	0e 94 b6 04 	call	0x96c	; 0x96c <set_speed>
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <main+0xd4>
			}
			else{
				set_normalized_speed(&config, speed_normalized);
    15a0:	4b a1       	ldd	r20, Y+35	; 0x23
    15a2:	5c a1       	ldd	r21, Y+36	; 0x24
    15a4:	6d a1       	ldd	r22, Y+37	; 0x25
    15a6:	7e a1       	ldd	r23, Y+38	; 0x26
    15a8:	ce 01       	movw	r24, r28
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	0e 94 c1 04 	call	0x982	; 0x982 <set_normalized_speed>
			}

			lcd_set_cursor(0, 0);
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			for (int i = 4; i >= 0; i--){
    15b8:	04 e0       	ldi	r16, 0x04	; 4
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	15 c0       	rjmp	.+42     	; 0x15e8 <main+0x10c>
				if (raw_sensor_data & (1 << i)){
    15be:	8f 2d       	mov	r24, r15
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	00 2e       	mov	r0, r16
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <main+0xee>
    15c6:	95 95       	asr	r25
    15c8:	87 95       	ror	r24
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <main+0xea>
    15ce:	80 ff       	sbrs	r24, 0
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <main+0x100>
					lcd_print("#");
    15d2:	86 e7       	ldi	r24, 0x76	; 118
    15d4:	93 e0       	ldi	r25, 0x03	; 3
    15d6:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <main+0x108>
				}
				else{
					lcd_print("-");
    15dc:	82 eb       	ldi	r24, 0xB2	; 178
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			else{
				set_normalized_speed(&config, speed_normalized);
			}

			lcd_set_cursor(0, 0);
			for (int i = 4; i >= 0; i--){
    15e4:	01 50       	subi	r16, 0x01	; 1
    15e6:	11 09       	sbc	r17, r1
    15e8:	11 23       	and	r17, r17
    15ea:	4c f7       	brge	.-46     	; 0x15be <main+0xe2>
				}
				else{
					lcd_print("-");
				}
			}
			lcd_set_cursor(1, 0);
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	0e 94 80 04 	call	0x900	; 0x900 <lcd_set_cursor>
			lcd_print("Pos: ");
    15f4:	88 e7       	ldi	r24, 0x78	; 120
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			if (release){
    15fc:	8f a1       	ldd	r24, Y+39	; 0x27
    15fe:	88 23       	and	r24, r24
    1600:	29 f0       	breq	.+10     	; 0x160c <main+0x130>
				lcd_print("Release");
    1602:	8e e7       	ldi	r24, 0x7E	; 126
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    160a:	0a c0       	rjmp	.+20     	; 0x1620 <main+0x144>
			}
			else{
				lcd_print_float(speed_normalized);
    160c:	6b a1       	ldd	r22, Y+35	; 0x23
    160e:	7c a1       	ldd	r23, Y+36	; 0x24
    1610:	8d a1       	ldd	r24, Y+37	; 0x25
    1612:	9e a1       	ldd	r25, Y+38	; 0x26
    1614:	0e 94 a0 03 	call	0x740	; 0x740 <lcd_print_float>
				lcd_print("      ");
    1618:	84 ec       	ldi	r24, 0xC4	; 196
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
			}

			if (button_up() && button_down() && !button_ok()){
    1620:	0e 94 9e 04 	call	0x93c	; 0x93c <button_up>
    1624:	88 23       	and	r24, r24
    1626:	d9 f0       	breq	.+54     	; 0x165e <main+0x182>
    1628:	0e 94 a6 04 	call	0x94c	; 0x94c <button_down>
    162c:	88 23       	and	r24, r24
    162e:	b9 f0       	breq	.+46     	; 0x165e <main+0x182>
    1630:	0e 94 ad 04 	call	0x95a	; 0x95a <button_ok>
    1634:	81 11       	cpse	r24, r1
    1636:	13 c0       	rjmp	.+38     	; 0x165e <main+0x182>
				mode = MODE_SETUP;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	88 a7       	std	Y+40, r24	; 0x28
				lcd_clear();
    163c:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
				lcd_print("Setup mode");
    1640:	86 e8       	ldi	r24, 0x86	; 134
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	0e 94 75 03 	call	0x6ea	; 0x6ea <lcd_print>
    1648:	2f ef       	ldi	r18, 0xFF	; 255
    164a:	83 ed       	ldi	r24, 0xD3	; 211
    164c:	90 e3       	ldi	r25, 0x30	; 48
    164e:	21 50       	subi	r18, 0x01	; 1
    1650:	80 40       	sbci	r24, 0x00	; 0
    1652:	90 40       	sbci	r25, 0x00	; 0
    1654:	e1 f7       	brne	.-8      	; 0x164e <main+0x172>
    1656:	00 c0       	rjmp	.+0      	; 0x1658 <main+0x17c>
    1658:	00 00       	nop
				_delay_ms(1000);
				lcd_clear();
    165a:	0e 94 15 04 	call	0x82a	; 0x82a <lcd_clear>
			}
		}

		if (mode == MODE_SETUP){
    165e:	88 a5       	ldd	r24, Y+40	; 0x28
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	09 f0       	breq	.+2      	; 0x1666 <main+0x18a>
    1664:	75 cf       	rjmp	.-278    	; 0x1550 <main+0x74>
			setup_mode(&config, &mode);
    1666:	be 01       	movw	r22, r28
    1668:	68 5d       	subi	r22, 0xD8	; 216
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	0e 94 d3 05 	call	0xba6	; 0xba6 <setup_mode>
    1674:	6d cf       	rjmp	.-294    	; 0x1550 <main+0x74>

00001676 <__subsf3>:
    1676:	50 58       	subi	r21, 0x80	; 128

00001678 <__addsf3>:
    1678:	bb 27       	eor	r27, r27
    167a:	aa 27       	eor	r26, r26
    167c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__addsf3x>
    1680:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>
    1684:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    1688:	38 f0       	brcs	.+14     	; 0x1698 <__addsf3+0x20>
    168a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    168e:	20 f0       	brcs	.+8      	; 0x1698 <__addsf3+0x20>
    1690:	39 f4       	brne	.+14     	; 0x16a0 <__addsf3+0x28>
    1692:	9f 3f       	cpi	r25, 0xFF	; 255
    1694:	19 f4       	brne	.+6      	; 0x169c <__addsf3+0x24>
    1696:	26 f4       	brtc	.+8      	; 0x16a0 <__addsf3+0x28>
    1698:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__fp_nan>
    169c:	0e f4       	brtc	.+2      	; 0x16a0 <__addsf3+0x28>
    169e:	e0 95       	com	r30
    16a0:	e7 fb       	bst	r30, 7
    16a2:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_inf>

000016a6 <__addsf3x>:
    16a6:	e9 2f       	mov	r30, r25
    16a8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    16ac:	58 f3       	brcs	.-42     	; 0x1684 <__addsf3+0xc>
    16ae:	ba 17       	cp	r27, r26
    16b0:	62 07       	cpc	r22, r18
    16b2:	73 07       	cpc	r23, r19
    16b4:	84 07       	cpc	r24, r20
    16b6:	95 07       	cpc	r25, r21
    16b8:	20 f0       	brcs	.+8      	; 0x16c2 <__addsf3x+0x1c>
    16ba:	79 f4       	brne	.+30     	; 0x16da <__addsf3x+0x34>
    16bc:	a6 f5       	brtc	.+104    	; 0x1726 <__addsf3x+0x80>
    16be:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_zero>
    16c2:	0e f4       	brtc	.+2      	; 0x16c6 <__addsf3x+0x20>
    16c4:	e0 95       	com	r30
    16c6:	0b 2e       	mov	r0, r27
    16c8:	ba 2f       	mov	r27, r26
    16ca:	a0 2d       	mov	r26, r0
    16cc:	0b 01       	movw	r0, r22
    16ce:	b9 01       	movw	r22, r18
    16d0:	90 01       	movw	r18, r0
    16d2:	0c 01       	movw	r0, r24
    16d4:	ca 01       	movw	r24, r20
    16d6:	a0 01       	movw	r20, r0
    16d8:	11 24       	eor	r1, r1
    16da:	ff 27       	eor	r31, r31
    16dc:	59 1b       	sub	r21, r25
    16de:	99 f0       	breq	.+38     	; 0x1706 <__addsf3x+0x60>
    16e0:	59 3f       	cpi	r21, 0xF9	; 249
    16e2:	50 f4       	brcc	.+20     	; 0x16f8 <__addsf3x+0x52>
    16e4:	50 3e       	cpi	r21, 0xE0	; 224
    16e6:	68 f1       	brcs	.+90     	; 0x1742 <__addsf3x+0x9c>
    16e8:	1a 16       	cp	r1, r26
    16ea:	f0 40       	sbci	r31, 0x00	; 0
    16ec:	a2 2f       	mov	r26, r18
    16ee:	23 2f       	mov	r18, r19
    16f0:	34 2f       	mov	r19, r20
    16f2:	44 27       	eor	r20, r20
    16f4:	58 5f       	subi	r21, 0xF8	; 248
    16f6:	f3 cf       	rjmp	.-26     	; 0x16de <__addsf3x+0x38>
    16f8:	46 95       	lsr	r20
    16fa:	37 95       	ror	r19
    16fc:	27 95       	ror	r18
    16fe:	a7 95       	ror	r26
    1700:	f0 40       	sbci	r31, 0x00	; 0
    1702:	53 95       	inc	r21
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__addsf3x+0x52>
    1706:	7e f4       	brtc	.+30     	; 0x1726 <__addsf3x+0x80>
    1708:	1f 16       	cp	r1, r31
    170a:	ba 0b       	sbc	r27, r26
    170c:	62 0b       	sbc	r22, r18
    170e:	73 0b       	sbc	r23, r19
    1710:	84 0b       	sbc	r24, r20
    1712:	ba f0       	brmi	.+46     	; 0x1742 <__addsf3x+0x9c>
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	a1 f0       	breq	.+40     	; 0x1740 <__addsf3x+0x9a>
    1718:	ff 0f       	add	r31, r31
    171a:	bb 1f       	adc	r27, r27
    171c:	66 1f       	adc	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	88 1f       	adc	r24, r24
    1722:	c2 f7       	brpl	.-16     	; 0x1714 <__addsf3x+0x6e>
    1724:	0e c0       	rjmp	.+28     	; 0x1742 <__addsf3x+0x9c>
    1726:	ba 0f       	add	r27, r26
    1728:	62 1f       	adc	r22, r18
    172a:	73 1f       	adc	r23, r19
    172c:	84 1f       	adc	r24, r20
    172e:	48 f4       	brcc	.+18     	; 0x1742 <__addsf3x+0x9c>
    1730:	87 95       	ror	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f7 95       	ror	r31
    173a:	9e 3f       	cpi	r25, 0xFE	; 254
    173c:	08 f0       	brcs	.+2      	; 0x1740 <__addsf3x+0x9a>
    173e:	b0 cf       	rjmp	.-160    	; 0x16a0 <__addsf3+0x28>
    1740:	93 95       	inc	r25
    1742:	88 0f       	add	r24, r24
    1744:	08 f0       	brcs	.+2      	; 0x1748 <__addsf3x+0xa2>
    1746:	99 27       	eor	r25, r25
    1748:	ee 0f       	add	r30, r30
    174a:	97 95       	ror	r25
    174c:	87 95       	ror	r24
    174e:	08 95       	ret

00001750 <__cmpsf2>:
    1750:	0e 94 20 0c 	call	0x1840	; 0x1840 <__fp_cmp>
    1754:	08 f4       	brcc	.+2      	; 0x1758 <__cmpsf2+0x8>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	08 95       	ret

0000175a <__fixsfsi>:
    175a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__fixunssfsi>
    175e:	68 94       	set
    1760:	b1 11       	cpse	r27, r1
    1762:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    1766:	08 95       	ret

00001768 <__fixunssfsi>:
    1768:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_splitA>
    176c:	88 f0       	brcs	.+34     	; 0x1790 <__fixunssfsi+0x28>
    176e:	9f 57       	subi	r25, 0x7F	; 127
    1770:	98 f0       	brcs	.+38     	; 0x1798 <__fixunssfsi+0x30>
    1772:	b9 2f       	mov	r27, r25
    1774:	99 27       	eor	r25, r25
    1776:	b7 51       	subi	r27, 0x17	; 23
    1778:	b0 f0       	brcs	.+44     	; 0x17a6 <__fixunssfsi+0x3e>
    177a:	e1 f0       	breq	.+56     	; 0x17b4 <__fixunssfsi+0x4c>
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	1a f0       	brmi	.+6      	; 0x178c <__fixunssfsi+0x24>
    1786:	ba 95       	dec	r27
    1788:	c9 f7       	brne	.-14     	; 0x177c <__fixunssfsi+0x14>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <__fixunssfsi+0x4c>
    178c:	b1 30       	cpi	r27, 0x01	; 1
    178e:	91 f0       	breq	.+36     	; 0x17b4 <__fixunssfsi+0x4c>
    1790:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_zero>
    1794:	b1 e0       	ldi	r27, 0x01	; 1
    1796:	08 95       	ret
    1798:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_zero>
    179c:	67 2f       	mov	r22, r23
    179e:	78 2f       	mov	r23, r24
    17a0:	88 27       	eor	r24, r24
    17a2:	b8 5f       	subi	r27, 0xF8	; 248
    17a4:	39 f0       	breq	.+14     	; 0x17b4 <__fixunssfsi+0x4c>
    17a6:	b9 3f       	cpi	r27, 0xF9	; 249
    17a8:	cc f3       	brlt	.-14     	; 0x179c <__fixunssfsi+0x34>
    17aa:	86 95       	lsr	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b3 95       	inc	r27
    17b2:	d9 f7       	brne	.-10     	; 0x17aa <__fixunssfsi+0x42>
    17b4:	3e f4       	brtc	.+14     	; 0x17c4 <__fixunssfsi+0x5c>
    17b6:	90 95       	com	r25
    17b8:	80 95       	com	r24
    17ba:	70 95       	com	r23
    17bc:	61 95       	neg	r22
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	8f 4f       	sbci	r24, 0xFF	; 255
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	08 95       	ret

000017c6 <__floatunsisf>:
    17c6:	e8 94       	clt
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <__floatsisf+0x12>

000017ca <__floatsisf>:
    17ca:	97 fb       	bst	r25, 7
    17cc:	3e f4       	brtc	.+14     	; 0x17dc <__floatsisf+0x12>
    17ce:	90 95       	com	r25
    17d0:	80 95       	com	r24
    17d2:	70 95       	com	r23
    17d4:	61 95       	neg	r22
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	99 23       	and	r25, r25
    17de:	a9 f0       	breq	.+42     	; 0x180a <__floatsisf+0x40>
    17e0:	f9 2f       	mov	r31, r25
    17e2:	96 e9       	ldi	r25, 0x96	; 150
    17e4:	bb 27       	eor	r27, r27
    17e6:	93 95       	inc	r25
    17e8:	f6 95       	lsr	r31
    17ea:	87 95       	ror	r24
    17ec:	77 95       	ror	r23
    17ee:	67 95       	ror	r22
    17f0:	b7 95       	ror	r27
    17f2:	f1 11       	cpse	r31, r1
    17f4:	f8 cf       	rjmp	.-16     	; 0x17e6 <__floatsisf+0x1c>
    17f6:	fa f4       	brpl	.+62     	; 0x1836 <__floatsisf+0x6c>
    17f8:	bb 0f       	add	r27, r27
    17fa:	11 f4       	brne	.+4      	; 0x1800 <__floatsisf+0x36>
    17fc:	60 ff       	sbrs	r22, 0
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <__floatsisf+0x6c>
    1800:	6f 5f       	subi	r22, 0xFF	; 255
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	16 c0       	rjmp	.+44     	; 0x1836 <__floatsisf+0x6c>
    180a:	88 23       	and	r24, r24
    180c:	11 f0       	breq	.+4      	; 0x1812 <__floatsisf+0x48>
    180e:	96 e9       	ldi	r25, 0x96	; 150
    1810:	11 c0       	rjmp	.+34     	; 0x1834 <__floatsisf+0x6a>
    1812:	77 23       	and	r23, r23
    1814:	21 f0       	breq	.+8      	; 0x181e <__floatsisf+0x54>
    1816:	9e e8       	ldi	r25, 0x8E	; 142
    1818:	87 2f       	mov	r24, r23
    181a:	76 2f       	mov	r23, r22
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <__floatsisf+0x5e>
    181e:	66 23       	and	r22, r22
    1820:	71 f0       	breq	.+28     	; 0x183e <__floatsisf+0x74>
    1822:	96 e8       	ldi	r25, 0x86	; 134
    1824:	86 2f       	mov	r24, r22
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	2a f0       	brmi	.+10     	; 0x1836 <__floatsisf+0x6c>
    182c:	9a 95       	dec	r25
    182e:	66 0f       	add	r22, r22
    1830:	77 1f       	adc	r23, r23
    1832:	88 1f       	adc	r24, r24
    1834:	da f7       	brpl	.-10     	; 0x182c <__floatsisf+0x62>
    1836:	88 0f       	add	r24, r24
    1838:	96 95       	lsr	r25
    183a:	87 95       	ror	r24
    183c:	97 f9       	bld	r25, 7
    183e:	08 95       	ret

00001840 <__fp_cmp>:
    1840:	99 0f       	add	r25, r25
    1842:	00 08       	sbc	r0, r0
    1844:	55 0f       	add	r21, r21
    1846:	aa 0b       	sbc	r26, r26
    1848:	e0 e8       	ldi	r30, 0x80	; 128
    184a:	fe ef       	ldi	r31, 0xFE	; 254
    184c:	16 16       	cp	r1, r22
    184e:	17 06       	cpc	r1, r23
    1850:	e8 07       	cpc	r30, r24
    1852:	f9 07       	cpc	r31, r25
    1854:	c0 f0       	brcs	.+48     	; 0x1886 <__fp_cmp+0x46>
    1856:	12 16       	cp	r1, r18
    1858:	13 06       	cpc	r1, r19
    185a:	e4 07       	cpc	r30, r20
    185c:	f5 07       	cpc	r31, r21
    185e:	98 f0       	brcs	.+38     	; 0x1886 <__fp_cmp+0x46>
    1860:	62 1b       	sub	r22, r18
    1862:	73 0b       	sbc	r23, r19
    1864:	84 0b       	sbc	r24, r20
    1866:	95 0b       	sbc	r25, r21
    1868:	39 f4       	brne	.+14     	; 0x1878 <__fp_cmp+0x38>
    186a:	0a 26       	eor	r0, r26
    186c:	61 f0       	breq	.+24     	; 0x1886 <__fp_cmp+0x46>
    186e:	23 2b       	or	r18, r19
    1870:	24 2b       	or	r18, r20
    1872:	25 2b       	or	r18, r21
    1874:	21 f4       	brne	.+8      	; 0x187e <__fp_cmp+0x3e>
    1876:	08 95       	ret
    1878:	0a 26       	eor	r0, r26
    187a:	09 f4       	brne	.+2      	; 0x187e <__fp_cmp+0x3e>
    187c:	a1 40       	sbci	r26, 0x01	; 1
    187e:	a6 95       	lsr	r26
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	81 1d       	adc	r24, r1
    1884:	81 1d       	adc	r24, r1
    1886:	08 95       	ret

00001888 <__fp_inf>:
    1888:	97 f9       	bld	r25, 7
    188a:	9f 67       	ori	r25, 0x7F	; 127
    188c:	80 e8       	ldi	r24, 0x80	; 128
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	08 95       	ret

00001894 <__fp_nan>:
    1894:	9f ef       	ldi	r25, 0xFF	; 255
    1896:	80 ec       	ldi	r24, 0xC0	; 192
    1898:	08 95       	ret

0000189a <__fp_pscA>:
    189a:	00 24       	eor	r0, r0
    189c:	0a 94       	dec	r0
    189e:	16 16       	cp	r1, r22
    18a0:	17 06       	cpc	r1, r23
    18a2:	18 06       	cpc	r1, r24
    18a4:	09 06       	cpc	r0, r25
    18a6:	08 95       	ret

000018a8 <__fp_pscB>:
    18a8:	00 24       	eor	r0, r0
    18aa:	0a 94       	dec	r0
    18ac:	12 16       	cp	r1, r18
    18ae:	13 06       	cpc	r1, r19
    18b0:	14 06       	cpc	r1, r20
    18b2:	05 06       	cpc	r0, r21
    18b4:	08 95       	ret

000018b6 <__fp_round>:
    18b6:	09 2e       	mov	r0, r25
    18b8:	03 94       	inc	r0
    18ba:	00 0c       	add	r0, r0
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <__fp_round+0xc>
    18be:	88 23       	and	r24, r24
    18c0:	52 f0       	brmi	.+20     	; 0x18d6 <__fp_round+0x20>
    18c2:	bb 0f       	add	r27, r27
    18c4:	40 f4       	brcc	.+16     	; 0x18d6 <__fp_round+0x20>
    18c6:	bf 2b       	or	r27, r31
    18c8:	11 f4       	brne	.+4      	; 0x18ce <__fp_round+0x18>
    18ca:	60 ff       	sbrs	r22, 0
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <__fp_round+0x20>
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	8f 4f       	sbci	r24, 0xFF	; 255
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	08 95       	ret

000018d8 <__fp_split3>:
    18d8:	57 fd       	sbrc	r21, 7
    18da:	90 58       	subi	r25, 0x80	; 128
    18dc:	44 0f       	add	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	59 f0       	breq	.+22     	; 0x18f8 <__fp_splitA+0x10>
    18e2:	5f 3f       	cpi	r21, 0xFF	; 255
    18e4:	71 f0       	breq	.+28     	; 0x1902 <__fp_splitA+0x1a>
    18e6:	47 95       	ror	r20

000018e8 <__fp_splitA>:
    18e8:	88 0f       	add	r24, r24
    18ea:	97 fb       	bst	r25, 7
    18ec:	99 1f       	adc	r25, r25
    18ee:	61 f0       	breq	.+24     	; 0x1908 <__fp_splitA+0x20>
    18f0:	9f 3f       	cpi	r25, 0xFF	; 255
    18f2:	79 f0       	breq	.+30     	; 0x1912 <__fp_splitA+0x2a>
    18f4:	87 95       	ror	r24
    18f6:	08 95       	ret
    18f8:	12 16       	cp	r1, r18
    18fa:	13 06       	cpc	r1, r19
    18fc:	14 06       	cpc	r1, r20
    18fe:	55 1f       	adc	r21, r21
    1900:	f2 cf       	rjmp	.-28     	; 0x18e6 <__fp_split3+0xe>
    1902:	46 95       	lsr	r20
    1904:	f1 df       	rcall	.-30     	; 0x18e8 <__fp_splitA>
    1906:	08 c0       	rjmp	.+16     	; 0x1918 <__fp_splitA+0x30>
    1908:	16 16       	cp	r1, r22
    190a:	17 06       	cpc	r1, r23
    190c:	18 06       	cpc	r1, r24
    190e:	99 1f       	adc	r25, r25
    1910:	f1 cf       	rjmp	.-30     	; 0x18f4 <__fp_splitA+0xc>
    1912:	86 95       	lsr	r24
    1914:	71 05       	cpc	r23, r1
    1916:	61 05       	cpc	r22, r1
    1918:	08 94       	sec
    191a:	08 95       	ret

0000191c <__fp_zero>:
    191c:	e8 94       	clt

0000191e <__fp_szero>:
    191e:	bb 27       	eor	r27, r27
    1920:	66 27       	eor	r22, r22
    1922:	77 27       	eor	r23, r23
    1924:	cb 01       	movw	r24, r22
    1926:	97 f9       	bld	r25, 7
    1928:	08 95       	ret

0000192a <__gesf2>:
    192a:	0e 94 20 0c 	call	0x1840	; 0x1840 <__fp_cmp>
    192e:	08 f4       	brcc	.+2      	; 0x1932 <__gesf2+0x8>
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	08 95       	ret

00001934 <__mulsf3>:
    1934:	0e 94 ad 0c 	call	0x195a	; 0x195a <__mulsf3x>
    1938:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>
    193c:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    1940:	38 f0       	brcs	.+14     	; 0x1950 <__mulsf3+0x1c>
    1942:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    1946:	20 f0       	brcs	.+8      	; 0x1950 <__mulsf3+0x1c>
    1948:	95 23       	and	r25, r21
    194a:	11 f0       	breq	.+4      	; 0x1950 <__mulsf3+0x1c>
    194c:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_inf>
    1950:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__fp_nan>
    1954:	11 24       	eor	r1, r1
    1956:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>

0000195a <__mulsf3x>:
    195a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    195e:	70 f3       	brcs	.-36     	; 0x193c <__mulsf3+0x8>

00001960 <__mulsf3_pse>:
    1960:	95 9f       	mul	r25, r21
    1962:	c1 f3       	breq	.-16     	; 0x1954 <__mulsf3+0x20>
    1964:	95 0f       	add	r25, r21
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	55 1f       	adc	r21, r21
    196a:	62 9f       	mul	r22, r18
    196c:	f0 01       	movw	r30, r0
    196e:	72 9f       	mul	r23, r18
    1970:	bb 27       	eor	r27, r27
    1972:	f0 0d       	add	r31, r0
    1974:	b1 1d       	adc	r27, r1
    1976:	63 9f       	mul	r22, r19
    1978:	aa 27       	eor	r26, r26
    197a:	f0 0d       	add	r31, r0
    197c:	b1 1d       	adc	r27, r1
    197e:	aa 1f       	adc	r26, r26
    1980:	64 9f       	mul	r22, r20
    1982:	66 27       	eor	r22, r22
    1984:	b0 0d       	add	r27, r0
    1986:	a1 1d       	adc	r26, r1
    1988:	66 1f       	adc	r22, r22
    198a:	82 9f       	mul	r24, r18
    198c:	22 27       	eor	r18, r18
    198e:	b0 0d       	add	r27, r0
    1990:	a1 1d       	adc	r26, r1
    1992:	62 1f       	adc	r22, r18
    1994:	73 9f       	mul	r23, r19
    1996:	b0 0d       	add	r27, r0
    1998:	a1 1d       	adc	r26, r1
    199a:	62 1f       	adc	r22, r18
    199c:	83 9f       	mul	r24, r19
    199e:	a0 0d       	add	r26, r0
    19a0:	61 1d       	adc	r22, r1
    19a2:	22 1f       	adc	r18, r18
    19a4:	74 9f       	mul	r23, r20
    19a6:	33 27       	eor	r19, r19
    19a8:	a0 0d       	add	r26, r0
    19aa:	61 1d       	adc	r22, r1
    19ac:	23 1f       	adc	r18, r19
    19ae:	84 9f       	mul	r24, r20
    19b0:	60 0d       	add	r22, r0
    19b2:	21 1d       	adc	r18, r1
    19b4:	82 2f       	mov	r24, r18
    19b6:	76 2f       	mov	r23, r22
    19b8:	6a 2f       	mov	r22, r26
    19ba:	11 24       	eor	r1, r1
    19bc:	9f 57       	subi	r25, 0x7F	; 127
    19be:	50 40       	sbci	r21, 0x00	; 0
    19c0:	9a f0       	brmi	.+38     	; 0x19e8 <__mulsf3_pse+0x88>
    19c2:	f1 f0       	breq	.+60     	; 0x1a00 <__mulsf3_pse+0xa0>
    19c4:	88 23       	and	r24, r24
    19c6:	4a f0       	brmi	.+18     	; 0x19da <__mulsf3_pse+0x7a>
    19c8:	ee 0f       	add	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	bb 1f       	adc	r27, r27
    19ce:	66 1f       	adc	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	88 1f       	adc	r24, r24
    19d4:	91 50       	subi	r25, 0x01	; 1
    19d6:	50 40       	sbci	r21, 0x00	; 0
    19d8:	a9 f7       	brne	.-22     	; 0x19c4 <__mulsf3_pse+0x64>
    19da:	9e 3f       	cpi	r25, 0xFE	; 254
    19dc:	51 05       	cpc	r21, r1
    19de:	80 f0       	brcs	.+32     	; 0x1a00 <__mulsf3_pse+0xa0>
    19e0:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_inf>
    19e4:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    19e8:	5f 3f       	cpi	r21, 0xFF	; 255
    19ea:	e4 f3       	brlt	.-8      	; 0x19e4 <__mulsf3_pse+0x84>
    19ec:	98 3e       	cpi	r25, 0xE8	; 232
    19ee:	d4 f3       	brlt	.-12     	; 0x19e4 <__mulsf3_pse+0x84>
    19f0:	86 95       	lsr	r24
    19f2:	77 95       	ror	r23
    19f4:	67 95       	ror	r22
    19f6:	b7 95       	ror	r27
    19f8:	f7 95       	ror	r31
    19fa:	e7 95       	ror	r30
    19fc:	9f 5f       	subi	r25, 0xFF	; 255
    19fe:	c1 f7       	brne	.-16     	; 0x19f0 <__mulsf3_pse+0x90>
    1a00:	fe 2b       	or	r31, r30
    1a02:	88 0f       	add	r24, r24
    1a04:	91 1d       	adc	r25, r1
    1a06:	96 95       	lsr	r25
    1a08:	87 95       	ror	r24
    1a0a:	97 f9       	bld	r25, 7
    1a0c:	08 95       	ret

00001a0e <__udivmodsi4>:
    1a0e:	a1 e2       	ldi	r26, 0x21	; 33
    1a10:	1a 2e       	mov	r1, r26
    1a12:	aa 1b       	sub	r26, r26
    1a14:	bb 1b       	sub	r27, r27
    1a16:	fd 01       	movw	r30, r26
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <__udivmodsi4_ep>

00001a1a <__udivmodsi4_loop>:
    1a1a:	aa 1f       	adc	r26, r26
    1a1c:	bb 1f       	adc	r27, r27
    1a1e:	ee 1f       	adc	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	a2 17       	cp	r26, r18
    1a24:	b3 07       	cpc	r27, r19
    1a26:	e4 07       	cpc	r30, r20
    1a28:	f5 07       	cpc	r31, r21
    1a2a:	20 f0       	brcs	.+8      	; 0x1a34 <__udivmodsi4_ep>
    1a2c:	a2 1b       	sub	r26, r18
    1a2e:	b3 0b       	sbc	r27, r19
    1a30:	e4 0b       	sbc	r30, r20
    1a32:	f5 0b       	sbc	r31, r21

00001a34 <__udivmodsi4_ep>:
    1a34:	66 1f       	adc	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	1a 94       	dec	r1
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <__udivmodsi4_loop>
    1a40:	60 95       	com	r22
    1a42:	70 95       	com	r23
    1a44:	80 95       	com	r24
    1a46:	90 95       	com	r25
    1a48:	9b 01       	movw	r18, r22
    1a4a:	ac 01       	movw	r20, r24
    1a4c:	bd 01       	movw	r22, r26
    1a4e:	cf 01       	movw	r24, r30
    1a50:	08 95       	ret

00001a52 <__tablejump2__>:
    1a52:	ee 0f       	add	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	05 90       	lpm	r0, Z+
    1a58:	f4 91       	lpm	r31, Z
    1a5a:	e0 2d       	mov	r30, r0
    1a5c:	09 94       	ijmp

00001a5e <__umulhisi3>:
    1a5e:	a2 9f       	mul	r26, r18
    1a60:	b0 01       	movw	r22, r0
    1a62:	b3 9f       	mul	r27, r19
    1a64:	c0 01       	movw	r24, r0
    1a66:	a3 9f       	mul	r26, r19
    1a68:	70 0d       	add	r23, r0
    1a6a:	81 1d       	adc	r24, r1
    1a6c:	11 24       	eor	r1, r1
    1a6e:	91 1d       	adc	r25, r1
    1a70:	b2 9f       	mul	r27, r18
    1a72:	70 0d       	add	r23, r0
    1a74:	81 1d       	adc	r24, r1
    1a76:	11 24       	eor	r1, r1
    1a78:	91 1d       	adc	r25, r1
    1a7a:	08 95       	ret

00001a7c <atoi>:
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	88 27       	eor	r24, r24
    1a80:	99 27       	eor	r25, r25
    1a82:	e8 94       	clt
    1a84:	21 91       	ld	r18, Z+
    1a86:	20 32       	cpi	r18, 0x20	; 32
    1a88:	e9 f3       	breq	.-6      	; 0x1a84 <atoi+0x8>
    1a8a:	29 30       	cpi	r18, 0x09	; 9
    1a8c:	10 f0       	brcs	.+4      	; 0x1a92 <atoi+0x16>
    1a8e:	2e 30       	cpi	r18, 0x0E	; 14
    1a90:	c8 f3       	brcs	.-14     	; 0x1a84 <atoi+0x8>
    1a92:	2b 32       	cpi	r18, 0x2B	; 43
    1a94:	41 f0       	breq	.+16     	; 0x1aa6 <atoi+0x2a>
    1a96:	2d 32       	cpi	r18, 0x2D	; 45
    1a98:	39 f4       	brne	.+14     	; 0x1aa8 <atoi+0x2c>
    1a9a:	68 94       	set
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <atoi+0x2a>
    1a9e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__mulhi_const_10>
    1aa2:	82 0f       	add	r24, r18
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	21 91       	ld	r18, Z+
    1aa8:	20 53       	subi	r18, 0x30	; 48
    1aaa:	2a 30       	cpi	r18, 0x0A	; 10
    1aac:	c0 f3       	brcs	.-16     	; 0x1a9e <atoi+0x22>
    1aae:	1e f4       	brtc	.+6      	; 0x1ab6 <atoi+0x3a>
    1ab0:	90 95       	com	r25
    1ab2:	81 95       	neg	r24
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	08 95       	ret

00001ab8 <itoa>:
    1ab8:	45 32       	cpi	r20, 0x25	; 37
    1aba:	51 05       	cpc	r21, r1
    1abc:	20 f4       	brcc	.+8      	; 0x1ac6 <itoa+0xe>
    1abe:	42 30       	cpi	r20, 0x02	; 2
    1ac0:	10 f0       	brcs	.+4      	; 0x1ac6 <itoa+0xe>
    1ac2:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__itoa_ncheck>
    1ac6:	fb 01       	movw	r30, r22
    1ac8:	10 82       	st	Z, r1
    1aca:	cb 01       	movw	r24, r22
    1acc:	08 95       	ret

00001ace <__itoa_ncheck>:
    1ace:	bb 27       	eor	r27, r27
    1ad0:	4a 30       	cpi	r20, 0x0A	; 10
    1ad2:	31 f4       	brne	.+12     	; 0x1ae0 <__itoa_ncheck+0x12>
    1ad4:	99 23       	and	r25, r25
    1ad6:	22 f4       	brpl	.+8      	; 0x1ae0 <__itoa_ncheck+0x12>
    1ad8:	bd e2       	ldi	r27, 0x2D	; 45
    1ada:	90 95       	com	r25
    1adc:	81 95       	neg	r24
    1ade:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae0:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__utoa_common>

00001ae4 <__mulhi_const_10>:
    1ae4:	7a e0       	ldi	r23, 0x0A	; 10
    1ae6:	97 9f       	mul	r25, r23
    1ae8:	90 2d       	mov	r25, r0
    1aea:	87 9f       	mul	r24, r23
    1aec:	80 2d       	mov	r24, r0
    1aee:	91 0d       	add	r25, r1
    1af0:	11 24       	eor	r1, r1
    1af2:	08 95       	ret

00001af4 <__utoa_ncheck>:
    1af4:	bb 27       	eor	r27, r27

00001af6 <__utoa_common>:
    1af6:	fb 01       	movw	r30, r22
    1af8:	55 27       	eor	r21, r21
    1afa:	aa 27       	eor	r26, r26
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	aa 1f       	adc	r26, r26
    1b02:	a4 17       	cp	r26, r20
    1b04:	10 f0       	brcs	.+4      	; 0x1b0a <__utoa_common+0x14>
    1b06:	a4 1b       	sub	r26, r20
    1b08:	83 95       	inc	r24
    1b0a:	50 51       	subi	r21, 0x10	; 16
    1b0c:	b9 f7       	brne	.-18     	; 0x1afc <__utoa_common+0x6>
    1b0e:	a0 5d       	subi	r26, 0xD0	; 208
    1b10:	aa 33       	cpi	r26, 0x3A	; 58
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <__utoa_common+0x20>
    1b14:	a9 5d       	subi	r26, 0xD9	; 217
    1b16:	a1 93       	st	Z+, r26
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	79 f7       	brne	.-34     	; 0x1afa <__utoa_common+0x4>
    1b1c:	b1 11       	cpse	r27, r1
    1b1e:	b1 93       	st	Z+, r27
    1b20:	11 92       	st	Z+, r1
    1b22:	cb 01       	movw	r24, r22
    1b24:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <strrev>

00001b28 <sprintf>:
    1b28:	ae e0       	ldi	r26, 0x0E	; 14
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ea e9       	ldi	r30, 0x9A	; 154
    1b2e:	fd e0       	ldi	r31, 0x0D	; 13
    1b30:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__prologue_saves__+0x1c>
    1b34:	0d 89       	ldd	r16, Y+21	; 0x15
    1b36:	1e 89       	ldd	r17, Y+22	; 0x16
    1b38:	86 e0       	ldi	r24, 0x06	; 6
    1b3a:	8c 83       	std	Y+4, r24	; 0x04
    1b3c:	1a 83       	std	Y+2, r17	; 0x02
    1b3e:	09 83       	std	Y+1, r16	; 0x01
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	9f e7       	ldi	r25, 0x7F	; 127
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	ae 01       	movw	r20, r28
    1b4a:	47 5e       	subi	r20, 0xE7	; 231
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	6f 89       	ldd	r22, Y+23	; 0x17
    1b50:	78 8d       	ldd	r23, Y+24	; 0x18
    1b52:	ce 01       	movw	r24, r28
    1b54:	01 96       	adiw	r24, 0x01	; 1
    1b56:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <vfprintf>
    1b5a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b5c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b5e:	e0 0f       	add	r30, r16
    1b60:	f1 1f       	adc	r31, r17
    1b62:	10 82       	st	Z, r1
    1b64:	2e 96       	adiw	r28, 0x0e	; 14
    1b66:	e4 e0       	ldi	r30, 0x04	; 4
    1b68:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__epilogue_restores__+0x1c>

00001b6c <vfprintf>:
    1b6c:	ab e0       	ldi	r26, 0x0B	; 11
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ec eb       	ldi	r30, 0xBC	; 188
    1b72:	fd e0       	ldi	r31, 0x0D	; 13
    1b74:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__prologue_saves__>
    1b78:	6c 01       	movw	r12, r24
    1b7a:	7b 01       	movw	r14, r22
    1b7c:	8a 01       	movw	r16, r20
    1b7e:	fc 01       	movw	r30, r24
    1b80:	17 82       	std	Z+7, r1	; 0x07
    1b82:	16 82       	std	Z+6, r1	; 0x06
    1b84:	83 81       	ldd	r24, Z+3	; 0x03
    1b86:	81 ff       	sbrs	r24, 1
    1b88:	cc c1       	rjmp	.+920    	; 0x1f22 <vfprintf+0x3b6>
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	3c 01       	movw	r6, r24
    1b90:	f6 01       	movw	r30, r12
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	f7 01       	movw	r30, r14
    1b96:	93 fd       	sbrc	r25, 3
    1b98:	85 91       	lpm	r24, Z+
    1b9a:	93 ff       	sbrs	r25, 3
    1b9c:	81 91       	ld	r24, Z+
    1b9e:	7f 01       	movw	r14, r30
    1ba0:	88 23       	and	r24, r24
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <vfprintf+0x3a>
    1ba4:	ba c1       	rjmp	.+884    	; 0x1f1a <vfprintf+0x3ae>
    1ba6:	85 32       	cpi	r24, 0x25	; 37
    1ba8:	39 f4       	brne	.+14     	; 0x1bb8 <vfprintf+0x4c>
    1baa:	93 fd       	sbrc	r25, 3
    1bac:	85 91       	lpm	r24, Z+
    1bae:	93 ff       	sbrs	r25, 3
    1bb0:	81 91       	ld	r24, Z+
    1bb2:	7f 01       	movw	r14, r30
    1bb4:	85 32       	cpi	r24, 0x25	; 37
    1bb6:	29 f4       	brne	.+10     	; 0x1bc2 <vfprintf+0x56>
    1bb8:	b6 01       	movw	r22, r12
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1bc0:	e7 cf       	rjmp	.-50     	; 0x1b90 <vfprintf+0x24>
    1bc2:	91 2c       	mov	r9, r1
    1bc4:	21 2c       	mov	r2, r1
    1bc6:	31 2c       	mov	r3, r1
    1bc8:	ff e1       	ldi	r31, 0x1F	; 31
    1bca:	f3 15       	cp	r31, r3
    1bcc:	d8 f0       	brcs	.+54     	; 0x1c04 <vfprintf+0x98>
    1bce:	8b 32       	cpi	r24, 0x2B	; 43
    1bd0:	79 f0       	breq	.+30     	; 0x1bf0 <vfprintf+0x84>
    1bd2:	38 f4       	brcc	.+14     	; 0x1be2 <vfprintf+0x76>
    1bd4:	80 32       	cpi	r24, 0x20	; 32
    1bd6:	79 f0       	breq	.+30     	; 0x1bf6 <vfprintf+0x8a>
    1bd8:	83 32       	cpi	r24, 0x23	; 35
    1bda:	a1 f4       	brne	.+40     	; 0x1c04 <vfprintf+0x98>
    1bdc:	23 2d       	mov	r18, r3
    1bde:	20 61       	ori	r18, 0x10	; 16
    1be0:	1d c0       	rjmp	.+58     	; 0x1c1c <vfprintf+0xb0>
    1be2:	8d 32       	cpi	r24, 0x2D	; 45
    1be4:	61 f0       	breq	.+24     	; 0x1bfe <vfprintf+0x92>
    1be6:	80 33       	cpi	r24, 0x30	; 48
    1be8:	69 f4       	brne	.+26     	; 0x1c04 <vfprintf+0x98>
    1bea:	23 2d       	mov	r18, r3
    1bec:	21 60       	ori	r18, 0x01	; 1
    1bee:	16 c0       	rjmp	.+44     	; 0x1c1c <vfprintf+0xb0>
    1bf0:	83 2d       	mov	r24, r3
    1bf2:	82 60       	ori	r24, 0x02	; 2
    1bf4:	38 2e       	mov	r3, r24
    1bf6:	e3 2d       	mov	r30, r3
    1bf8:	e4 60       	ori	r30, 0x04	; 4
    1bfa:	3e 2e       	mov	r3, r30
    1bfc:	2a c0       	rjmp	.+84     	; 0x1c52 <vfprintf+0xe6>
    1bfe:	f3 2d       	mov	r31, r3
    1c00:	f8 60       	ori	r31, 0x08	; 8
    1c02:	1d c0       	rjmp	.+58     	; 0x1c3e <vfprintf+0xd2>
    1c04:	37 fc       	sbrc	r3, 7
    1c06:	2d c0       	rjmp	.+90     	; 0x1c62 <vfprintf+0xf6>
    1c08:	20 ed       	ldi	r18, 0xD0	; 208
    1c0a:	28 0f       	add	r18, r24
    1c0c:	2a 30       	cpi	r18, 0x0A	; 10
    1c0e:	40 f0       	brcs	.+16     	; 0x1c20 <vfprintf+0xb4>
    1c10:	8e 32       	cpi	r24, 0x2E	; 46
    1c12:	b9 f4       	brne	.+46     	; 0x1c42 <vfprintf+0xd6>
    1c14:	36 fc       	sbrc	r3, 6
    1c16:	81 c1       	rjmp	.+770    	; 0x1f1a <vfprintf+0x3ae>
    1c18:	23 2d       	mov	r18, r3
    1c1a:	20 64       	ori	r18, 0x40	; 64
    1c1c:	32 2e       	mov	r3, r18
    1c1e:	19 c0       	rjmp	.+50     	; 0x1c52 <vfprintf+0xe6>
    1c20:	36 fe       	sbrs	r3, 6
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0xc4>
    1c24:	8a e0       	ldi	r24, 0x0A	; 10
    1c26:	98 9e       	mul	r9, r24
    1c28:	20 0d       	add	r18, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	92 2e       	mov	r9, r18
    1c2e:	11 c0       	rjmp	.+34     	; 0x1c52 <vfprintf+0xe6>
    1c30:	ea e0       	ldi	r30, 0x0A	; 10
    1c32:	2e 9e       	mul	r2, r30
    1c34:	20 0d       	add	r18, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	22 2e       	mov	r2, r18
    1c3a:	f3 2d       	mov	r31, r3
    1c3c:	f0 62       	ori	r31, 0x20	; 32
    1c3e:	3f 2e       	mov	r3, r31
    1c40:	08 c0       	rjmp	.+16     	; 0x1c52 <vfprintf+0xe6>
    1c42:	8c 36       	cpi	r24, 0x6C	; 108
    1c44:	21 f4       	brne	.+8      	; 0x1c4e <vfprintf+0xe2>
    1c46:	83 2d       	mov	r24, r3
    1c48:	80 68       	ori	r24, 0x80	; 128
    1c4a:	38 2e       	mov	r3, r24
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <vfprintf+0xe6>
    1c4e:	88 36       	cpi	r24, 0x68	; 104
    1c50:	41 f4       	brne	.+16     	; 0x1c62 <vfprintf+0xf6>
    1c52:	f7 01       	movw	r30, r14
    1c54:	93 fd       	sbrc	r25, 3
    1c56:	85 91       	lpm	r24, Z+
    1c58:	93 ff       	sbrs	r25, 3
    1c5a:	81 91       	ld	r24, Z+
    1c5c:	7f 01       	movw	r14, r30
    1c5e:	81 11       	cpse	r24, r1
    1c60:	b3 cf       	rjmp	.-154    	; 0x1bc8 <vfprintf+0x5c>
    1c62:	98 2f       	mov	r25, r24
    1c64:	9f 7d       	andi	r25, 0xDF	; 223
    1c66:	95 54       	subi	r25, 0x45	; 69
    1c68:	93 30       	cpi	r25, 0x03	; 3
    1c6a:	28 f4       	brcc	.+10     	; 0x1c76 <vfprintf+0x10a>
    1c6c:	0c 5f       	subi	r16, 0xFC	; 252
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	9f e3       	ldi	r25, 0x3F	; 63
    1c72:	99 83       	std	Y+1, r25	; 0x01
    1c74:	0d c0       	rjmp	.+26     	; 0x1c90 <vfprintf+0x124>
    1c76:	83 36       	cpi	r24, 0x63	; 99
    1c78:	31 f0       	breq	.+12     	; 0x1c86 <vfprintf+0x11a>
    1c7a:	83 37       	cpi	r24, 0x73	; 115
    1c7c:	71 f0       	breq	.+28     	; 0x1c9a <vfprintf+0x12e>
    1c7e:	83 35       	cpi	r24, 0x53	; 83
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <vfprintf+0x118>
    1c82:	59 c0       	rjmp	.+178    	; 0x1d36 <vfprintf+0x1ca>
    1c84:	21 c0       	rjmp	.+66     	; 0x1cc8 <vfprintf+0x15c>
    1c86:	f8 01       	movw	r30, r16
    1c88:	80 81       	ld	r24, Z
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	0e 5f       	subi	r16, 0xFE	; 254
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	88 24       	eor	r8, r8
    1c92:	83 94       	inc	r8
    1c94:	91 2c       	mov	r9, r1
    1c96:	53 01       	movw	r10, r6
    1c98:	13 c0       	rjmp	.+38     	; 0x1cc0 <vfprintf+0x154>
    1c9a:	28 01       	movw	r4, r16
    1c9c:	f2 e0       	ldi	r31, 0x02	; 2
    1c9e:	4f 0e       	add	r4, r31
    1ca0:	51 1c       	adc	r5, r1
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	a0 80       	ld	r10, Z
    1ca6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ca8:	36 fe       	sbrs	r3, 6
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <vfprintf+0x146>
    1cac:	69 2d       	mov	r22, r9
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <vfprintf+0x14a>
    1cb2:	6f ef       	ldi	r22, 0xFF	; 255
    1cb4:	7f ef       	ldi	r23, 0xFF	; 255
    1cb6:	c5 01       	movw	r24, r10
    1cb8:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <strnlen>
    1cbc:	4c 01       	movw	r8, r24
    1cbe:	82 01       	movw	r16, r4
    1cc0:	f3 2d       	mov	r31, r3
    1cc2:	ff 77       	andi	r31, 0x7F	; 127
    1cc4:	3f 2e       	mov	r3, r31
    1cc6:	16 c0       	rjmp	.+44     	; 0x1cf4 <vfprintf+0x188>
    1cc8:	28 01       	movw	r4, r16
    1cca:	22 e0       	ldi	r18, 0x02	; 2
    1ccc:	42 0e       	add	r4, r18
    1cce:	51 1c       	adc	r5, r1
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	a0 80       	ld	r10, Z
    1cd4:	b1 80       	ldd	r11, Z+1	; 0x01
    1cd6:	36 fe       	sbrs	r3, 6
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <vfprintf+0x174>
    1cda:	69 2d       	mov	r22, r9
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <vfprintf+0x178>
    1ce0:	6f ef       	ldi	r22, 0xFF	; 255
    1ce2:	7f ef       	ldi	r23, 0xFF	; 255
    1ce4:	c5 01       	movw	r24, r10
    1ce6:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <strnlen_P>
    1cea:	4c 01       	movw	r8, r24
    1cec:	f3 2d       	mov	r31, r3
    1cee:	f0 68       	ori	r31, 0x80	; 128
    1cf0:	3f 2e       	mov	r3, r31
    1cf2:	82 01       	movw	r16, r4
    1cf4:	33 fc       	sbrc	r3, 3
    1cf6:	1b c0       	rjmp	.+54     	; 0x1d2e <vfprintf+0x1c2>
    1cf8:	82 2d       	mov	r24, r2
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	88 16       	cp	r8, r24
    1cfe:	99 06       	cpc	r9, r25
    1d00:	b0 f4       	brcc	.+44     	; 0x1d2e <vfprintf+0x1c2>
    1d02:	b6 01       	movw	r22, r12
    1d04:	80 e2       	ldi	r24, 0x20	; 32
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1d0c:	2a 94       	dec	r2
    1d0e:	f4 cf       	rjmp	.-24     	; 0x1cf8 <vfprintf+0x18c>
    1d10:	f5 01       	movw	r30, r10
    1d12:	37 fc       	sbrc	r3, 7
    1d14:	85 91       	lpm	r24, Z+
    1d16:	37 fe       	sbrs	r3, 7
    1d18:	81 91       	ld	r24, Z+
    1d1a:	5f 01       	movw	r10, r30
    1d1c:	b6 01       	movw	r22, r12
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1d24:	21 10       	cpse	r2, r1
    1d26:	2a 94       	dec	r2
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	82 1a       	sub	r8, r18
    1d2c:	91 08       	sbc	r9, r1
    1d2e:	81 14       	cp	r8, r1
    1d30:	91 04       	cpc	r9, r1
    1d32:	71 f7       	brne	.-36     	; 0x1d10 <vfprintf+0x1a4>
    1d34:	e8 c0       	rjmp	.+464    	; 0x1f06 <vfprintf+0x39a>
    1d36:	84 36       	cpi	r24, 0x64	; 100
    1d38:	11 f0       	breq	.+4      	; 0x1d3e <vfprintf+0x1d2>
    1d3a:	89 36       	cpi	r24, 0x69	; 105
    1d3c:	41 f5       	brne	.+80     	; 0x1d8e <vfprintf+0x222>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	37 fe       	sbrs	r3, 7
    1d42:	07 c0       	rjmp	.+14     	; 0x1d52 <vfprintf+0x1e6>
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	0c 5f       	subi	r16, 0xFC	; 252
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	08 c0       	rjmp	.+16     	; 0x1d62 <vfprintf+0x1f6>
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	07 2e       	mov	r0, r23
    1d58:	00 0c       	add	r0, r0
    1d5a:	88 0b       	sbc	r24, r24
    1d5c:	99 0b       	sbc	r25, r25
    1d5e:	0e 5f       	subi	r16, 0xFE	; 254
    1d60:	1f 4f       	sbci	r17, 0xFF	; 255
    1d62:	f3 2d       	mov	r31, r3
    1d64:	ff 76       	andi	r31, 0x6F	; 111
    1d66:	3f 2e       	mov	r3, r31
    1d68:	97 ff       	sbrs	r25, 7
    1d6a:	09 c0       	rjmp	.+18     	; 0x1d7e <vfprintf+0x212>
    1d6c:	90 95       	com	r25
    1d6e:	80 95       	com	r24
    1d70:	70 95       	com	r23
    1d72:	61 95       	neg	r22
    1d74:	7f 4f       	sbci	r23, 0xFF	; 255
    1d76:	8f 4f       	sbci	r24, 0xFF	; 255
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	f0 68       	ori	r31, 0x80	; 128
    1d7c:	3f 2e       	mov	r3, r31
    1d7e:	2a e0       	ldi	r18, 0x0A	; 10
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	a3 01       	movw	r20, r6
    1d84:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__ultoa_invert>
    1d88:	88 2e       	mov	r8, r24
    1d8a:	86 18       	sub	r8, r6
    1d8c:	45 c0       	rjmp	.+138    	; 0x1e18 <vfprintf+0x2ac>
    1d8e:	85 37       	cpi	r24, 0x75	; 117
    1d90:	31 f4       	brne	.+12     	; 0x1d9e <vfprintf+0x232>
    1d92:	23 2d       	mov	r18, r3
    1d94:	2f 7e       	andi	r18, 0xEF	; 239
    1d96:	b2 2e       	mov	r11, r18
    1d98:	2a e0       	ldi	r18, 0x0A	; 10
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	25 c0       	rjmp	.+74     	; 0x1de8 <vfprintf+0x27c>
    1d9e:	93 2d       	mov	r25, r3
    1da0:	99 7f       	andi	r25, 0xF9	; 249
    1da2:	b9 2e       	mov	r11, r25
    1da4:	8f 36       	cpi	r24, 0x6F	; 111
    1da6:	c1 f0       	breq	.+48     	; 0x1dd8 <vfprintf+0x26c>
    1da8:	18 f4       	brcc	.+6      	; 0x1db0 <vfprintf+0x244>
    1daa:	88 35       	cpi	r24, 0x58	; 88
    1dac:	79 f0       	breq	.+30     	; 0x1dcc <vfprintf+0x260>
    1dae:	b5 c0       	rjmp	.+362    	; 0x1f1a <vfprintf+0x3ae>
    1db0:	80 37       	cpi	r24, 0x70	; 112
    1db2:	19 f0       	breq	.+6      	; 0x1dba <vfprintf+0x24e>
    1db4:	88 37       	cpi	r24, 0x78	; 120
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <vfprintf+0x254>
    1db8:	b0 c0       	rjmp	.+352    	; 0x1f1a <vfprintf+0x3ae>
    1dba:	e9 2f       	mov	r30, r25
    1dbc:	e0 61       	ori	r30, 0x10	; 16
    1dbe:	be 2e       	mov	r11, r30
    1dc0:	b4 fe       	sbrs	r11, 4
    1dc2:	0d c0       	rjmp	.+26     	; 0x1dde <vfprintf+0x272>
    1dc4:	fb 2d       	mov	r31, r11
    1dc6:	f4 60       	ori	r31, 0x04	; 4
    1dc8:	bf 2e       	mov	r11, r31
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <vfprintf+0x272>
    1dcc:	34 fe       	sbrs	r3, 4
    1dce:	0a c0       	rjmp	.+20     	; 0x1de4 <vfprintf+0x278>
    1dd0:	29 2f       	mov	r18, r25
    1dd2:	26 60       	ori	r18, 0x06	; 6
    1dd4:	b2 2e       	mov	r11, r18
    1dd6:	06 c0       	rjmp	.+12     	; 0x1de4 <vfprintf+0x278>
    1dd8:	28 e0       	ldi	r18, 0x08	; 8
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <vfprintf+0x27c>
    1dde:	20 e1       	ldi	r18, 0x10	; 16
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <vfprintf+0x27c>
    1de4:	20 e1       	ldi	r18, 0x10	; 16
    1de6:	32 e0       	ldi	r19, 0x02	; 2
    1de8:	f8 01       	movw	r30, r16
    1dea:	b7 fe       	sbrs	r11, 7
    1dec:	07 c0       	rjmp	.+14     	; 0x1dfc <vfprintf+0x290>
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	0c 5f       	subi	r16, 0xFC	; 252
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	06 c0       	rjmp	.+12     	; 0x1e08 <vfprintf+0x29c>
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 5f       	subi	r16, 0xFE	; 254
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	a3 01       	movw	r20, r6
    1e0a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__ultoa_invert>
    1e0e:	88 2e       	mov	r8, r24
    1e10:	86 18       	sub	r8, r6
    1e12:	fb 2d       	mov	r31, r11
    1e14:	ff 77       	andi	r31, 0x7F	; 127
    1e16:	3f 2e       	mov	r3, r31
    1e18:	36 fe       	sbrs	r3, 6
    1e1a:	0d c0       	rjmp	.+26     	; 0x1e36 <vfprintf+0x2ca>
    1e1c:	23 2d       	mov	r18, r3
    1e1e:	2e 7f       	andi	r18, 0xFE	; 254
    1e20:	a2 2e       	mov	r10, r18
    1e22:	89 14       	cp	r8, r9
    1e24:	58 f4       	brcc	.+22     	; 0x1e3c <vfprintf+0x2d0>
    1e26:	34 fe       	sbrs	r3, 4
    1e28:	0b c0       	rjmp	.+22     	; 0x1e40 <vfprintf+0x2d4>
    1e2a:	32 fc       	sbrc	r3, 2
    1e2c:	09 c0       	rjmp	.+18     	; 0x1e40 <vfprintf+0x2d4>
    1e2e:	83 2d       	mov	r24, r3
    1e30:	8e 7e       	andi	r24, 0xEE	; 238
    1e32:	a8 2e       	mov	r10, r24
    1e34:	05 c0       	rjmp	.+10     	; 0x1e40 <vfprintf+0x2d4>
    1e36:	b8 2c       	mov	r11, r8
    1e38:	a3 2c       	mov	r10, r3
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <vfprintf+0x2d6>
    1e3c:	b8 2c       	mov	r11, r8
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <vfprintf+0x2d6>
    1e40:	b9 2c       	mov	r11, r9
    1e42:	a4 fe       	sbrs	r10, 4
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <vfprintf+0x2f8>
    1e46:	fe 01       	movw	r30, r28
    1e48:	e8 0d       	add	r30, r8
    1e4a:	f1 1d       	adc	r31, r1
    1e4c:	80 81       	ld	r24, Z
    1e4e:	80 33       	cpi	r24, 0x30	; 48
    1e50:	21 f4       	brne	.+8      	; 0x1e5a <vfprintf+0x2ee>
    1e52:	9a 2d       	mov	r25, r10
    1e54:	99 7e       	andi	r25, 0xE9	; 233
    1e56:	a9 2e       	mov	r10, r25
    1e58:	09 c0       	rjmp	.+18     	; 0x1e6c <vfprintf+0x300>
    1e5a:	a2 fe       	sbrs	r10, 2
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <vfprintf+0x2fe>
    1e5e:	b3 94       	inc	r11
    1e60:	b3 94       	inc	r11
    1e62:	04 c0       	rjmp	.+8      	; 0x1e6c <vfprintf+0x300>
    1e64:	8a 2d       	mov	r24, r10
    1e66:	86 78       	andi	r24, 0x86	; 134
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <vfprintf+0x300>
    1e6a:	b3 94       	inc	r11
    1e6c:	a3 fc       	sbrc	r10, 3
    1e6e:	11 c0       	rjmp	.+34     	; 0x1e92 <vfprintf+0x326>
    1e70:	a0 fe       	sbrs	r10, 0
    1e72:	06 c0       	rjmp	.+12     	; 0x1e80 <vfprintf+0x314>
    1e74:	b2 14       	cp	r11, r2
    1e76:	88 f4       	brcc	.+34     	; 0x1e9a <vfprintf+0x32e>
    1e78:	28 0c       	add	r2, r8
    1e7a:	92 2c       	mov	r9, r2
    1e7c:	9b 18       	sub	r9, r11
    1e7e:	0e c0       	rjmp	.+28     	; 0x1e9c <vfprintf+0x330>
    1e80:	b2 14       	cp	r11, r2
    1e82:	60 f4       	brcc	.+24     	; 0x1e9c <vfprintf+0x330>
    1e84:	b6 01       	movw	r22, r12
    1e86:	80 e2       	ldi	r24, 0x20	; 32
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1e8e:	b3 94       	inc	r11
    1e90:	f7 cf       	rjmp	.-18     	; 0x1e80 <vfprintf+0x314>
    1e92:	b2 14       	cp	r11, r2
    1e94:	18 f4       	brcc	.+6      	; 0x1e9c <vfprintf+0x330>
    1e96:	2b 18       	sub	r2, r11
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <vfprintf+0x332>
    1e9a:	98 2c       	mov	r9, r8
    1e9c:	21 2c       	mov	r2, r1
    1e9e:	a4 fe       	sbrs	r10, 4
    1ea0:	10 c0       	rjmp	.+32     	; 0x1ec2 <vfprintf+0x356>
    1ea2:	b6 01       	movw	r22, r12
    1ea4:	80 e3       	ldi	r24, 0x30	; 48
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1eac:	a2 fe       	sbrs	r10, 2
    1eae:	17 c0       	rjmp	.+46     	; 0x1ede <vfprintf+0x372>
    1eb0:	a1 fc       	sbrc	r10, 1
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <vfprintf+0x34e>
    1eb4:	88 e7       	ldi	r24, 0x78	; 120
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <vfprintf+0x352>
    1eba:	88 e5       	ldi	r24, 0x58	; 88
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	b6 01       	movw	r22, r12
    1ec0:	0c c0       	rjmp	.+24     	; 0x1eda <vfprintf+0x36e>
    1ec2:	8a 2d       	mov	r24, r10
    1ec4:	86 78       	andi	r24, 0x86	; 134
    1ec6:	59 f0       	breq	.+22     	; 0x1ede <vfprintf+0x372>
    1ec8:	a1 fe       	sbrs	r10, 1
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <vfprintf+0x364>
    1ecc:	8b e2       	ldi	r24, 0x2B	; 43
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <vfprintf+0x366>
    1ed0:	80 e2       	ldi	r24, 0x20	; 32
    1ed2:	a7 fc       	sbrc	r10, 7
    1ed4:	8d e2       	ldi	r24, 0x2D	; 45
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1ede:	89 14       	cp	r8, r9
    1ee0:	38 f4       	brcc	.+14     	; 0x1ef0 <vfprintf+0x384>
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	80 e3       	ldi	r24, 0x30	; 48
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1eec:	9a 94       	dec	r9
    1eee:	f7 cf       	rjmp	.-18     	; 0x1ede <vfprintf+0x372>
    1ef0:	8a 94       	dec	r8
    1ef2:	f3 01       	movw	r30, r6
    1ef4:	e8 0d       	add	r30, r8
    1ef6:	f1 1d       	adc	r31, r1
    1ef8:	80 81       	ld	r24, Z
    1efa:	b6 01       	movw	r22, r12
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1f02:	81 10       	cpse	r8, r1
    1f04:	f5 cf       	rjmp	.-22     	; 0x1ef0 <vfprintf+0x384>
    1f06:	22 20       	and	r2, r2
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <vfprintf+0x3a0>
    1f0a:	42 ce       	rjmp	.-892    	; 0x1b90 <vfprintf+0x24>
    1f0c:	b6 01       	movw	r22, r12
    1f0e:	80 e2       	ldi	r24, 0x20	; 32
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <fputc>
    1f16:	2a 94       	dec	r2
    1f18:	f6 cf       	rjmp	.-20     	; 0x1f06 <vfprintf+0x39a>
    1f1a:	f6 01       	movw	r30, r12
    1f1c:	86 81       	ldd	r24, Z+6	; 0x06
    1f1e:	97 81       	ldd	r25, Z+7	; 0x07
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <vfprintf+0x3ba>
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	9f ef       	ldi	r25, 0xFF	; 255
    1f26:	2b 96       	adiw	r28, 0x0b	; 11
    1f28:	e2 e1       	ldi	r30, 0x12	; 18
    1f2a:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__epilogue_restores__>

00001f2e <strnlen_P>:
    1f2e:	fc 01       	movw	r30, r24
    1f30:	05 90       	lpm	r0, Z+
    1f32:	61 50       	subi	r22, 0x01	; 1
    1f34:	70 40       	sbci	r23, 0x00	; 0
    1f36:	01 10       	cpse	r0, r1
    1f38:	d8 f7       	brcc	.-10     	; 0x1f30 <strnlen_P+0x2>
    1f3a:	80 95       	com	r24
    1f3c:	90 95       	com	r25
    1f3e:	8e 0f       	add	r24, r30
    1f40:	9f 1f       	adc	r25, r31
    1f42:	08 95       	ret

00001f44 <strnlen>:
    1f44:	fc 01       	movw	r30, r24
    1f46:	61 50       	subi	r22, 0x01	; 1
    1f48:	70 40       	sbci	r23, 0x00	; 0
    1f4a:	01 90       	ld	r0, Z+
    1f4c:	01 10       	cpse	r0, r1
    1f4e:	d8 f7       	brcc	.-10     	; 0x1f46 <strnlen+0x2>
    1f50:	80 95       	com	r24
    1f52:	90 95       	com	r25
    1f54:	8e 0f       	add	r24, r30
    1f56:	9f 1f       	adc	r25, r31
    1f58:	08 95       	ret

00001f5a <strrev>:
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	67 2f       	mov	r22, r23
    1f60:	71 91       	ld	r23, Z+
    1f62:	77 23       	and	r23, r23
    1f64:	e1 f7       	brne	.-8      	; 0x1f5e <strrev+0x4>
    1f66:	32 97       	sbiw	r30, 0x02	; 2
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <strrev+0x18>
    1f6a:	7c 91       	ld	r23, X
    1f6c:	6d 93       	st	X+, r22
    1f6e:	70 83       	st	Z, r23
    1f70:	62 91       	ld	r22, -Z
    1f72:	ae 17       	cp	r26, r30
    1f74:	bf 07       	cpc	r27, r31
    1f76:	c8 f3       	brcs	.-14     	; 0x1f6a <strrev+0x10>
    1f78:	08 95       	ret

00001f7a <fputc>:
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	fb 01       	movw	r30, r22
    1f84:	23 81       	ldd	r18, Z+3	; 0x03
    1f86:	21 fd       	sbrc	r18, 1
    1f88:	03 c0       	rjmp	.+6      	; 0x1f90 <fputc+0x16>
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	9f ef       	ldi	r25, 0xFF	; 255
    1f8e:	2c c0       	rjmp	.+88     	; 0x1fe8 <fputc+0x6e>
    1f90:	22 ff       	sbrs	r18, 2
    1f92:	16 c0       	rjmp	.+44     	; 0x1fc0 <fputc+0x46>
    1f94:	46 81       	ldd	r20, Z+6	; 0x06
    1f96:	57 81       	ldd	r21, Z+7	; 0x07
    1f98:	24 81       	ldd	r18, Z+4	; 0x04
    1f9a:	35 81       	ldd	r19, Z+5	; 0x05
    1f9c:	42 17       	cp	r20, r18
    1f9e:	53 07       	cpc	r21, r19
    1fa0:	44 f4       	brge	.+16     	; 0x1fb2 <fputc+0x38>
    1fa2:	a0 81       	ld	r26, Z
    1fa4:	b1 81       	ldd	r27, Z+1	; 0x01
    1fa6:	9d 01       	movw	r18, r26
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	3f 4f       	sbci	r19, 0xFF	; 255
    1fac:	31 83       	std	Z+1, r19	; 0x01
    1fae:	20 83       	st	Z, r18
    1fb0:	8c 93       	st	X, r24
    1fb2:	26 81       	ldd	r18, Z+6	; 0x06
    1fb4:	37 81       	ldd	r19, Z+7	; 0x07
    1fb6:	2f 5f       	subi	r18, 0xFF	; 255
    1fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fba:	37 83       	std	Z+7, r19	; 0x07
    1fbc:	26 83       	std	Z+6, r18	; 0x06
    1fbe:	14 c0       	rjmp	.+40     	; 0x1fe8 <fputc+0x6e>
    1fc0:	8b 01       	movw	r16, r22
    1fc2:	ec 01       	movw	r28, r24
    1fc4:	fb 01       	movw	r30, r22
    1fc6:	00 84       	ldd	r0, Z+8	; 0x08
    1fc8:	f1 85       	ldd	r31, Z+9	; 0x09
    1fca:	e0 2d       	mov	r30, r0
    1fcc:	09 95       	icall
    1fce:	89 2b       	or	r24, r25
    1fd0:	e1 f6       	brne	.-72     	; 0x1f8a <fputc+0x10>
    1fd2:	d8 01       	movw	r26, r16
    1fd4:	16 96       	adiw	r26, 0x06	; 6
    1fd6:	8d 91       	ld	r24, X+
    1fd8:	9c 91       	ld	r25, X
    1fda:	17 97       	sbiw	r26, 0x07	; 7
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	17 96       	adiw	r26, 0x07	; 7
    1fe0:	9c 93       	st	X, r25
    1fe2:	8e 93       	st	-X, r24
    1fe4:	16 97       	sbiw	r26, 0x06	; 6
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	08 95       	ret

00001ff2 <__ultoa_invert>:
    1ff2:	fa 01       	movw	r30, r20
    1ff4:	aa 27       	eor	r26, r26
    1ff6:	28 30       	cpi	r18, 0x08	; 8
    1ff8:	51 f1       	breq	.+84     	; 0x204e <__ultoa_invert+0x5c>
    1ffa:	20 31       	cpi	r18, 0x10	; 16
    1ffc:	81 f1       	breq	.+96     	; 0x205e <__ultoa_invert+0x6c>
    1ffe:	e8 94       	clt
    2000:	6f 93       	push	r22
    2002:	6e 7f       	andi	r22, 0xFE	; 254
    2004:	6e 5f       	subi	r22, 0xFE	; 254
    2006:	7f 4f       	sbci	r23, 0xFF	; 255
    2008:	8f 4f       	sbci	r24, 0xFF	; 255
    200a:	9f 4f       	sbci	r25, 0xFF	; 255
    200c:	af 4f       	sbci	r26, 0xFF	; 255
    200e:	b1 e0       	ldi	r27, 0x01	; 1
    2010:	3e d0       	rcall	.+124    	; 0x208e <__ultoa_invert+0x9c>
    2012:	b4 e0       	ldi	r27, 0x04	; 4
    2014:	3c d0       	rcall	.+120    	; 0x208e <__ultoa_invert+0x9c>
    2016:	67 0f       	add	r22, r23
    2018:	78 1f       	adc	r23, r24
    201a:	89 1f       	adc	r24, r25
    201c:	9a 1f       	adc	r25, r26
    201e:	a1 1d       	adc	r26, r1
    2020:	68 0f       	add	r22, r24
    2022:	79 1f       	adc	r23, r25
    2024:	8a 1f       	adc	r24, r26
    2026:	91 1d       	adc	r25, r1
    2028:	a1 1d       	adc	r26, r1
    202a:	6a 0f       	add	r22, r26
    202c:	71 1d       	adc	r23, r1
    202e:	81 1d       	adc	r24, r1
    2030:	91 1d       	adc	r25, r1
    2032:	a1 1d       	adc	r26, r1
    2034:	20 d0       	rcall	.+64     	; 0x2076 <__ultoa_invert+0x84>
    2036:	09 f4       	brne	.+2      	; 0x203a <__ultoa_invert+0x48>
    2038:	68 94       	set
    203a:	3f 91       	pop	r19
    203c:	2a e0       	ldi	r18, 0x0A	; 10
    203e:	26 9f       	mul	r18, r22
    2040:	11 24       	eor	r1, r1
    2042:	30 19       	sub	r19, r0
    2044:	30 5d       	subi	r19, 0xD0	; 208
    2046:	31 93       	st	Z+, r19
    2048:	de f6       	brtc	.-74     	; 0x2000 <__ultoa_invert+0xe>
    204a:	cf 01       	movw	r24, r30
    204c:	08 95       	ret
    204e:	46 2f       	mov	r20, r22
    2050:	47 70       	andi	r20, 0x07	; 7
    2052:	40 5d       	subi	r20, 0xD0	; 208
    2054:	41 93       	st	Z+, r20
    2056:	b3 e0       	ldi	r27, 0x03	; 3
    2058:	0f d0       	rcall	.+30     	; 0x2078 <__ultoa_invert+0x86>
    205a:	c9 f7       	brne	.-14     	; 0x204e <__ultoa_invert+0x5c>
    205c:	f6 cf       	rjmp	.-20     	; 0x204a <__ultoa_invert+0x58>
    205e:	46 2f       	mov	r20, r22
    2060:	4f 70       	andi	r20, 0x0F	; 15
    2062:	40 5d       	subi	r20, 0xD0	; 208
    2064:	4a 33       	cpi	r20, 0x3A	; 58
    2066:	18 f0       	brcs	.+6      	; 0x206e <__ultoa_invert+0x7c>
    2068:	49 5d       	subi	r20, 0xD9	; 217
    206a:	31 fd       	sbrc	r19, 1
    206c:	40 52       	subi	r20, 0x20	; 32
    206e:	41 93       	st	Z+, r20
    2070:	02 d0       	rcall	.+4      	; 0x2076 <__ultoa_invert+0x84>
    2072:	a9 f7       	brne	.-22     	; 0x205e <__ultoa_invert+0x6c>
    2074:	ea cf       	rjmp	.-44     	; 0x204a <__ultoa_invert+0x58>
    2076:	b4 e0       	ldi	r27, 0x04	; 4
    2078:	a6 95       	lsr	r26
    207a:	97 95       	ror	r25
    207c:	87 95       	ror	r24
    207e:	77 95       	ror	r23
    2080:	67 95       	ror	r22
    2082:	ba 95       	dec	r27
    2084:	c9 f7       	brne	.-14     	; 0x2078 <__ultoa_invert+0x86>
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	61 05       	cpc	r22, r1
    208a:	71 05       	cpc	r23, r1
    208c:	08 95       	ret
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
    2092:	0a 2e       	mov	r0, r26
    2094:	06 94       	lsr	r0
    2096:	57 95       	ror	r21
    2098:	47 95       	ror	r20
    209a:	37 95       	ror	r19
    209c:	27 95       	ror	r18
    209e:	ba 95       	dec	r27
    20a0:	c9 f7       	brne	.-14     	; 0x2094 <__ultoa_invert+0xa2>
    20a2:	62 0f       	add	r22, r18
    20a4:	73 1f       	adc	r23, r19
    20a6:	84 1f       	adc	r24, r20
    20a8:	95 1f       	adc	r25, r21
    20aa:	a0 1d       	adc	r26, r0
    20ac:	08 95       	ret

000020ae <__prologue_saves__>:
    20ae:	2f 92       	push	r2
    20b0:	3f 92       	push	r3
    20b2:	4f 92       	push	r4
    20b4:	5f 92       	push	r5
    20b6:	6f 92       	push	r6
    20b8:	7f 92       	push	r7
    20ba:	8f 92       	push	r8
    20bc:	9f 92       	push	r9
    20be:	af 92       	push	r10
    20c0:	bf 92       	push	r11
    20c2:	cf 92       	push	r12
    20c4:	df 92       	push	r13
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	ca 1b       	sub	r28, r26
    20d8:	db 0b       	sbc	r29, r27
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	09 94       	ijmp

000020e6 <__epilogue_restores__>:
    20e6:	2a 88       	ldd	r2, Y+18	; 0x12
    20e8:	39 88       	ldd	r3, Y+17	; 0x11
    20ea:	48 88       	ldd	r4, Y+16	; 0x10
    20ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    20f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    20f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    20f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    20f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    20f8:	b9 84       	ldd	r11, Y+9	; 0x09
    20fa:	c8 84       	ldd	r12, Y+8	; 0x08
    20fc:	df 80       	ldd	r13, Y+7	; 0x07
    20fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2100:	fd 80       	ldd	r15, Y+5	; 0x05
    2102:	0c 81       	ldd	r16, Y+4	; 0x04
    2104:	1b 81       	ldd	r17, Y+3	; 0x03
    2106:	aa 81       	ldd	r26, Y+2	; 0x02
    2108:	b9 81       	ldd	r27, Y+1	; 0x01
    210a:	ce 0f       	add	r28, r30
    210c:	d1 1d       	adc	r29, r1
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	ed 01       	movw	r28, r26
    211a:	08 95       	ret

0000211c <_exit>:
    211c:	f8 94       	cli

0000211e <__stop_program>:
    211e:	ff cf       	rjmp	.-2      	; 0x211e <__stop_program>
