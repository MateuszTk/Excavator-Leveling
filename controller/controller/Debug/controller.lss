
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c2  00800100  00002366  000023fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008003c2  008003c2  000026bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c27  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008de  00000000  00000000  0000550f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000141f  00000000  00000000  00005ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  0000720c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088b  00000000  00000000  000077d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e61  00000000  00000000  0000805f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00009ec0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
       4:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_1>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      1c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_7>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      68:	e4 06       	cpc	r14, r20
      6a:	f2 06       	cpc	r15, r18
      6c:	0f 07       	cpc	r16, r31
      6e:	2c 07       	cpc	r18, r28
      70:	49 07       	cpc	r20, r25
      72:	66 07       	cpc	r22, r22
      74:	83 07       	cpc	r24, r19
      76:	a0 07       	cpc	r26, r16
      78:	bd 07       	cpc	r27, r29
      7a:	da 07       	cpc	r29, r26
      7c:	f7 07       	cpc	r31, r23
      7e:	14 08       	sbc	r1, r4
      80:	31 08       	sbc	r3, r1
      82:	4e 08       	sbc	r4, r14
      84:	8e 08       	sbc	r8, r14
      86:	ce 08       	sbc	r12, r14
      88:	ff 08       	sbc	r15, r15

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	13 e0       	ldi	r17, 0x03	; 3
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e6 e6       	ldi	r30, 0x66	; 102
      9e:	f3 e2       	ldi	r31, 0x23	; 35
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a2 3c       	cpi	r26, 0xC2	; 194
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	23 e0       	ldi	r18, 0x03	; 3
      ae:	a2 ec       	ldi	r26, 0xC2	; 194
      b0:	b3 e0       	ldi	r27, 0x03	; 3
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a1 3d       	cpi	r26, 0xD1	; 209
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 30 0b 	call	0x1660	; 0x1660 <main>
      c0:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <USART_init>:
}

void USART_flush(){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
}
      c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
      cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      d0:	88 e1       	ldi	r24, 0x18	; 24
      d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
      d6:	86 e0       	ldi	r24, 0x06	; 6
      d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
      dc:	08 95       	ret

000000de <USART_transmit>:
      de:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      e2:	95 ff       	sbrs	r25, 5
      e4:	fc cf       	rjmp	.-8      	; 0xde <USART_transmit>
      e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      ea:	08 95       	ret

000000ec <USART_print>:
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	8c 01       	movw	r16, r24
      f6:	c0 e0       	ldi	r28, 0x00	; 0
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	03 c0       	rjmp	.+6      	; 0x102 <USART_print+0x16>
      fc:	21 96       	adiw	r28, 0x01	; 1
      fe:	0e 94 6f 00 	call	0xde	; 0xde <USART_transmit>
     102:	f8 01       	movw	r30, r16
     104:	ec 0f       	add	r30, r28
     106:	fd 1f       	adc	r31, r29
     108:	80 81       	ld	r24, Z
     10a:	81 11       	cpse	r24, r1
     10c:	f7 cf       	rjmp	.-18     	; 0xfc <USART_print+0x10>
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	1f 91       	pop	r17
     114:	0f 91       	pop	r16
     116:	08 95       	ret

00000118 <USART_print_int>:
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	60 97       	sbiw	r28, 0x10	; 16
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	de bf       	out	0x3e, r29	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	cd bf       	out	0x3d, r28	; 61
     12c:	ab 01       	movw	r20, r22
     12e:	be 01       	movw	r22, r28
     130:	6f 5f       	subi	r22, 0xFF	; 255
     132:	7f 4f       	sbci	r23, 0xFF	; 255
     134:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <itoa>
     138:	ce 01       	movw	r24, r28
     13a:	01 96       	adiw	r24, 0x01	; 1
     13c:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
     140:	60 96       	adiw	r28, 0x10	; 16
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <USART_print_float>:
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	60 97       	sbiw	r28, 0x10	; 16
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	6b 01       	movw	r12, r22
     170:	7c 01       	movw	r14, r24
     172:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	4a e0       	ldi	r20, 0x0A	; 10
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	be 01       	movw	r22, r28
     180:	6f 5f       	subi	r22, 0xFF	; 255
     182:	7f 4f       	sbci	r23, 0xFF	; 255
     184:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <itoa>
     188:	ce 01       	movw	r24, r28
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
     190:	82 e2       	ldi	r24, 0x22	; 34
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	4a e7       	ldi	r20, 0x7A	; 122
     19e:	54 e4       	ldi	r21, 0x44	; 68
     1a0:	c7 01       	movw	r24, r14
     1a2:	b6 01       	movw	r22, r12
     1a4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__mulsf3>
     1a8:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
     1ac:	dc 01       	movw	r26, r24
     1ae:	cb 01       	movw	r24, r22
     1b0:	4a e0       	ldi	r20, 0x0A	; 10
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	be 01       	movw	r22, r28
     1b6:	6f 5f       	subi	r22, 0xFF	; 255
     1b8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ba:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <itoa>
     1be:	ce 01       	movw	r24, r28
     1c0:	01 96       	adiw	r24, 0x01	; 1
     1c2:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
     1c6:	60 96       	adiw	r28, 0x10	; 16
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	cd bf       	out	0x3d, r28	; 61
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	ff 90       	pop	r15
     1d8:	ef 90       	pop	r14
     1da:	df 90       	pop	r13
     1dc:	cf 90       	pop	r12
     1de:	08 95       	ret

000001e0 <USART_read>:
     1e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1e4:	88 23       	and	r24, r24
     1e6:	e4 f7       	brge	.-8      	; 0x1e0 <USART_read>
     1e8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     1ec:	08 95       	ret

000001ee <USART_avaliable>:
     1ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1f2:	80 78       	andi	r24, 0x80	; 128
     1f4:	08 95       	ret

000001f6 <USART_read_int>:

int USART_read_int(){
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	60 97       	sbiw	r28, 0x10	; 16
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	cd bf       	out	0x3d, r28	; 61
	char buff[16];
	int i = 0;
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	08 c0       	rjmp	.+16     	; 0x224 <USART_read_int+0x2e>
	while (1){
		buff[i] = USART_read();
		if (buff[0] == ' ' || buff[0] == '\n' || buff[0] == '\r'){
			i = 0;
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	05 c0       	rjmp	.+10     	; 0x224 <USART_read_int+0x2e>
     21a:	00 e0       	ldi	r16, 0x00	; 0
     21c:	10 e0       	ldi	r17, 0x00	; 0
     21e:	02 c0       	rjmp	.+4      	; 0x224 <USART_read_int+0x2e>
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	10 e0       	ldi	r17, 0x00	; 0

int USART_read_int(){
	char buff[16];
	int i = 0;
	while (1){
		buff[i] = USART_read();
     224:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_read>
     228:	e1 e0       	ldi	r30, 0x01	; 1
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	ec 0f       	add	r30, r28
     22e:	fd 1f       	adc	r31, r29
     230:	e0 0f       	add	r30, r16
     232:	f1 1f       	adc	r31, r17
     234:	80 83       	st	Z, r24
		if (buff[0] == ' ' || buff[0] == '\n' || buff[0] == '\r'){
     236:	99 81       	ldd	r25, Y+1	; 0x01
     238:	90 32       	cpi	r25, 0x20	; 32
     23a:	61 f3       	breq	.-40     	; 0x214 <USART_read_int+0x1e>
     23c:	9a 30       	cpi	r25, 0x0A	; 10
     23e:	69 f3       	breq	.-38     	; 0x21a <USART_read_int+0x24>
     240:	9d 30       	cpi	r25, 0x0D	; 13
     242:	71 f3       	breq	.-36     	; 0x220 <USART_read_int+0x2a>
			i = 0;
			continue;
		}
		if (buff[i] == '\n' || buff[i] == '\r' || buff[i] == ' ' || i == 15){
     244:	8a 30       	cpi	r24, 0x0A	; 10
     246:	39 f0       	breq	.+14     	; 0x256 <USART_read_int+0x60>
     248:	8d 30       	cpi	r24, 0x0D	; 13
     24a:	29 f0       	breq	.+10     	; 0x256 <USART_read_int+0x60>
     24c:	80 32       	cpi	r24, 0x20	; 32
     24e:	19 f0       	breq	.+6      	; 0x256 <USART_read_int+0x60>
     250:	0f 30       	cpi	r16, 0x0F	; 15
     252:	11 05       	cpc	r17, r1
     254:	61 f4       	brne	.+24     	; 0x26e <USART_read_int+0x78>
			buff[i] = 0;
     256:	e1 e0       	ldi	r30, 0x01	; 1
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	ec 0f       	add	r30, r28
     25c:	fd 1f       	adc	r31, r29
     25e:	e0 0f       	add	r30, r16
     260:	f1 1f       	adc	r31, r17
     262:	10 82       	st	Z, r1
			break;
		}

		i++;
	}
	return atoi(buff);
     264:	ce 01       	movw	r24, r28
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <atoi>
     26c:	03 c0       	rjmp	.+6      	; 0x274 <USART_read_int+0x7e>
		if (buff[i] == '\n' || buff[i] == '\r' || buff[i] == ' ' || i == 15){
			buff[i] = 0;
			break;
		}

		i++;
     26e:	0f 5f       	subi	r16, 0xFF	; 255
     270:	1f 4f       	sbci	r17, 0xFF	; 255
     272:	d8 cf       	rjmp	.-80     	; 0x224 <USART_read_int+0x2e>
	}
	return atoi(buff);
}
     274:	60 96       	adiw	r28, 0x10	; 16
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	08 95       	ret

0000028a <software_serial_init>:
}
#else

void software_serial_init() {
	// input, pullup
	DDRD &= ~(1 << RX_PIN);
     28a:	8a b1       	in	r24, 0x0a	; 10
     28c:	8b 7f       	andi	r24, 0xFB	; 251
     28e:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1 << RX_PIN);

	// Configure Timer2
	TCCR2A = (1 << WGM21); // CTC mode
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS21); // Prescaler 8
     296:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = BIT_DURATION; // Compare match value
     29a:	80 ed       	ldi	r24, 0xD0	; 208
     29c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

	// Enable Timer2 compare match A interrupt
	TIMSK2 |= (1 << OCIE2A);
     2a0:	e0 e7       	ldi	r30, 0x70	; 112
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	80 83       	st	Z, r24

	// Enable external interrupt INT0 for RX pin
	cli();
     2aa:	f8 94       	cli
	// Falling edge
	EICRA |= (1 << ISC01); 
     2ac:	e9 e6       	ldi	r30, 0x69	; 105
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
     2b6:	8d b3       	in	r24, 0x1d	; 29
     2b8:	81 60       	ori	r24, 0x01	; 1
     2ba:	8d bb       	out	0x1d, r24	; 29
	sei();
     2bc:	78 94       	sei
     2be:	08 95       	ret

000002c0 <__vector_7>:
}

ISR(TIMER2_COMPA_vect) {
     2c0:	1f 92       	push	r1
     2c2:	0f 92       	push	r0
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	0f 92       	push	r0
     2c8:	11 24       	eor	r1, r1
     2ca:	2f 93       	push	r18
     2cc:	3f 93       	push	r19
     2ce:	4f 93       	push	r20
     2d0:	5f 93       	push	r21
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	ef 93       	push	r30
     2d8:	ff 93       	push	r31
	static uint16_t rxByte = 0;
	static uint8_t rxBit = 0;

	if ((PIND & (1 << RX_PIN)) && rxBit > 0) {
     2da:	4a 9b       	sbis	0x09, 2	; 9
     2dc:	19 c0       	rjmp	.+50     	; 0x310 <__vector_7+0x50>
     2de:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <rxBit.1788>
     2e2:	88 23       	and	r24, r24
     2e4:	a9 f0       	breq	.+42     	; 0x310 <__vector_7+0x50>
		rxByte |= (1 << rxBit - 1);
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	21 e0       	ldi	r18, 0x01	; 1
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	a9 01       	movw	r20, r18
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__vector_7+0x36>
     2f2:	44 0f       	add	r20, r20
     2f4:	55 1f       	adc	r21, r21
     2f6:	8a 95       	dec	r24
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <__vector_7+0x32>
     2fa:	ca 01       	movw	r24, r20
     2fc:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <rxByte.1787>
     300:	30 91 cc 03 	lds	r19, 0x03CC	; 0x8003cc <rxByte.1787+0x1>
     304:	82 2b       	or	r24, r18
     306:	93 2b       	or	r25, r19
     308:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <rxByte.1787+0x1>
     30c:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <rxByte.1787>
	}

	rxBit++;
     310:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <rxBit.1788>
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <rxBit.1788>
	if (rxBit >= 9) {
     31a:	89 30       	cpi	r24, 0x09	; 9
     31c:	e0 f0       	brcs	.+56     	; 0x356 <__vector_7+0x96>
		rxBuffer = rxByte;
     31e:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <rxByte.1787>
     322:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <rxByte.1787+0x1>
     326:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <rxBuffer+0x1>
     32a:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <rxBuffer>
		rxAvailable = 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <rxAvailable>
		rxByte = 0;
     334:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <rxByte.1787+0x1>
     338:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <rxByte.1787>
		rxBit = 0;
     33c:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <rxBit.1788>

		// Stop Timer2
		TIMSK2 &= ~(1 << OCIE2A);
     340:	e0 e7       	ldi	r30, 0x70	; 112
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	8d 7f       	andi	r24, 0xFD	; 253
     348:	80 83       	st	Z, r24

		// Re-enable INT0 interrupt
		EIFR |= (1 << INTF0);
     34a:	8c b3       	in	r24, 0x1c	; 28
     34c:	81 60       	ori	r24, 0x01	; 1
     34e:	8c bb       	out	0x1c, r24	; 28
		EIMSK |= (1 << INT0);
     350:	8d b3       	in	r24, 0x1d	; 29
     352:	81 60       	ori	r24, 0x01	; 1
     354:	8d bb       	out	0x1d, r24	; 29
	}
}
     356:	ff 91       	pop	r31
     358:	ef 91       	pop	r30
     35a:	9f 91       	pop	r25
     35c:	8f 91       	pop	r24
     35e:	5f 91       	pop	r21
     360:	4f 91       	pop	r20
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	0f be       	out	0x3f, r0	; 63
     36a:	0f 90       	pop	r0
     36c:	1f 90       	pop	r1
     36e:	18 95       	reti

00000370 <__vector_1>:

ISR(INT0_vect) {
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	8f 93       	push	r24
     37c:	ef 93       	push	r30
     37e:	ff 93       	push	r31
	// Disable INT0 interrupt
	EIMSK &= ~(1 << INT0);
     380:	8d b3       	in	r24, 0x1d	; 29
     382:	8e 7f       	andi	r24, 0xFE	; 254
     384:	8d bb       	out	0x1d, r24	; 29

	// Start Timer2 with phase offset
	TCNT2 = BIT_DURATION / 2;
     386:	88 e6       	ldi	r24, 0x68	; 104
     388:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	// Clear any pending compare match
	TIFR2 |= (1 << OCF2A);
     38c:	87 b3       	in	r24, 0x17	; 23
     38e:	82 60       	ori	r24, 0x02	; 2
     390:	87 bb       	out	0x17, r24	; 23
	// Enable Timer2 compare match interrupt
	TIMSK2 |= (1 << OCIE2A);
     392:	e0 e7       	ldi	r30, 0x70	; 112
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	82 60       	ori	r24, 0x02	; 2
     39a:	80 83       	st	Z, r24
}
     39c:	ff 91       	pop	r31
     39e:	ef 91       	pop	r30
     3a0:	8f 91       	pop	r24
     3a2:	0f 90       	pop	r0
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	0f 90       	pop	r0
     3a8:	1f 90       	pop	r1
     3aa:	18 95       	reti

000003ac <software_serial_read>:

#endif

uint16_t software_serial_read() {
	while (!rxAvailable);
     3ac:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <rxAvailable>
     3b0:	88 23       	and	r24, r24
     3b2:	e1 f3       	breq	.-8      	; 0x3ac <software_serial_read>

	rxAvailable = 0;
     3b4:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <rxAvailable>
	return rxBuffer;
     3b8:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <rxBuffer>
     3bc:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <rxBuffer+0x1>
}
     3c0:	08 95       	ret

000003c2 <software_serial_available>:

uint8_t software_serial_available() {
	return rxAvailable;
     3c2:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <rxAvailable>
}
     3c6:	08 95       	ret

000003c8 <EEPROM_read>:
#define EEPROM_H_

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     3c8:	f9 99       	sbic	0x1f, 1	; 31
     3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
     3cc:	92 bd       	out	0x22, r25	; 34
     3ce:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     3d0:	8f b3       	in	r24, 0x1f	; 31
     3d2:	81 60       	ori	r24, 0x01	; 1
     3d4:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
     3d6:	80 b5       	in	r24, 0x20	; 32
}
     3d8:	08 95       	ret

000003da <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	8c 01       	movw	r16, r24
     3e2:	c6 2f       	mov	r28, r22
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE)) ;
     3e4:	f9 99       	sbic	0x1f, 1	; 31
     3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <EEPROM_write+0xa>
	
	unsigned char current = EEPROM_read(uiAddress);
     3e8:	c8 01       	movw	r24, r16
     3ea:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <EEPROM_read>
	if (current != ucData){
     3ee:	8c 17       	cp	r24, r28
     3f0:	49 f0       	breq	.+18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		/* Set up address and Data Registers */
		EEAR = uiAddress;
     3f2:	12 bd       	out	0x22, r17	; 34
     3f4:	01 bd       	out	0x21, r16	; 33
		EEDR = ucData;
     3f6:	c0 bd       	out	0x20, r28	; 32
		/* Write logical one to EEMPE */
		EECR |= (1<<EEMPE);
     3f8:	8f b3       	in	r24, 0x1f	; 31
     3fa:	84 60       	ori	r24, 0x04	; 4
     3fc:	8f bb       	out	0x1f, r24	; 31
		/* Start eeprom write by setting EEPE */
		EECR |= (1<<EEPE);
     3fe:	8f b3       	in	r24, 0x1f	; 31
     400:	82 60       	ori	r24, 0x02	; 2
     402:	8f bb       	out	0x1f, r24	; 31
	}
}
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	08 95       	ret

0000040c <config_print>:
	int16_t release_position_b;
	float step_up;
	float step_down;
} config_t;

void config_print(config_t* config){
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	8c 01       	movw	r16, r24
	USART_print("1. valid_sample_timeout: ");
     416:	84 e2       	ldi	r24, 0x24	; 36
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	USART_print_int(config->valid_sample_timeout, 10);
     41e:	6a e0       	ldi	r22, 0x0A	; 10
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	f8 01       	movw	r30, r16
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	0e 94 8c 00 	call	0x118	; 0x118 <USART_print_int>
	
	USART_print("\n2. positions_a: ");
     42c:	8e e3       	ldi	r24, 0x3E	; 62
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	for (int i = 0; i < 5; i++){
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	12 c0       	rjmp	.+36     	; 0x45e <config_print+0x52>
		USART_print_int(config->positions_a[i], 10);
     43a:	ec 01       	movw	r28, r24
     43c:	21 96       	adiw	r28, 0x01	; 1
     43e:	fe 01       	movw	r30, r28
     440:	ee 0f       	add	r30, r30
     442:	ff 1f       	adc	r31, r31
     444:	e0 0f       	add	r30, r16
     446:	f1 1f       	adc	r31, r17
     448:	6a e0       	ldi	r22, 0x0A	; 10
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	0e 94 8c 00 	call	0x118	; 0x118 <USART_print_int>
		USART_print(" ");
     454:	89 ee       	ldi	r24, 0xE9	; 233
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
void config_print(config_t* config){
	USART_print("1. valid_sample_timeout: ");
	USART_print_int(config->valid_sample_timeout, 10);
	
	USART_print("\n2. positions_a: ");
	for (int i = 0; i < 5; i++){
     45c:	ce 01       	movw	r24, r28
     45e:	85 30       	cpi	r24, 0x05	; 5
     460:	91 05       	cpc	r25, r1
     462:	5c f3       	brlt	.-42     	; 0x43a <config_print+0x2e>
		USART_print_int(config->positions_a[i], 10);
		USART_print(" ");
	}

	USART_print("\n3. positions_b: ");
     464:	80 e5       	ldi	r24, 0x50	; 80
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	for (int i = 0; i < 5; i++){
     46c:	c0 e0       	ldi	r28, 0x00	; 0
     46e:	d0 e0       	ldi	r29, 0x00	; 0
     470:	11 c0       	rjmp	.+34     	; 0x494 <config_print+0x88>
		USART_print_int(config->positions_b[i], 10);
     472:	fe 01       	movw	r30, r28
     474:	36 96       	adiw	r30, 0x06	; 6
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	e0 0f       	add	r30, r16
     47c:	f1 1f       	adc	r31, r17
     47e:	6a e0       	ldi	r22, 0x0A	; 10
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	91 81       	ldd	r25, Z+1	; 0x01
     486:	0e 94 8c 00 	call	0x118	; 0x118 <USART_print_int>
		USART_print(" ");
     48a:	89 ee       	ldi	r24, 0xE9	; 233
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
		USART_print_int(config->positions_a[i], 10);
		USART_print(" ");
	}

	USART_print("\n3. positions_b: ");
	for (int i = 0; i < 5; i++){
     492:	21 96       	adiw	r28, 0x01	; 1
     494:	c5 30       	cpi	r28, 0x05	; 5
     496:	d1 05       	cpc	r29, r1
     498:	64 f3       	brlt	.-40     	; 0x472 <config_print+0x66>
		USART_print_int(config->positions_b[i], 10);
		USART_print(" ");
	}

	USART_print("\n4. release_position_a: ");
     49a:	82 e6       	ldi	r24, 0x62	; 98
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	USART_print_int(config->release_position_a, 10);
     4a2:	6a e0       	ldi	r22, 0x0A	; 10
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	f8 01       	movw	r30, r16
     4a8:	86 89       	ldd	r24, Z+22	; 0x16
     4aa:	97 89       	ldd	r25, Z+23	; 0x17
     4ac:	0e 94 8c 00 	call	0x118	; 0x118 <USART_print_int>

	USART_print("\n5. release_position_b: ");
     4b0:	8b e7       	ldi	r24, 0x7B	; 123
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	USART_print_int(config->release_position_b, 10);
     4b8:	6a e0       	ldi	r22, 0x0A	; 10
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	f8 01       	movw	r30, r16
     4be:	80 8d       	ldd	r24, Z+24	; 0x18
     4c0:	91 8d       	ldd	r25, Z+25	; 0x19
     4c2:	0e 94 8c 00 	call	0x118	; 0x118 <USART_print_int>

	USART_print("\n6. step_up: ");
     4c6:	84 e9       	ldi	r24, 0x94	; 148
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	USART_print_float(config->step_up);
     4ce:	f8 01       	movw	r30, r16
     4d0:	62 8d       	ldd	r22, Z+26	; 0x1a
     4d2:	73 8d       	ldd	r23, Z+27	; 0x1b
     4d4:	84 8d       	ldd	r24, Z+28	; 0x1c
     4d6:	95 8d       	ldd	r25, Z+29	; 0x1d
     4d8:	0e 94 a9 00 	call	0x152	; 0x152 <USART_print_float>

	USART_print("\n7. step_down: ");
     4dc:	82 ea       	ldi	r24, 0xA2	; 162
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	USART_print_float(config->step_down);
     4e4:	f8 01       	movw	r30, r16
     4e6:	66 8d       	ldd	r22, Z+30	; 0x1e
     4e8:	77 8d       	ldd	r23, Z+31	; 0x1f
     4ea:	80 a1       	ldd	r24, Z+32	; 0x20
     4ec:	91 a1       	ldd	r25, Z+33	; 0x21
     4ee:	0e 94 a9 00 	call	0x152	; 0x152 <USART_print_float>
	
	USART_print("\n");
     4f2:	83 e2       	ldi	r24, 0x23	; 35
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <config_clear>:

void config_clear(){
	EEPROM_write(CONFGIG_ADDR, 0);
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 ed 01 	call	0x3da	; 0x3da <EEPROM_write>
     50e:	08 95       	ret

00000510 <config_save>:
}

void config_save(const config_t* config){
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	8c 01       	movw	r16, r24
	cli();
     51a:	f8 94       	cli
	uint8_t* config_data = (uint8_t*)config;
	
	for (int i = 0; i < sizeof(config_t) + 1; i++){
     51c:	c0 e0       	ldi	r28, 0x00	; 0
     51e:	d0 e0       	ldi	r29, 0x00	; 0
     520:	10 c0       	rjmp	.+32     	; 0x542 <config_save+0x32>
		if (i == 0){
     522:	20 97       	sbiw	r28, 0x00	; 0
     524:	31 f4       	brne	.+12     	; 0x532 <config_save+0x22>
			EEPROM_write(CONFGIG_ADDR, MAGIC_NUMBER);
     526:	62 e2       	ldi	r22, 0x22	; 34
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 ed 01 	call	0x3da	; 0x3da <EEPROM_write>
     530:	07 c0       	rjmp	.+14     	; 0x540 <config_save+0x30>
		}
		else{
			EEPROM_write(CONFGIG_ADDR + i, config_data[i - 1]);
     532:	fc 01       	movw	r30, r24
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	e0 0f       	add	r30, r16
     538:	f1 1f       	adc	r31, r17
     53a:	60 81       	ld	r22, Z
     53c:	0e 94 ed 01 	call	0x3da	; 0x3da <EEPROM_write>

void config_save(const config_t* config){
	cli();
	uint8_t* config_data = (uint8_t*)config;
	
	for (int i = 0; i < sizeof(config_t) + 1; i++){
     540:	21 96       	adiw	r28, 0x01	; 1
     542:	ce 01       	movw	r24, r28
     544:	c3 32       	cpi	r28, 0x23	; 35
     546:	d1 05       	cpc	r29, r1
     548:	60 f3       	brcs	.-40     	; 0x522 <config_save+0x12>
		}
		else{
			EEPROM_write(CONFGIG_ADDR + i, config_data[i - 1]);
		}
	}
	sei();
     54a:	78 94       	sei
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	08 95       	ret

00000556 <config_load>:

uint8_t config_load(config_t* config){
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	7c 01       	movw	r14, r24
	cli();
     566:	f8 94       	cli
	uint8_t success = EEPROM_read(CONFGIG_ADDR) == MAGIC_NUMBER;
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <EEPROM_read>
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	82 32       	cpi	r24, 0x22	; 34
     574:	09 f0       	breq	.+2      	; 0x578 <config_load+0x22>
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	d9 2e       	mov	r13, r25
	if (success){
     57a:	82 32       	cpi	r24, 0x22	; 34
     57c:	81 f4       	brne	.+32     	; 0x59e <config_load+0x48>
     57e:	0a c0       	rjmp	.+20     	; 0x594 <config_load+0x3e>
		uint8_t* config_data = (uint8_t*)config;
		
		for (int i = 0; i < sizeof(config_t); i++){
			config_data[i] = EEPROM_read(CONFGIG_ADDR + 1 + i);
     580:	87 01       	movw	r16, r14
     582:	0c 0f       	add	r16, r28
     584:	1d 1f       	adc	r17, r29
     586:	21 96       	adiw	r28, 0x01	; 1
     588:	ce 01       	movw	r24, r28
     58a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <EEPROM_read>
     58e:	f8 01       	movw	r30, r16
     590:	80 83       	st	Z, r24
     592:	02 c0       	rjmp	.+4      	; 0x598 <config_load+0x42>
     594:	c0 e0       	ldi	r28, 0x00	; 0
     596:	d0 e0       	ldi	r29, 0x00	; 0
	cli();
	uint8_t success = EEPROM_read(CONFGIG_ADDR) == MAGIC_NUMBER;
	if (success){
		uint8_t* config_data = (uint8_t*)config;
		
		for (int i = 0; i < sizeof(config_t); i++){
     598:	c2 32       	cpi	r28, 0x22	; 34
     59a:	d1 05       	cpc	r29, r1
     59c:	88 f3       	brcs	.-30     	; 0x580 <config_load+0x2a>
			config_data[i] = EEPROM_read(CONFGIG_ADDR + 1 + i);
		}
	}
	sei();
     59e:	78 94       	sei
	
	return success;
}
     5a0:	8d 2d       	mov	r24, r13
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	08 95       	ret

000005b2 <servo_init>:

#define SERVO_MIN 500
#define SERVO_MAX 2400

void servo_init(){
    SERVO_1_DDR |= (1 << SERVO_1_PIN);
     5b2:	84 b1       	in	r24, 0x04	; 4
     5b4:	82 60       	ori	r24, 0x02	; 2
     5b6:	84 b9       	out	0x04, r24	; 4
    SERVO_2_DDR |= (1 << SERVO_2_PIN);
     5b8:	84 b1       	in	r24, 0x04	; 4
     5ba:	84 60       	ori	r24, 0x04	; 4
     5bc:	84 b9       	out	0x04, r24	; 4
    
    // Configure Timer1, Fast PWM, prescaler 8, clear OC1A on compare match, set OC1A at BOTTOM
    // 16MHz / 8 = 2MHz
    TCCR1A = (1 << COM1A1) | (1 << WGM11) | (1 << COM1B1);
     5be:	82 ea       	ldi	r24, 0xA2	; 162
     5c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
     5c4:	8a e1       	ldi	r24, 0x1A	; 26
     5c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    
    ICR1 = 39999;
     5ca:	8f e3       	ldi	r24, 0x3F	; 63
     5cc:	9c e9       	ldi	r25, 0x9C	; 156
     5ce:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     5d2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

    OCR1A = SERVO_MIN * 2;
     5d6:	88 ee       	ldi	r24, 0xE8	; 232
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     5de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    OCR1B = SERVO_MIN * 2;
     5e2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     5e6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     5ea:	08 95       	ret

000005ec <servo_1_set>:
}

void servo_1_set(uint16_t value){
    if (value < SERVO_MIN){
     5ec:	84 3f       	cpi	r24, 0xF4	; 244
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	92 07       	cpc	r25, r18
     5f2:	28 f0       	brcs	.+10     	; 0x5fe <servo_1_set+0x12>
        value = SERVO_MIN;
    }
    else if (value > SERVO_MAX){
     5f4:	81 36       	cpi	r24, 0x61	; 97
     5f6:	29 e0       	ldi	r18, 0x09	; 9
     5f8:	92 07       	cpc	r25, r18
     5fa:	20 f4       	brcc	.+8      	; 0x604 <servo_1_set+0x18>
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <servo_1_set+0x1c>
    OCR1B = SERVO_MIN * 2;
}

void servo_1_set(uint16_t value){
    if (value < SERVO_MIN){
        value = SERVO_MIN;
     5fe:	84 ef       	ldi	r24, 0xF4	; 244
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	02 c0       	rjmp	.+4      	; 0x608 <servo_1_set+0x1c>
    }
    else if (value > SERVO_MAX){
        value = SERVO_MAX;
     604:	80 e6       	ldi	r24, 0x60	; 96
     606:	99 e0       	ldi	r25, 0x09	; 9
    }
    
    OCR1A = value * 2;
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     610:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     614:	08 95       	ret

00000616 <servo_2_set>:
}

void servo_2_set(uint16_t value){
    if (value < SERVO_MIN){
     616:	84 3f       	cpi	r24, 0xF4	; 244
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	92 07       	cpc	r25, r18
     61c:	28 f0       	brcs	.+10     	; 0x628 <servo_2_set+0x12>
        value = SERVO_MIN;
    }
    else if (value > SERVO_MAX){
     61e:	81 36       	cpi	r24, 0x61	; 97
     620:	29 e0       	ldi	r18, 0x09	; 9
     622:	92 07       	cpc	r25, r18
     624:	20 f4       	brcc	.+8      	; 0x62e <servo_2_set+0x18>
     626:	05 c0       	rjmp	.+10     	; 0x632 <servo_2_set+0x1c>
    OCR1A = value * 2;
}

void servo_2_set(uint16_t value){
    if (value < SERVO_MIN){
        value = SERVO_MIN;
     628:	84 ef       	ldi	r24, 0xF4	; 244
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	02 c0       	rjmp	.+4      	; 0x632 <servo_2_set+0x1c>
    }
    else if (value > SERVO_MAX){
        value = SERVO_MAX;
     62e:	80 e6       	ldi	r24, 0x60	; 96
     630:	99 e0       	ldi	r25, 0x09	; 9
    }
    
    OCR1B = value * 2;
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     63a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     63e:	08 95       	ret

00000640 <servo_set_angle_180>:
}

void servo_set_angle_180(uint8_t angle, uint8_t servo){
    if (angle > 180){
     640:	85 3b       	cpi	r24, 0xB5	; 181
     642:	08 f0       	brcs	.+2      	; 0x646 <servo_set_angle_180+0x6>
        angle = 180;
     644:	84 eb       	ldi	r24, 0xB4	; 180
    }
    
    if (servo == 1){
     646:	61 30       	cpi	r22, 0x01	; 1
     648:	91 f4       	brne	.+36     	; 0x66e <servo_set_angle_180+0x2e>
        servo_1_set(SERVO_MIN + (((uint32_t)angle) * (SERVO_MAX - SERVO_MIN) / 180));
     64a:	28 2f       	mov	r18, r24
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	ac e6       	ldi	r26, 0x6C	; 108
     650:	b7 e0       	ldi	r27, 0x07	; 7
     652:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__umulhisi3>
     656:	24 eb       	ldi	r18, 0xB4	; 180
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodsi4>
     662:	c9 01       	movw	r24, r18
     664:	8c 50       	subi	r24, 0x0C	; 12
     666:	9e 4f       	sbci	r25, 0xFE	; 254
     668:	0e 94 f6 02 	call	0x5ec	; 0x5ec <servo_1_set>
     66c:	08 95       	ret
    }
    else{
        servo_2_set(SERVO_MIN + (((uint32_t)angle) * (SERVO_MAX - SERVO_MIN) / 180));
     66e:	28 2f       	mov	r18, r24
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	ac e6       	ldi	r26, 0x6C	; 108
     674:	b7 e0       	ldi	r27, 0x07	; 7
     676:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__umulhisi3>
     67a:	24 eb       	ldi	r18, 0xB4	; 180
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodsi4>
     686:	c9 01       	movw	r24, r18
     688:	8c 50       	subi	r24, 0x0C	; 12
     68a:	9e 4f       	sbci	r25, 0xFE	; 254
     68c:	0e 94 0b 03 	call	0x616	; 0x616 <servo_2_set>
     690:	08 95       	ret

00000692 <servo_set_angle_minus_90_90>:
    }
}

void servo_set_angle_minus_90_90(int8_t angle, uint8_t servo){
    if (angle < -90){
     692:	86 3a       	cpi	r24, 0xA6	; 166
     694:	1c f0       	brlt	.+6      	; 0x69c <servo_set_angle_minus_90_90+0xa>
        angle = -90;
    }
    else if (angle > 90){
     696:	8b 35       	cpi	r24, 0x5B	; 91
     698:	1c f4       	brge	.+6      	; 0x6a0 <servo_set_angle_minus_90_90+0xe>
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <servo_set_angle_minus_90_90+0x10>
    }
}

void servo_set_angle_minus_90_90(int8_t angle, uint8_t servo){
    if (angle < -90){
        angle = -90;
     69c:	86 ea       	ldi	r24, 0xA6	; 166
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <servo_set_angle_minus_90_90+0x10>
    }
    else if (angle > 90){
        angle = 90;
     6a0:	8a e5       	ldi	r24, 0x5A	; 90
    }
    
    servo_set_angle_180(angle + 90, servo);
     6a2:	86 5a       	subi	r24, 0xA6	; 166
     6a4:	0e 94 20 03 	call	0x640	; 0x640 <servo_set_angle_180>
     6a8:	08 95       	ret

000006aa <lcd_send>:
    // Clear display
    lcd_clear();
}

void lcd_send(uint8_t data, uint8_t mode){
    LCD_PORT = ((data & 0xF0) >> 4) | (mode << LCD_RS) | (1 << LCD_EN);
     6aa:	98 2f       	mov	r25, r24
     6ac:	92 95       	swap	r25
     6ae:	9f 70       	andi	r25, 0x0F	; 15
     6b0:	20 e2       	ldi	r18, 0x20	; 32
     6b2:	62 9f       	mul	r22, r18
     6b4:	b0 01       	movw	r22, r0
     6b6:	11 24       	eor	r1, r1
     6b8:	96 2b       	or	r25, r22
     6ba:	90 61       	ori	r25, 0x10	; 16
     6bc:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6be:	95 e0       	ldi	r25, 0x05	; 5
     6c0:	9a 95       	dec	r25
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <lcd_send+0x16>
     6c4:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1 << LCD_EN);
     6c6:	98 b1       	in	r25, 0x08	; 8
     6c8:	9f 7e       	andi	r25, 0xEF	; 239
     6ca:	98 b9       	out	0x08, r25	; 8
     6cc:	25 e0       	ldi	r18, 0x05	; 5
     6ce:	2a 95       	dec	r18
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <lcd_send+0x24>
     6d2:	00 00       	nop
    _delay_us(1);
    
    LCD_PORT = (data & 0x0F) | (mode << LCD_RS) | (1 << LCD_EN);
     6d4:	8f 70       	andi	r24, 0x0F	; 15
     6d6:	68 2b       	or	r22, r24
     6d8:	60 61       	ori	r22, 0x10	; 16
     6da:	68 b9       	out	0x08, r22	; 8
     6dc:	85 e0       	ldi	r24, 0x05	; 5
     6de:	8a 95       	dec	r24
     6e0:	f1 f7       	brne	.-4      	; 0x6de <lcd_send+0x34>
     6e2:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1 << LCD_EN);
     6e4:	88 b1       	in	r24, 0x08	; 8
     6e6:	8f 7e       	andi	r24, 0xEF	; 239
     6e8:	88 b9       	out	0x08, r24	; 8
     6ea:	8f e8       	ldi	r24, 0x8F	; 143
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <lcd_send+0x44>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <lcd_send+0x4a>
     6f4:	00 00       	nop
     6f6:	08 95       	ret

000006f8 <lcd_print>:
    _delay_us(100);
}

void lcd_print(const char* str){
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
    while (*str){
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <lcd_print+0x10>
        lcd_send(*str++, LCD_MODE_DATA);
     700:	21 96       	adiw	r28, 0x01	; 1
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
    LCD_PORT &= ~(1 << LCD_EN);
    _delay_us(100);
}

void lcd_print(const char* str){
    while (*str){
     708:	88 81       	ld	r24, Y
     70a:	81 11       	cpse	r24, r1
     70c:	f9 cf       	rjmp	.-14     	; 0x700 <lcd_print+0x8>
        lcd_send(*str++, LCD_MODE_DATA);
    }
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <lcd_print_int>:

void lcd_print_int(int num, int base){
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	60 97       	sbiw	r28, 0x10	; 16
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	ab 01       	movw	r20, r22
    char buff[16];
    itoa(num, buff, base);
     72a:	be 01       	movw	r22, r28
     72c:	6f 5f       	subi	r22, 0xFF	; 255
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <itoa>
    lcd_print(buff);
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
}
     73c:	60 96       	adiw	r28, 0x10	; 16
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <lcd_print_float>:

void lcd_print_float(float num){
     74e:	8f 92       	push	r8
     750:	9f 92       	push	r9
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	60 97       	sbiw	r28, 0x10	; 16
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	4b 01       	movw	r8, r22
     778:	5c 01       	movw	r10, r24
    char buff[16];
    if (num < 0){
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	a9 01       	movw	r20, r18
     780:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
     784:	88 23       	and	r24, r24
     786:	44 f4       	brge	.+16     	; 0x798 <lcd_print_float+0x4a>
        lcd_print("-");
     788:	82 eb       	ldi	r24, 0xB2	; 178
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
        num = -num;
     790:	b7 fa       	bst	r11, 7
     792:	b0 94       	com	r11
     794:	b7 f8       	bld	r11, 7
     796:	b0 94       	com	r11
    }
    itoa((int)num, buff, 10);
     798:	c5 01       	movw	r24, r10
     79a:	b4 01       	movw	r22, r8
     79c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
     7a0:	6b 01       	movw	r12, r22
     7a2:	7c 01       	movw	r14, r24
     7a4:	4a e0       	ldi	r20, 0x0A	; 10
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	8e 01       	movw	r16, r28
     7aa:	0f 5f       	subi	r16, 0xFF	; 255
     7ac:	1f 4f       	sbci	r17, 0xFF	; 255
     7ae:	b8 01       	movw	r22, r16
     7b0:	c6 01       	movw	r24, r12
     7b2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <itoa>
    lcd_print(buff);
     7b6:	c8 01       	movw	r24, r16
     7b8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    lcd_print(".");
     7bc:	82 e2       	ldi	r24, 0x22	; 34
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    float fraction = num - (int)num;
     7c4:	b6 01       	movw	r22, r12
     7c6:	dd 0c       	add	r13, r13
     7c8:	88 0b       	sbc	r24, r24
     7ca:	99 0b       	sbc	r25, r25
     7cc:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__floatsisf>
     7d0:	9b 01       	movw	r18, r22
     7d2:	ac 01       	movw	r20, r24
     7d4:	c5 01       	movw	r24, r10
     7d6:	b4 01       	movw	r22, r8
     7d8:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    sprintf(buff, "%03d", (int)(fraction * 1000.0f));
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	4a e7       	ldi	r20, 0x7A	; 122
     7e2:	54 e4       	ldi	r21, 0x44	; 68
     7e4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__mulsf3>
     7e8:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
     7ec:	7f 93       	push	r23
     7ee:	6f 93       	push	r22
     7f0:	84 eb       	ldi	r24, 0xB4	; 180
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	1f 93       	push	r17
     7fa:	0f 93       	push	r16
     7fc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <sprintf>
    lcd_print(buff);
     800:	c8 01       	movw	r24, r16
     802:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
}
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	60 96       	adiw	r28, 0x10	; 16
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	af 90       	pop	r10
     832:	9f 90       	pop	r9
     834:	8f 90       	pop	r8
     836:	08 95       	ret

00000838 <lcd_clear>:

void lcd_clear(){
    lcd_send(0x01, LCD_MODE_CMD);
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     840:	8f e3       	ldi	r24, 0x3F	; 63
     842:	9f e1       	ldi	r25, 0x1F	; 31
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <lcd_clear+0xc>
     848:	00 c0       	rjmp	.+0      	; 0x84a <lcd_clear+0x12>
     84a:	00 00       	nop
     84c:	08 95       	ret

0000084e <lcd_init>:

#define LCD_MODE_CMD 0
#define LCD_MODE_DATA 1

void lcd_init(){
    LCD_DDR = 0xFF;
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	87 b9       	out	0x07, r24	; 7
    LCD_PORT = 0x00;
     852:	18 b8       	out	0x08, r1	; 8
     854:	8f e5       	ldi	r24, 0x5F	; 95
     856:	9a ee       	ldi	r25, 0xEA	; 234
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <lcd_init+0xa>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <lcd_init+0x10>
     85e:	00 00       	nop
    
    _delay_ms(15);
    
    lcd_send(0x03, LCD_MODE_CMD);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
     86c:	8f e1       	ldi	r24, 0x1F	; 31
     86e:	9e e4       	ldi	r25, 0x4E	; 78
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <lcd_init+0x22>
     874:	00 c0       	rjmp	.+0      	; 0x876 <lcd_init+0x28>
     876:	00 00       	nop
    _delay_ms(5);
    lcd_send(0x03, LCD_MODE_CMD);
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     884:	8f e8       	ldi	r24, 0x8F	; 143
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <lcd_init+0x3a>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <lcd_init+0x40>
     88e:	00 00       	nop
    _delay_us(100);
    lcd_send(0x03, LCD_MODE_CMD);
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     89c:	8f e1       	ldi	r24, 0x1F	; 31
     89e:	9e e4       	ldi	r25, 0x4E	; 78
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <lcd_init+0x52>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <lcd_init+0x58>
     8a6:	00 00       	nop
    _delay_ms(5);
    lcd_send(0x02, LCD_MODE_CMD);
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
     8b4:	8f e9       	ldi	r24, 0x9F	; 159
     8b6:	9f e0       	ldi	r25, 0x0F	; 15
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <lcd_init+0x6a>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <lcd_init+0x70>
     8be:	00 00       	nop
    _delay_ms(1);
    
    // 4-bit mode
    lcd_send(0x28, LCD_MODE_CMD);
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	88 e2       	ldi	r24, 0x28	; 40
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
     8cc:	8f e9       	ldi	r24, 0x9F	; 159
     8ce:	9f e0       	ldi	r25, 0x0F	; 15
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <lcd_init+0x82>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <lcd_init+0x88>
     8d6:	00 00       	nop
    _delay_ms(1);
    // Display on, cursor off, blink off
    lcd_send(0x0C, LCD_MODE_CMD);
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	8c e0       	ldi	r24, 0x0C	; 12
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
     8e4:	8f e9       	ldi	r24, 0x9F	; 159
     8e6:	9f e0       	ldi	r25, 0x0F	; 15
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <lcd_init+0x9a>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <lcd_init+0xa0>
     8ee:	00 00       	nop
    _delay_ms(1);
    // Entry mode
    lcd_send(0x06, LCD_MODE_CMD);
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	86 e0       	ldi	r24, 0x06	; 6
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
     8fc:	8f e9       	ldi	r24, 0x9F	; 159
     8fe:	9f e0       	ldi	r25, 0x0F	; 15
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0x1>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
     906:	00 00       	nop
    _delay_ms(1);

    // Clear display
    lcd_clear();
     908:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
     90c:	08 95       	ret

0000090e <lcd_set_cursor>:
void lcd_clear(){
    lcd_send(0x01, LCD_MODE_CMD);
    _delay_ms(2);
}

void lcd_set_cursor(uint8_t row, uint8_t col){
     90e:	96 2f       	mov	r25, r22
    uint8_t addr = 0x80;
    if (row == 1){
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	11 f0       	breq	.+4      	; 0x918 <lcd_set_cursor+0xa>
    lcd_send(0x01, LCD_MODE_CMD);
    _delay_ms(2);
}

void lcd_set_cursor(uint8_t row, uint8_t col){
    uint8_t addr = 0x80;
     914:	80 e8       	ldi	r24, 0x80	; 128
     916:	01 c0       	rjmp	.+2      	; 0x91a <lcd_set_cursor+0xc>
    if (row == 1){
        addr = 0xC0;
     918:	80 ec       	ldi	r24, 0xC0	; 192
    }
    addr += col;
    lcd_send(addr, LCD_MODE_CMD);
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	89 0f       	add	r24, r25
     91e:	0e 94 55 03 	call	0x6aa	; 0x6aa <lcd_send>
     922:	08 95       	ret

00000924 <buttons_init>:
#define SWITCH_ARMED_PORT PORTD
#define SWITCH_ARMED_PIN PIND
#define SWITCH_ARMED PD7

void buttons_init(){
    BUTTON_UP_DDR &= ~(1 << BUTTON_UP);
     924:	8a b1       	in	r24, 0x0a	; 10
     926:	8f 7d       	andi	r24, 0xDF	; 223
     928:	8a b9       	out	0x0a, r24	; 10
    BUTTON_UP_PORT |= (1 << BUTTON_UP);
     92a:	8b b1       	in	r24, 0x0b	; 11
     92c:	80 62       	ori	r24, 0x20	; 32
     92e:	8b b9       	out	0x0b, r24	; 11
    
    BUTTON_DOWN_DDR &= ~(1 << BUTTON_DOWN);
     930:	8a b1       	in	r24, 0x0a	; 10
     932:	8f 7e       	andi	r24, 0xEF	; 239
     934:	8a b9       	out	0x0a, r24	; 10
    BUTTON_DOWN_PORT |= (1 << BUTTON_DOWN);
     936:	8b b1       	in	r24, 0x0b	; 11
     938:	80 61       	ori	r24, 0x10	; 16
     93a:	8b b9       	out	0x0b, r24	; 11
    
    BUTTON_OK_DDR &= ~(1 << BUTTON_OK);
     93c:	8a b1       	in	r24, 0x0a	; 10
     93e:	8f 7b       	andi	r24, 0xBF	; 191
     940:	8a b9       	out	0x0a, r24	; 10
    BUTTON_OK_PORT |= (1 << BUTTON_OK);
     942:	8b b1       	in	r24, 0x0b	; 11
     944:	80 64       	ori	r24, 0x40	; 64
     946:	8b b9       	out	0x0b, r24	; 11

    SWITCH_ARMED_DDR &= ~(1 << SWITCH_ARMED);
     948:	8a b1       	in	r24, 0x0a	; 10
     94a:	8f 77       	andi	r24, 0x7F	; 127
     94c:	8a b9       	out	0x0a, r24	; 10
    SWITCH_ARMED_PORT |= (1 << SWITCH_ARMED);
     94e:	8b b1       	in	r24, 0x0b	; 11
     950:	80 68       	ori	r24, 0x80	; 128
     952:	8b b9       	out	0x0b, r24	; 11
     954:	08 95       	ret

00000956 <button_up>:
}

uint8_t button_up(){
    return !(BUTTON_UP_PIN & (1 << BUTTON_UP));
     956:	89 b1       	in	r24, 0x09	; 9
     958:	82 95       	swap	r24
     95a:	86 95       	lsr	r24
     95c:	87 70       	andi	r24, 0x07	; 7
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	89 27       	eor	r24, r25
}
     962:	81 70       	andi	r24, 0x01	; 1
     964:	08 95       	ret

00000966 <button_down>:

uint8_t button_down(){
    return !(BUTTON_DOWN_PIN & (1 << BUTTON_DOWN));
     966:	89 b1       	in	r24, 0x09	; 9
     968:	82 95       	swap	r24
     96a:	8f 70       	andi	r24, 0x0F	; 15
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	89 27       	eor	r24, r25
}
     970:	81 70       	andi	r24, 0x01	; 1
     972:	08 95       	ret

00000974 <button_ok>:

uint8_t button_ok(){
    return !(BUTTON_OK_PIN & (1 << BUTTON_OK));
     974:	89 b1       	in	r24, 0x09	; 9
     976:	82 95       	swap	r24
     978:	86 95       	lsr	r24
     97a:	86 95       	lsr	r24
     97c:	83 70       	andi	r24, 0x03	; 3
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	89 27       	eor	r24, r25
}
     982:	81 70       	andi	r24, 0x01	; 1
     984:	08 95       	ret

00000986 <switch_armed>:

uint8_t switch_armed(){
    return !(SWITCH_ARMED_PIN & (1 << SWITCH_ARMED));
     986:	89 b1       	in	r24, 0x09	; 9
     988:	80 95       	com	r24
}
     98a:	88 1f       	adc	r24, r24
     98c:	88 27       	eor	r24, r24
     98e:	88 1f       	adc	r24, r24
     990:	08 95       	ret

00000992 <set_speed>:
#define CONTROL_H_

#include "servo.h"
#include "config.h"

void set_speed(int8_t speed_a, int8_t speed_b){
     992:	cf 93       	push	r28
     994:	c6 2f       	mov	r28, r22
	servo_set_angle_minus_90_90(speed_a, 1);
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	0e 94 49 03 	call	0x692	; 0x692 <servo_set_angle_minus_90_90>
	servo_set_angle_minus_90_90(speed_b, 2);
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	8c 2f       	mov	r24, r28
     9a0:	0e 94 49 03 	call	0x692	; 0x692 <servo_set_angle_minus_90_90>
}
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <set_normalized_speed>:

void set_normalized_speed(config_t* config, float speed_normalized){
     9a8:	8f 92       	push	r8
     9aa:	9f 92       	push	r9
     9ac:	af 92       	push	r10
     9ae:	bf 92       	push	r11
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
     9c2:	cb 01       	movw	r24, r22
     9c4:	ba 01       	movw	r22, r20
	int8_t speed_a = 0;
	int8_t speed_b = 0;

	float speed_0_1 = (speed_normalized + 1.0f) / 2.0f; 
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e8       	ldi	r20, 0x80	; 128
     9cc:	5f e3       	ldi	r21, 0x3F	; 63
     9ce:	0e 94 37 0c 	call	0x186e	; 0x186e <__addsf3>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	5f e3       	ldi	r21, 0x3F	; 63
     9da:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__mulsf3>
	int8_t position_floor = (int8_t)(speed_0_1 * 4);
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e8       	ldi	r20, 0x80	; 128
     9e4:	50 e4       	ldi	r21, 0x40	; 64
     9e6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__mulsf3>
     9ea:	6b 01       	movw	r12, r22
     9ec:	7c 01       	movw	r14, r24
     9ee:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
     9f2:	16 2f       	mov	r17, r22
	int8_t position_ceil = position_floor + 1;
     9f4:	01 e0       	ldi	r16, 0x01	; 1
     9f6:	06 0f       	add	r16, r22
	float position_blend = (speed_0_1 * 4.0f) - position_floor;
     9f8:	06 2e       	mov	r0, r22
     9fa:	00 0c       	add	r0, r0
     9fc:	77 0b       	sbc	r23, r23
     9fe:	88 0b       	sbc	r24, r24
     a00:	99 0b       	sbc	r25, r25
     a02:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__floatsisf>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
     a12:	6b 01       	movw	r12, r22
     a14:	7c 01       	movw	r14, r24

	if (position_ceil > 4){
     a16:	05 30       	cpi	r16, 0x05	; 5
     a18:	14 f0       	brlt	.+4      	; 0xa1e <set_normalized_speed+0x76>
		position_ceil = 4;
     a1a:	04 e0       	ldi	r16, 0x04	; 4
		position_floor = 4;
     a1c:	14 e0       	ldi	r17, 0x04	; 4
	}

	int8_t speed_a_floor = config->positions_a[position_floor];
     a1e:	81 2f       	mov	r24, r17
     a20:	11 0f       	add	r17, r17
     a22:	99 0b       	sbc	r25, r25
     a24:	fc 01       	movw	r30, r24
     a26:	31 96       	adiw	r30, 0x01	; 1
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	ec 0f       	add	r30, r28
     a2e:	fd 1f       	adc	r31, r29
     a30:	10 81       	ld	r17, Z
	int8_t speed_a_ceil = config->positions_a[position_ceil];
     a32:	e0 2f       	mov	r30, r16
     a34:	00 0f       	add	r16, r16
     a36:	ff 0b       	sbc	r31, r31
     a38:	df 01       	movw	r26, r30
     a3a:	11 96       	adiw	r26, 0x01	; 1
     a3c:	aa 0f       	add	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	ac 0f       	add	r26, r28
     a42:	bd 1f       	adc	r27, r29
     a44:	6c 91       	ld	r22, X
	int8_t speed_b_floor = config->positions_b[position_floor];
     a46:	dc 01       	movw	r26, r24
     a48:	16 96       	adiw	r26, 0x06	; 6
     a4a:	aa 0f       	add	r26, r26
     a4c:	bb 1f       	adc	r27, r27
     a4e:	ac 0f       	add	r26, r28
     a50:	bd 1f       	adc	r27, r29
     a52:	0c 91       	ld	r16, X
	int8_t speed_b_ceil = config->positions_b[position_ceil];
     a54:	36 96       	adiw	r30, 0x06	; 6
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	ec 0f       	add	r30, r28
     a5c:	fd 1f       	adc	r31, r29
     a5e:	c0 81       	ld	r28, Z

	speed_a = (int8_t)(speed_a_floor + (speed_a_ceil - speed_a_floor) * position_blend);
     a60:	06 2e       	mov	r0, r22
     a62:	00 0c       	add	r0, r0
     a64:	77 0b       	sbc	r23, r23
     a66:	61 1b       	sub	r22, r17
     a68:	71 09       	sbc	r23, r1
     a6a:	17 fd       	sbrc	r17, 7
     a6c:	73 95       	inc	r23
     a6e:	07 2e       	mov	r0, r23
     a70:	00 0c       	add	r0, r0
     a72:	88 0b       	sbc	r24, r24
     a74:	99 0b       	sbc	r25, r25
     a76:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__floatsisf>
     a7a:	a7 01       	movw	r20, r14
     a7c:	96 01       	movw	r18, r12
     a7e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__mulsf3>
     a82:	4b 01       	movw	r8, r22
     a84:	5c 01       	movw	r10, r24
     a86:	61 2f       	mov	r22, r17
     a88:	11 0f       	add	r17, r17
     a8a:	77 0b       	sbc	r23, r23
     a8c:	88 0b       	sbc	r24, r24
     a8e:	99 0b       	sbc	r25, r25
     a90:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__floatsisf>
     a94:	a5 01       	movw	r20, r10
     a96:	94 01       	movw	r18, r8
     a98:	0e 94 37 0c 	call	0x186e	; 0x186e <__addsf3>
     a9c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
     aa0:	d6 2f       	mov	r29, r22
	speed_b = (int8_t)(speed_b_floor + (speed_b_ceil - speed_b_floor) * position_blend);
     aa2:	6c 2f       	mov	r22, r28
     aa4:	cc 0f       	add	r28, r28
     aa6:	77 0b       	sbc	r23, r23
     aa8:	60 1b       	sub	r22, r16
     aaa:	71 09       	sbc	r23, r1
     aac:	07 fd       	sbrc	r16, 7
     aae:	73 95       	inc	r23
     ab0:	07 2e       	mov	r0, r23
     ab2:	00 0c       	add	r0, r0
     ab4:	88 0b       	sbc	r24, r24
     ab6:	99 0b       	sbc	r25, r25
     ab8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__floatsisf>
     abc:	a7 01       	movw	r20, r14
     abe:	96 01       	movw	r18, r12
     ac0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__mulsf3>
     ac4:	6b 01       	movw	r12, r22
     ac6:	7c 01       	movw	r14, r24
     ac8:	60 2f       	mov	r22, r16
     aca:	00 0f       	add	r16, r16
     acc:	77 0b       	sbc	r23, r23
     ace:	88 0b       	sbc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__floatsisf>
     ad6:	a7 01       	movw	r20, r14
     ad8:	96 01       	movw	r18, r12
     ada:	0e 94 37 0c 	call	0x186e	; 0x186e <__addsf3>
     ade:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
     ae2:	c6 2f       	mov	r28, r22

	servo_set_angle_minus_90_90(speed_a, 1);
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	8d 2f       	mov	r24, r29
     ae8:	0e 94 49 03 	call	0x692	; 0x692 <servo_set_angle_minus_90_90>
	servo_set_angle_minus_90_90(speed_b, 2);
     aec:	62 e0       	ldi	r22, 0x02	; 2
     aee:	8c 2f       	mov	r24, r28
     af0:	0e 94 49 03 	call	0x692	; 0x692 <servo_set_angle_minus_90_90>
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	8f 90       	pop	r8
     b0c:	08 95       	ret

00000b0e <setup_exit>:


#define MODE_RUNNING 0
#define MODE_SETUP 1

void setup_exit(uint8_t* mode, config_t* config, uint8_t* focused){
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	8b 01       	movw	r16, r22
    *mode = MODE_RUNNING;
     b16:	fc 01       	movw	r30, r24
     b18:	10 82       	st	Z, r1
    *focused = 0;
     b1a:	fa 01       	movw	r30, r20
     b1c:	10 82       	st	Z, r1
    //config_save(config);
    lcd_clear();
     b1e:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
    lcd_set_cursor(0, 0);
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
    lcd_print("Save config?");
     b2a:	89 eb       	ldi	r24, 0xB9	; 185
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
	lcd_set_cursor(1, 1);
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
	lcd_print("Yes");
     b3a:	86 ec       	ldi	r24, 0xC6	; 198
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
	lcd_set_cursor(1, 6);
     b42:	66 e0       	ldi	r22, 0x06	; 6
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
	lcd_print("No");
     b4a:	8a ec       	ldi	r24, 0xCA	; 202
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
	uint8_t save = false;
     b52:	c0 e0       	ldi	r28, 0x00	; 0
    while (!button_ok()){
     b54:	2a c0       	rjmp	.+84     	; 0xbaa <setup_exit+0x9c>
		if (button_down()){
     b56:	0e 94 b3 04 	call	0x966	; 0x966 <button_down>
     b5a:	88 23       	and	r24, r24
     b5c:	89 f0       	breq	.+34     	; 0xb80 <setup_exit+0x72>
			save = false;
			lcd_set_cursor(1, 0);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print(" ");
     b66:	89 ee       	ldi	r24, 0xE9	; 233
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			lcd_set_cursor(1, 5);
     b6e:	65 e0       	ldi	r22, 0x05	; 5
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print(">");
     b76:	8d ec       	ldi	r24, 0xCD	; 205
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
	lcd_set_cursor(1, 6);
	lcd_print("No");
	uint8_t save = false;
    while (!button_ok()){
		if (button_down()){
			save = false;
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
			lcd_set_cursor(1, 0);
			lcd_print(" ");
			lcd_set_cursor(1, 5);
			lcd_print(">");
		}	
		if (button_up()){
     b80:	0e 94 ab 04 	call	0x956	; 0x956 <button_up>
     b84:	88 23       	and	r24, r24
     b86:	89 f0       	breq	.+34     	; 0xbaa <setup_exit+0x9c>
			save = true;
			lcd_set_cursor(1, 0);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print(">");
     b90:	8d ec       	ldi	r24, 0xCD	; 205
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			lcd_set_cursor(1, 5);
     b98:	65 e0       	ldi	r22, 0x05	; 5
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print(" ");
     ba0:	89 ee       	ldi	r24, 0xE9	; 233
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			lcd_print(" ");
			lcd_set_cursor(1, 5);
			lcd_print(">");
		}	
		if (button_up()){
			save = true;
     ba8:	c1 e0       	ldi	r28, 0x01	; 1
	lcd_set_cursor(1, 1);
	lcd_print("Yes");
	lcd_set_cursor(1, 6);
	lcd_print("No");
	uint8_t save = false;
    while (!button_ok()){
     baa:	0e 94 ba 04 	call	0x974	; 0x974 <button_ok>
     bae:	88 23       	and	r24, r24
     bb0:	91 f2       	breq	.-92     	; 0xb56 <setup_exit+0x48>
			lcd_print(">");
			lcd_set_cursor(1, 5);
			lcd_print(" ");
		}	
	}
	if (save){
     bb2:	cc 23       	and	r28, r28
     bb4:	19 f0       	breq	.+6      	; 0xbbc <setup_exit+0xae>
		config_save(config);
     bb6:	c8 01       	movw	r24, r16
     bb8:	0e 94 88 02 	call	0x510	; 0x510 <config_save>
	}
    lcd_clear();
     bbc:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
}
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	08 95       	ret

00000bc8 <setup_case>:

void setup_case(const char* text, uint8_t* focused, uint8_t* up_pressed, uint8_t* down_pressed, int16_t* config_value){
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	4c 01       	movw	r8, r24
     be2:	7b 01       	movw	r14, r22
     be4:	5a 01       	movw	r10, r20
     be6:	69 01       	movw	r12, r18
     be8:	e8 01       	movw	r28, r16
    lcd_set_cursor(0, 0);
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
    lcd_print(text);
     bf2:	c4 01       	movw	r24, r8
     bf4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    lcd_set_cursor(1, 0);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
    lcd_print_int(*config_value, 10);
     c00:	6a e0       	ldi	r22, 0x0A	; 10
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	88 81       	ld	r24, Y
     c06:	99 81       	ldd	r25, Y+1	; 0x01
     c08:	0e 94 8a 03 	call	0x714	; 0x714 <lcd_print_int>
	lcd_print(" ");
     c0c:	89 ee       	ldi	r24, 0xE9	; 233
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    if (*focused){
     c14:	f7 01       	movw	r30, r14
     c16:	80 81       	ld	r24, Z
     c18:	88 23       	and	r24, r24
     c1a:	91 f0       	breq	.+36     	; 0xc40 <setup_case+0x78>
        if (*up_pressed){
     c1c:	f5 01       	movw	r30, r10
     c1e:	80 81       	ld	r24, Z
     c20:	88 23       	and	r24, r24
     c22:	29 f0       	breq	.+10     	; 0xc2e <setup_case+0x66>
            *config_value += 1;
     c24:	88 81       	ld	r24, Y
     c26:	99 81       	ldd	r25, Y+1	; 0x01
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	99 83       	std	Y+1, r25	; 0x01
     c2c:	88 83       	st	Y, r24
        }
        if (*down_pressed){
     c2e:	f6 01       	movw	r30, r12
     c30:	80 81       	ld	r24, Z
     c32:	88 23       	and	r24, r24
     c34:	29 f0       	breq	.+10     	; 0xc40 <setup_case+0x78>
            *config_value -= 1;
     c36:	88 81       	ld	r24, Y
     c38:	99 81       	ldd	r25, Y+1	; 0x01
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	99 83       	std	Y+1, r25	; 0x01
     c3e:	88 83       	st	Y, r24
        }
    }
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	bf 90       	pop	r11
     c52:	af 90       	pop	r10
     c54:	9f 90       	pop	r9
     c56:	8f 90       	pop	r8
     c58:	08 95       	ret

00000c5a <setup_mode>:

void setup_mode(config_t* config, uint8_t* mode, const config_t* default_config){
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <setup_mode+0x14>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	7c 01       	movw	r14, r24
     c74:	8b 01       	movw	r16, r22
     c76:	6a 01       	movw	r12, r20
	static uint8_t setup_position = 0;
	static uint8_t focused = 0;

	uint8_t up_pressed = button_up();
     c78:	0e 94 ab 04 	call	0x956	; 0x956 <button_up>
     c7c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t down_pressed = button_down();
     c7e:	0e 94 b3 04 	call	0x966	; 0x966 <button_down>
     c82:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t servo_preview = switch_armed();
     c84:	0e 94 c3 04 	call	0x986	; 0x986 <switch_armed>
     c88:	b8 2e       	mov	r11, r24

	lcd_set_cursor(1, 15);
     c8a:	6f e0       	ldi	r22, 0x0F	; 15
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
	lcd_print((servo_preview) ? "A" : "D");
     c92:	bb 20       	and	r11, r11
     c94:	19 f0       	breq	.+6      	; 0xc9c <setup_mode+0x42>
     c96:	8f ec       	ldi	r24, 0xCF	; 207
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <setup_mode+0x46>
     c9c:	81 ed       	ldi	r24, 0xD1	; 209
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
	if (!servo_preview) {
     ca4:	b1 10       	cpse	r11, r1
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <setup_mode+0x58>
		set_speed(config->release_position_a, config->release_position_b);
     ca8:	f7 01       	movw	r30, r14
     caa:	60 8d       	ldd	r22, Z+24	; 0x18
     cac:	86 89       	ldd	r24, Z+22	; 0x16
     cae:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
	}

	if (button_ok()){
     cb2:	0e 94 ba 04 	call	0x974	; 0x974 <button_ok>
     cb6:	88 23       	and	r24, r24
     cb8:	19 f1       	breq	.+70     	; 0xd00 <setup_mode+0xa6>
		focused = !focused;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <focused.1956>
     cc0:	91 11       	cpse	r25, r1
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <focused.1956>
		if (focused){
     cc8:	88 23       	and	r24, r24
     cca:	49 f0       	breq	.+18     	; 0xcde <setup_mode+0x84>
			lcd_set_cursor(1, 14);
     ccc:	6e e0       	ldi	r22, 0x0E	; 14
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print("<");
     cd4:	83 ed       	ldi	r24, 0xD3	; 211
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
     cdc:	08 c0       	rjmp	.+16     	; 0xcee <setup_mode+0x94>
		}
		else{
			lcd_set_cursor(1, 14);
     cde:	6e e0       	ldi	r22, 0x0E	; 14
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print(" ");
     ce6:	89 ee       	ldi	r24, 0xE9	; 233
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
     cee:	ff ef       	ldi	r31, 0xFF	; 255
     cf0:	23 ec       	ldi	r18, 0xC3	; 195
     cf2:	89 e0       	ldi	r24, 0x09	; 9
     cf4:	f1 50       	subi	r31, 0x01	; 1
     cf6:	20 40       	sbci	r18, 0x00	; 0
     cf8:	80 40       	sbci	r24, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <setup_mode+0x9a>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <setup_mode+0xa4>
     cfe:	00 00       	nop
		}
		_delay_ms(200);
	}
	if (!focused){
     d00:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     d04:	81 11       	cpse	r24, r1
     d06:	41 c0       	rjmp	.+130    	; 0xd8a <setup_mode+0x130>
		if (up_pressed && down_pressed && !button_ok()){
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	88 23       	and	r24, r24
     d0c:	71 f0       	breq	.+28     	; 0xd2a <setup_mode+0xd0>
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	88 23       	and	r24, r24
     d12:	59 f0       	breq	.+22     	; 0xd2a <setup_mode+0xd0>
     d14:	0e 94 ba 04 	call	0x974	; 0x974 <button_ok>
     d18:	81 11       	cpse	r24, r1
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <setup_mode+0xd0>
			setup_exit(mode, config, &focused);
     d1c:	4a ec       	ldi	r20, 0xCA	; 202
     d1e:	53 e0       	ldi	r21, 0x03	; 3
     d20:	b7 01       	movw	r22, r14
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 87 05 	call	0xb0e	; 0xb0e <setup_exit>
			return;
     d28:	90 c2       	rjmp	.+1312   	; 0x124a <setup_mode+0x5f0>
		}
		if (up_pressed){
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	88 23       	and	r24, r24
     d2e:	a9 f0       	breq	.+42     	; 0xd5a <setup_mode+0x100>
			setup_position = (setup_position + 1) % 17;
     d30:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <setup_position.1955>
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	61 e1       	ldi	r22, 0x11	; 17
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__divmodhi4>
     d40:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <setup_position.1955>
     d44:	9f ef       	ldi	r25, 0xFF	; 255
     d46:	e3 ec       	ldi	r30, 0xC3	; 195
     d48:	f9 e0       	ldi	r31, 0x09	; 9
     d4a:	91 50       	subi	r25, 0x01	; 1
     d4c:	e0 40       	sbci	r30, 0x00	; 0
     d4e:	f0 40       	sbci	r31, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <setup_mode+0xf0>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <setup_mode+0xfa>
     d54:	00 00       	nop
			_delay_ms(200);
			lcd_clear();
     d56:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
		}
		if (down_pressed){
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	88 23       	and	r24, r24
     d5e:	a9 f0       	breq	.+42     	; 0xd8a <setup_mode+0x130>
			setup_position = (setup_position + 16) % 17;
     d60:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <setup_position.1955>
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	40 96       	adiw	r24, 0x10	; 16
     d68:	61 e1       	ldi	r22, 0x11	; 17
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__divmodhi4>
     d70:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <setup_position.1955>
     d74:	2f ef       	ldi	r18, 0xFF	; 255
     d76:	83 ec       	ldi	r24, 0xC3	; 195
     d78:	99 e0       	ldi	r25, 0x09	; 9
     d7a:	21 50       	subi	r18, 0x01	; 1
     d7c:	80 40       	sbci	r24, 0x00	; 0
     d7e:	90 40       	sbci	r25, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <setup_mode+0x120>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <setup_mode+0x12a>
     d84:	00 00       	nop
			_delay_ms(200);
			lcd_clear();
     d86:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
		}
	}

	if (focused && (up_pressed || down_pressed)){
     d8a:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     d8e:	88 23       	and	r24, r24
     d90:	71 f0       	breq	.+28     	; 0xdae <setup_mode+0x154>
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	81 11       	cpse	r24, r1
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <setup_mode+0x144>
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	88 23       	and	r24, r24
     d9c:	41 f0       	breq	.+16     	; 0xdae <setup_mode+0x154>
		lcd_set_cursor(1, 0);
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
		lcd_print("              ");
     da6:	8c ed       	ldi	r24, 0xDC	; 220
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
	}

	switch (setup_position){
     dae:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <setup_position.1955>
     db2:	8e 2f       	mov	r24, r30
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	81 31       	cpi	r24, 0x11	; 17
     db8:	91 05       	cpc	r25, r1
     dba:	08 f0       	brcs	.+2      	; 0xdbe <setup_mode+0x164>
     dbc:	33 c2       	rjmp	.+1126   	; 0x1224 <setup_mode+0x5ca>
     dbe:	fc 01       	movw	r30, r24
     dc0:	ec 5c       	subi	r30, 0xCC	; 204
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__tablejump2__>
        case 0:
            setup_case("1.valid_sample_timeout", &focused, &up_pressed, &down_pressed, &config->valid_sample_timeout);
     dc8:	87 01       	movw	r16, r14
     dca:	9e 01       	movw	r18, r28
     dcc:	2e 5f       	subi	r18, 0xFE	; 254
     dce:	3f 4f       	sbci	r19, 0xFF	; 255
     dd0:	ae 01       	movw	r20, r28
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	6a ec       	ldi	r22, 0xCA	; 202
     dd8:	73 e0       	ldi	r23, 0x03	; 3
     dda:	85 ed       	ldi	r24, 0xD5	; 213
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            break;
     de2:	20 c2       	rjmp	.+1088   	; 0x1224 <setup_mode+0x5ca>

        case 1:
            setup_case("2.positions_a_-2", &focused, &up_pressed, &down_pressed, &config->positions_a[0]);
     de4:	87 01       	movw	r16, r14
     de6:	0e 5f       	subi	r16, 0xFE	; 254
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	9e 01       	movw	r18, r28
     dec:	2e 5f       	subi	r18, 0xFE	; 254
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	ae 01       	movw	r20, r28
     df2:	4f 5f       	subi	r20, 0xFF	; 255
     df4:	5f 4f       	sbci	r21, 0xFF	; 255
     df6:	6a ec       	ldi	r22, 0xCA	; 202
     df8:	73 e0       	ldi	r23, 0x03	; 3
     dfa:	8c ee       	ldi	r24, 0xEC	; 236
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[0], config->positions_b[0]);
     e02:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     e06:	88 23       	and	r24, r24
     e08:	09 f4       	brne	.+2      	; 0xe0c <setup_mode+0x1b2>
     e0a:	0c c2       	rjmp	.+1048   	; 0x1224 <setup_mode+0x5ca>
     e0c:	bb 20       	and	r11, r11
     e0e:	09 f4       	brne	.+2      	; 0xe12 <setup_mode+0x1b8>
     e10:	09 c2       	rjmp	.+1042   	; 0x1224 <setup_mode+0x5ca>
     e12:	f7 01       	movw	r30, r14
     e14:	64 85       	ldd	r22, Z+12	; 0x0c
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     e1c:	03 c2       	rjmp	.+1030   	; 0x1224 <setup_mode+0x5ca>
            break;

        case 2:
            setup_case("3.positions_b_-2", &focused, &up_pressed, &down_pressed, &config->positions_b[0]);
     e1e:	87 01       	movw	r16, r14
     e20:	04 5f       	subi	r16, 0xF4	; 244
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	9e 01       	movw	r18, r28
     e26:	2e 5f       	subi	r18, 0xFE	; 254
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	ae 01       	movw	r20, r28
     e2c:	4f 5f       	subi	r20, 0xFF	; 255
     e2e:	5f 4f       	sbci	r21, 0xFF	; 255
     e30:	6a ec       	ldi	r22, 0xCA	; 202
     e32:	73 e0       	ldi	r23, 0x03	; 3
     e34:	8d ef       	ldi	r24, 0xFD	; 253
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview)  set_speed(config->positions_a[0], config->positions_b[0]);
     e3c:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     e40:	88 23       	and	r24, r24
     e42:	09 f4       	brne	.+2      	; 0xe46 <setup_mode+0x1ec>
     e44:	ef c1       	rjmp	.+990    	; 0x1224 <setup_mode+0x5ca>
     e46:	bb 20       	and	r11, r11
     e48:	09 f4       	brne	.+2      	; 0xe4c <setup_mode+0x1f2>
     e4a:	ec c1       	rjmp	.+984    	; 0x1224 <setup_mode+0x5ca>
     e4c:	f7 01       	movw	r30, r14
     e4e:	64 85       	ldd	r22, Z+12	; 0x0c
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     e56:	e6 c1       	rjmp	.+972    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 3:
            setup_case("4.positions_a_-1", &focused, &up_pressed, &down_pressed, &config->positions_a[1]);
     e58:	87 01       	movw	r16, r14
     e5a:	0c 5f       	subi	r16, 0xFC	; 252
     e5c:	1f 4f       	sbci	r17, 0xFF	; 255
     e5e:	9e 01       	movw	r18, r28
     e60:	2e 5f       	subi	r18, 0xFE	; 254
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	ae 01       	movw	r20, r28
     e66:	4f 5f       	subi	r20, 0xFF	; 255
     e68:	5f 4f       	sbci	r21, 0xFF	; 255
     e6a:	6a ec       	ldi	r22, 0xCA	; 202
     e6c:	73 e0       	ldi	r23, 0x03	; 3
     e6e:	8e e0       	ldi	r24, 0x0E	; 14
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[1], config->positions_b[1]);
     e76:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     e7a:	88 23       	and	r24, r24
     e7c:	09 f4       	brne	.+2      	; 0xe80 <setup_mode+0x226>
     e7e:	d2 c1       	rjmp	.+932    	; 0x1224 <setup_mode+0x5ca>
     e80:	bb 20       	and	r11, r11
     e82:	09 f4       	brne	.+2      	; 0xe86 <setup_mode+0x22c>
     e84:	cf c1       	rjmp	.+926    	; 0x1224 <setup_mode+0x5ca>
     e86:	f7 01       	movw	r30, r14
     e88:	66 85       	ldd	r22, Z+14	; 0x0e
     e8a:	84 81       	ldd	r24, Z+4	; 0x04
     e8c:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     e90:	c9 c1       	rjmp	.+914    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 4:
            setup_case("5.positions_b_-1", &focused, &up_pressed, &down_pressed, &config->positions_b[1]);
     e92:	87 01       	movw	r16, r14
     e94:	02 5f       	subi	r16, 0xF2	; 242
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
     e98:	9e 01       	movw	r18, r28
     e9a:	2e 5f       	subi	r18, 0xFE	; 254
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	ae 01       	movw	r20, r28
     ea0:	4f 5f       	subi	r20, 0xFF	; 255
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	6a ec       	ldi	r22, 0xCA	; 202
     ea6:	73 e0       	ldi	r23, 0x03	; 3
     ea8:	8f e1       	ldi	r24, 0x1F	; 31
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[1], config->positions_b[1]);
     eb0:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     eb4:	88 23       	and	r24, r24
     eb6:	09 f4       	brne	.+2      	; 0xeba <setup_mode+0x260>
     eb8:	b5 c1       	rjmp	.+874    	; 0x1224 <setup_mode+0x5ca>
     eba:	bb 20       	and	r11, r11
     ebc:	09 f4       	brne	.+2      	; 0xec0 <setup_mode+0x266>
     ebe:	b2 c1       	rjmp	.+868    	; 0x1224 <setup_mode+0x5ca>
     ec0:	f7 01       	movw	r30, r14
     ec2:	66 85       	ldd	r22, Z+14	; 0x0e
     ec4:	84 81       	ldd	r24, Z+4	; 0x04
     ec6:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     eca:	ac c1       	rjmp	.+856    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 5:
            setup_case("6.positions_a_0", &focused, &up_pressed, &down_pressed, &config->positions_a[2]);
     ecc:	87 01       	movw	r16, r14
     ece:	0a 5f       	subi	r16, 0xFA	; 250
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	9e 01       	movw	r18, r28
     ed4:	2e 5f       	subi	r18, 0xFE	; 254
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
     ed8:	ae 01       	movw	r20, r28
     eda:	4f 5f       	subi	r20, 0xFF	; 255
     edc:	5f 4f       	sbci	r21, 0xFF	; 255
     ede:	6a ec       	ldi	r22, 0xCA	; 202
     ee0:	73 e0       	ldi	r23, 0x03	; 3
     ee2:	80 e3       	ldi	r24, 0x30	; 48
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[2], config->positions_b[2]);
     eea:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <setup_mode+0x29a>
     ef2:	98 c1       	rjmp	.+816    	; 0x1224 <setup_mode+0x5ca>
     ef4:	bb 20       	and	r11, r11
     ef6:	09 f4       	brne	.+2      	; 0xefa <setup_mode+0x2a0>
     ef8:	95 c1       	rjmp	.+810    	; 0x1224 <setup_mode+0x5ca>
     efa:	f7 01       	movw	r30, r14
     efc:	60 89       	ldd	r22, Z+16	; 0x10
     efe:	86 81       	ldd	r24, Z+6	; 0x06
     f00:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     f04:	8f c1       	rjmp	.+798    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 6:
            setup_case("7.positions_b_0", &focused, &up_pressed, &down_pressed, &config->positions_b[2]);
     f06:	87 01       	movw	r16, r14
     f08:	00 5f       	subi	r16, 0xF0	; 240
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	9e 01       	movw	r18, r28
     f0e:	2e 5f       	subi	r18, 0xFE	; 254
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	ae 01       	movw	r20, r28
     f14:	4f 5f       	subi	r20, 0xFF	; 255
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	6a ec       	ldi	r22, 0xCA	; 202
     f1a:	73 e0       	ldi	r23, 0x03	; 3
     f1c:	80 e4       	ldi	r24, 0x40	; 64
     f1e:	92 e0       	ldi	r25, 0x02	; 2
     f20:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[2], config->positions_b[2]);
     f24:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     f28:	88 23       	and	r24, r24
     f2a:	09 f4       	brne	.+2      	; 0xf2e <setup_mode+0x2d4>
     f2c:	7b c1       	rjmp	.+758    	; 0x1224 <setup_mode+0x5ca>
     f2e:	bb 20       	and	r11, r11
     f30:	09 f4       	brne	.+2      	; 0xf34 <setup_mode+0x2da>
     f32:	78 c1       	rjmp	.+752    	; 0x1224 <setup_mode+0x5ca>
     f34:	f7 01       	movw	r30, r14
     f36:	60 89       	ldd	r22, Z+16	; 0x10
     f38:	86 81       	ldd	r24, Z+6	; 0x06
     f3a:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     f3e:	72 c1       	rjmp	.+740    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 7:
            setup_case("8.positions_a_1", &focused, &up_pressed, &down_pressed, &config->positions_a[3]);
     f40:	87 01       	movw	r16, r14
     f42:	08 5f       	subi	r16, 0xF8	; 248
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	9e 01       	movw	r18, r28
     f48:	2e 5f       	subi	r18, 0xFE	; 254
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	ae 01       	movw	r20, r28
     f4e:	4f 5f       	subi	r20, 0xFF	; 255
     f50:	5f 4f       	sbci	r21, 0xFF	; 255
     f52:	6a ec       	ldi	r22, 0xCA	; 202
     f54:	73 e0       	ldi	r23, 0x03	; 3
     f56:	80 e5       	ldi	r24, 0x50	; 80
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[3], config->positions_b[3]);
     f5e:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     f62:	88 23       	and	r24, r24
     f64:	09 f4       	brne	.+2      	; 0xf68 <setup_mode+0x30e>
     f66:	5e c1       	rjmp	.+700    	; 0x1224 <setup_mode+0x5ca>
     f68:	bb 20       	and	r11, r11
     f6a:	09 f4       	brne	.+2      	; 0xf6e <setup_mode+0x314>
     f6c:	5b c1       	rjmp	.+694    	; 0x1224 <setup_mode+0x5ca>
     f6e:	f7 01       	movw	r30, r14
     f70:	62 89       	ldd	r22, Z+18	; 0x12
     f72:	80 85       	ldd	r24, Z+8	; 0x08
     f74:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     f78:	55 c1       	rjmp	.+682    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 8:
            setup_case("9.positions_b_1", &focused, &up_pressed, &down_pressed, &config->positions_b[3]);
     f7a:	87 01       	movw	r16, r14
     f7c:	0e 5e       	subi	r16, 0xEE	; 238
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	9e 01       	movw	r18, r28
     f82:	2e 5f       	subi	r18, 0xFE	; 254
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	ae 01       	movw	r20, r28
     f88:	4f 5f       	subi	r20, 0xFF	; 255
     f8a:	5f 4f       	sbci	r21, 0xFF	; 255
     f8c:	6a ec       	ldi	r22, 0xCA	; 202
     f8e:	73 e0       	ldi	r23, 0x03	; 3
     f90:	80 e6       	ldi	r24, 0x60	; 96
     f92:	92 e0       	ldi	r25, 0x02	; 2
     f94:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[3], config->positions_b[3]);
     f98:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     f9c:	88 23       	and	r24, r24
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <setup_mode+0x348>
     fa0:	41 c1       	rjmp	.+642    	; 0x1224 <setup_mode+0x5ca>
     fa2:	bb 20       	and	r11, r11
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <setup_mode+0x34e>
     fa6:	3e c1       	rjmp	.+636    	; 0x1224 <setup_mode+0x5ca>
     fa8:	f7 01       	movw	r30, r14
     faa:	62 89       	ldd	r22, Z+18	; 0x12
     fac:	80 85       	ldd	r24, Z+8	; 0x08
     fae:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     fb2:	38 c1       	rjmp	.+624    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 9:
            setup_case("10.positions_a_2", &focused, &up_pressed, &down_pressed, &config->positions_a[4]);
     fb4:	87 01       	movw	r16, r14
     fb6:	06 5f       	subi	r16, 0xF6	; 246
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	9e 01       	movw	r18, r28
     fbc:	2e 5f       	subi	r18, 0xFE	; 254
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	ae 01       	movw	r20, r28
     fc2:	4f 5f       	subi	r20, 0xFF	; 255
     fc4:	5f 4f       	sbci	r21, 0xFF	; 255
     fc6:	6a ec       	ldi	r22, 0xCA	; 202
     fc8:	73 e0       	ldi	r23, 0x03	; 3
     fca:	80 e7       	ldi	r24, 0x70	; 112
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[4], config->positions_b[4]);
     fd2:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <setup_mode+0x382>
     fda:	24 c1       	rjmp	.+584    	; 0x1224 <setup_mode+0x5ca>
     fdc:	bb 20       	and	r11, r11
     fde:	09 f4       	brne	.+2      	; 0xfe2 <setup_mode+0x388>
     fe0:	21 c1       	rjmp	.+578    	; 0x1224 <setup_mode+0x5ca>
     fe2:	f7 01       	movw	r30, r14
     fe4:	64 89       	ldd	r22, Z+20	; 0x14
     fe6:	82 85       	ldd	r24, Z+10	; 0x0a
     fe8:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
     fec:	1b c1       	rjmp	.+566    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 10:
            setup_case("11.positions_b_2", &focused, &up_pressed, &down_pressed, &config->positions_b[4]);
     fee:	87 01       	movw	r16, r14
     ff0:	0c 5e       	subi	r16, 0xEC	; 236
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	9e 01       	movw	r18, r28
     ff6:	2e 5f       	subi	r18, 0xFE	; 254
     ff8:	3f 4f       	sbci	r19, 0xFF	; 255
     ffa:	ae 01       	movw	r20, r28
     ffc:	4f 5f       	subi	r20, 0xFF	; 255
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    1000:	6a ec       	ldi	r22, 0xCA	; 202
    1002:	73 e0       	ldi	r23, 0x03	; 3
    1004:	81 e8       	ldi	r24, 0x81	; 129
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->positions_a[4], config->positions_b[4]);
    100c:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
    1010:	88 23       	and	r24, r24
    1012:	09 f4       	brne	.+2      	; 0x1016 <setup_mode+0x3bc>
    1014:	07 c1       	rjmp	.+526    	; 0x1224 <setup_mode+0x5ca>
    1016:	bb 20       	and	r11, r11
    1018:	09 f4       	brne	.+2      	; 0x101c <setup_mode+0x3c2>
    101a:	04 c1       	rjmp	.+520    	; 0x1224 <setup_mode+0x5ca>
    101c:	f7 01       	movw	r30, r14
    101e:	64 89       	ldd	r22, Z+20	; 0x14
    1020:	82 85       	ldd	r24, Z+10	; 0x0a
    1022:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
    1026:	fe c0       	rjmp	.+508    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 11:
            setup_case("12.release_pos_a", &focused, &up_pressed, &down_pressed, &config->release_position_a);
    1028:	87 01       	movw	r16, r14
    102a:	0a 5e       	subi	r16, 0xEA	; 234
    102c:	1f 4f       	sbci	r17, 0xFF	; 255
    102e:	9e 01       	movw	r18, r28
    1030:	2e 5f       	subi	r18, 0xFE	; 254
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	ae 01       	movw	r20, r28
    1036:	4f 5f       	subi	r20, 0xFF	; 255
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	6a ec       	ldi	r22, 0xCA	; 202
    103c:	73 e0       	ldi	r23, 0x03	; 3
    103e:	82 e9       	ldi	r24, 0x92	; 146
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->release_position_a, config->release_position_b);
    1046:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
    104a:	88 23       	and	r24, r24
    104c:	09 f4       	brne	.+2      	; 0x1050 <setup_mode+0x3f6>
    104e:	ea c0       	rjmp	.+468    	; 0x1224 <setup_mode+0x5ca>
    1050:	bb 20       	and	r11, r11
    1052:	09 f4       	brne	.+2      	; 0x1056 <setup_mode+0x3fc>
    1054:	e7 c0       	rjmp	.+462    	; 0x1224 <setup_mode+0x5ca>
    1056:	f7 01       	movw	r30, r14
    1058:	60 8d       	ldd	r22, Z+24	; 0x18
    105a:	86 89       	ldd	r24, Z+22	; 0x16
    105c:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
    1060:	e1 c0       	rjmp	.+450    	; 0x1224 <setup_mode+0x5ca>
            break;

        case 12:
            setup_case("13.release_pos_b", &focused, &up_pressed, &down_pressed, &config->release_position_b);
    1062:	87 01       	movw	r16, r14
    1064:	08 5e       	subi	r16, 0xE8	; 232
    1066:	1f 4f       	sbci	r17, 0xFF	; 255
    1068:	9e 01       	movw	r18, r28
    106a:	2e 5f       	subi	r18, 0xFE	; 254
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	ae 01       	movw	r20, r28
    1070:	4f 5f       	subi	r20, 0xFF	; 255
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	6a ec       	ldi	r22, 0xCA	; 202
    1076:	73 e0       	ldi	r23, 0x03	; 3
    1078:	83 ea       	ldi	r24, 0xA3	; 163
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup_case>
            if (focused && servo_preview) set_speed(config->release_position_a, config->release_position_b);
    1080:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
    1084:	88 23       	and	r24, r24
    1086:	09 f4       	brne	.+2      	; 0x108a <setup_mode+0x430>
    1088:	cd c0       	rjmp	.+410    	; 0x1224 <setup_mode+0x5ca>
    108a:	bb 20       	and	r11, r11
    108c:	09 f4       	brne	.+2      	; 0x1090 <setup_mode+0x436>
    108e:	ca c0       	rjmp	.+404    	; 0x1224 <setup_mode+0x5ca>
    1090:	f7 01       	movw	r30, r14
    1092:	60 8d       	ldd	r22, Z+24	; 0x18
    1094:	86 89       	ldd	r24, Z+22	; 0x16
    1096:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
    109a:	c4 c0       	rjmp	.+392    	; 0x1224 <setup_mode+0x5ca>
            break;

		case 13:
			lcd_set_cursor(0, 0);
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print("14.step_up");
    10a4:	84 eb       	ldi	r24, 0xB4	; 180
    10a6:	92 e0       	ldi	r25, 0x02	; 2
    10a8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			lcd_set_cursor(1, 0);
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print_float(config->step_up);
    10b4:	f7 01       	movw	r30, r14
    10b6:	62 8d       	ldd	r22, Z+26	; 0x1a
    10b8:	73 8d       	ldd	r23, Z+27	; 0x1b
    10ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    10bc:	95 8d       	ldd	r25, Z+29	; 0x1d
    10be:	0e 94 a7 03 	call	0x74e	; 0x74e <lcd_print_float>
			if (focused){
    10c2:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
    10c6:	88 23       	and	r24, r24
    10c8:	09 f4       	brne	.+2      	; 0x10cc <setup_mode+0x472>
    10ca:	ac c0       	rjmp	.+344    	; 0x1224 <setup_mode+0x5ca>
				if (up_pressed){
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 23       	and	r24, r24
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <setup_mode+0x498>
					config->step_up += 0.001f;
    10d2:	2f e6       	ldi	r18, 0x6F	; 111
    10d4:	32 e1       	ldi	r19, 0x12	; 18
    10d6:	43 e8       	ldi	r20, 0x83	; 131
    10d8:	5a e3       	ldi	r21, 0x3A	; 58
    10da:	f7 01       	movw	r30, r14
    10dc:	62 8d       	ldd	r22, Z+26	; 0x1a
    10de:	73 8d       	ldd	r23, Z+27	; 0x1b
    10e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    10e2:	95 8d       	ldd	r25, Z+29	; 0x1d
    10e4:	0e 94 37 0c 	call	0x186e	; 0x186e <__addsf3>
    10e8:	f7 01       	movw	r30, r14
    10ea:	62 8f       	std	Z+26, r22	; 0x1a
    10ec:	73 8f       	std	Z+27, r23	; 0x1b
    10ee:	84 8f       	std	Z+28, r24	; 0x1c
    10f0:	95 8f       	std	Z+29, r25	; 0x1d
				}
				if (down_pressed){
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <setup_mode+0x4a0>
    10f8:	95 c0       	rjmp	.+298    	; 0x1224 <setup_mode+0x5ca>
					config->step_up -= 0.001f;
    10fa:	2f e6       	ldi	r18, 0x6F	; 111
    10fc:	32 e1       	ldi	r19, 0x12	; 18
    10fe:	43 e8       	ldi	r20, 0x83	; 131
    1100:	5a e3       	ldi	r21, 0x3A	; 58
    1102:	f7 01       	movw	r30, r14
    1104:	62 8d       	ldd	r22, Z+26	; 0x1a
    1106:	73 8d       	ldd	r23, Z+27	; 0x1b
    1108:	84 8d       	ldd	r24, Z+28	; 0x1c
    110a:	95 8d       	ldd	r25, Z+29	; 0x1d
    110c:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    1110:	f7 01       	movw	r30, r14
    1112:	62 8f       	std	Z+26, r22	; 0x1a
    1114:	73 8f       	std	Z+27, r23	; 0x1b
    1116:	84 8f       	std	Z+28, r24	; 0x1c
    1118:	95 8f       	std	Z+29, r25	; 0x1d
    111a:	84 c0       	rjmp	.+264    	; 0x1224 <setup_mode+0x5ca>
				}
			}
			break;

		case 14:
			lcd_set_cursor(0, 0);
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print("15.step_down");
    1124:	8f eb       	ldi	r24, 0xBF	; 191
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			lcd_set_cursor(1, 0);
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print_float(config->step_down);
    1134:	f7 01       	movw	r30, r14
    1136:	66 8d       	ldd	r22, Z+30	; 0x1e
    1138:	77 8d       	ldd	r23, Z+31	; 0x1f
    113a:	80 a1       	ldd	r24, Z+32	; 0x20
    113c:	91 a1       	ldd	r25, Z+33	; 0x21
    113e:	0e 94 a7 03 	call	0x74e	; 0x74e <lcd_print_float>
			if (focused){
    1142:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
    1146:	88 23       	and	r24, r24
    1148:	09 f4       	brne	.+2      	; 0x114c <setup_mode+0x4f2>
    114a:	6c c0       	rjmp	.+216    	; 0x1224 <setup_mode+0x5ca>
				if (up_pressed){
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	88 23       	and	r24, r24
    1150:	81 f0       	breq	.+32     	; 0x1172 <setup_mode+0x518>
					config->step_down += 0.001f;
    1152:	2f e6       	ldi	r18, 0x6F	; 111
    1154:	32 e1       	ldi	r19, 0x12	; 18
    1156:	43 e8       	ldi	r20, 0x83	; 131
    1158:	5a e3       	ldi	r21, 0x3A	; 58
    115a:	f7 01       	movw	r30, r14
    115c:	66 8d       	ldd	r22, Z+30	; 0x1e
    115e:	77 8d       	ldd	r23, Z+31	; 0x1f
    1160:	80 a1       	ldd	r24, Z+32	; 0x20
    1162:	91 a1       	ldd	r25, Z+33	; 0x21
    1164:	0e 94 37 0c 	call	0x186e	; 0x186e <__addsf3>
    1168:	f7 01       	movw	r30, r14
    116a:	66 8f       	std	Z+30, r22	; 0x1e
    116c:	77 8f       	std	Z+31, r23	; 0x1f
    116e:	80 a3       	std	Z+32, r24	; 0x20
    1170:	91 a3       	std	Z+33, r25	; 0x21
				}
				if (down_pressed){
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	88 23       	and	r24, r24
    1176:	09 f4       	brne	.+2      	; 0x117a <setup_mode+0x520>
    1178:	55 c0       	rjmp	.+170    	; 0x1224 <setup_mode+0x5ca>
					config->step_down -= 0.001f;
    117a:	2f e6       	ldi	r18, 0x6F	; 111
    117c:	32 e1       	ldi	r19, 0x12	; 18
    117e:	43 e8       	ldi	r20, 0x83	; 131
    1180:	5a e3       	ldi	r21, 0x3A	; 58
    1182:	f7 01       	movw	r30, r14
    1184:	66 8d       	ldd	r22, Z+30	; 0x1e
    1186:	77 8d       	ldd	r23, Z+31	; 0x1f
    1188:	80 a1       	ldd	r24, Z+32	; 0x20
    118a:	91 a1       	ldd	r25, Z+33	; 0x21
    118c:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    1190:	f7 01       	movw	r30, r14
    1192:	66 8f       	std	Z+30, r22	; 0x1e
    1194:	77 8f       	std	Z+31, r23	; 0x1f
    1196:	80 a3       	std	Z+32, r24	; 0x20
    1198:	91 a3       	std	Z+33, r25	; 0x21
    119a:	44 c0       	rjmp	.+136    	; 0x1224 <setup_mode+0x5ca>
				}
			}
			break;

		case 15:
			lcd_set_cursor(0, 0);
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print("16.Reset");
    11a4:	8c ec       	ldi	r24, 0xCC	; 204
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			if (focused){
    11ac:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
    11b0:	88 23       	and	r24, r24
    11b2:	c1 f1       	breq	.+112    	; 0x1224 <setup_mode+0x5ca>
				focused = 0;
    11b4:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <focused.1956>
				config_clear();
    11b8:	0e 94 82 02 	call	0x504	; 0x504 <config_clear>
				*config = *default_config;
    11bc:	82 e2       	ldi	r24, 0x22	; 34
    11be:	f6 01       	movw	r30, r12
    11c0:	d7 01       	movw	r26, r14
    11c2:	01 90       	ld	r0, Z+
    11c4:	0d 92       	st	X+, r0
    11c6:	8a 95       	dec	r24
    11c8:	e1 f7       	brne	.-8      	; 0x11c2 <setup_mode+0x568>
				lcd_set_cursor(1, 0);
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
				lcd_print("Done!");
    11d2:	85 ed       	ldi	r24, 0xD5	; 213
    11d4:	92 e0       	ldi	r25, 0x02	; 2
    11d6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    11da:	ff ef       	ldi	r31, 0xFF	; 255
    11dc:	23 ed       	ldi	r18, 0xD3	; 211
    11de:	80 e3       	ldi	r24, 0x30	; 48
    11e0:	f1 50       	subi	r31, 0x01	; 1
    11e2:	20 40       	sbci	r18, 0x00	; 0
    11e4:	80 40       	sbci	r24, 0x00	; 0
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <setup_mode+0x586>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <setup_mode+0x590>
    11ea:	00 00       	nop
				_delay_ms(1000);
				lcd_set_cursor(1, 0);
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
				lcd_print("               ");
    11f4:	8b ed       	ldi	r24, 0xDB	; 219
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <setup_mode+0x5ca>
			}
			break;

		case 16:
			lcd_set_cursor(0, 0);
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			lcd_print("17.Exit");
    1206:	8b ee       	ldi	r24, 0xEB	; 235
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			if (focused){
    120e:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
    1212:	88 23       	and	r24, r24
    1214:	39 f0       	breq	.+14     	; 0x1224 <setup_mode+0x5ca>
				setup_exit(mode, config, &focused);
    1216:	4a ec       	ldi	r20, 0xCA	; 202
    1218:	53 e0       	ldi	r21, 0x03	; 3
    121a:	b7 01       	movw	r22, r14
    121c:	c8 01       	movw	r24, r16
    121e:	0e 94 87 05 	call	0xb0e	; 0xb0e <setup_exit>
				return;
    1222:	13 c0       	rjmp	.+38     	; 0x124a <setup_mode+0x5f0>
			break;
		default:
			break;
	}

	if ((up_pressed || down_pressed) && focused){
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	81 11       	cpse	r24, r1
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <setup_mode+0x5d6>
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 23       	and	r24, r24
    122e:	69 f0       	breq	.+26     	; 0x124a <setup_mode+0x5f0>
    1230:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <focused.1956>
    1234:	88 23       	and	r24, r24
    1236:	49 f0       	breq	.+18     	; 0x124a <setup_mode+0x5f0>
    1238:	9f ef       	ldi	r25, 0xFF	; 255
    123a:	e3 ec       	ldi	r30, 0xC3	; 195
    123c:	f9 e0       	ldi	r31, 0x09	; 9
    123e:	91 50       	subi	r25, 0x01	; 1
    1240:	e0 40       	sbci	r30, 0x00	; 0
    1242:	f0 40       	sbci	r31, 0x00	; 0
    1244:	e1 f7       	brne	.-8      	; 0x123e <setup_mode+0x5e4>
    1246:	00 c0       	rjmp	.+0      	; 0x1248 <setup_mode+0x5ee>
    1248:	00 00       	nop
		_delay_ms(200);
	}
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	08 95       	ret

00001262 <process_serial>:
#define CONFIG_SERIAL_H_

#include "config.h"
#include "USART.h"

void process_serial(uint8_t data, config_t* config){
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
	// config
	if (data == 'c'){
    1266:	83 36       	cpi	r24, 0x63	; 99
    1268:	29 f5       	brne	.+74     	; 0x12b4 <process_serial+0x52>
    126a:	eb 01       	movw	r28, r22
		USART_print("1 - Print config\n");
    126c:	83 ef       	ldi	r24, 0xF3	; 243
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
		//USART_print("2 - Edit config\n");
		USART_print("3 - Save config\n");
    1274:	85 e0       	ldi	r24, 0x05	; 5
    1276:	93 e0       	ldi	r25, 0x03	; 3
    1278:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
		USART_print("Enter option:\n");
    127c:	86 e1       	ldi	r24, 0x16	; 22
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	0e 94 76 00 	call	0xec	; 0xec <USART_print>

		int option = USART_read_int();
    1284:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <USART_read_int>
		switch (option){
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	91 05       	cpc	r25, r1
    128c:	19 f0       	breq	.+6      	; 0x1294 <process_serial+0x32>
    128e:	03 97       	sbiw	r24, 0x03	; 3
    1290:	29 f0       	breq	.+10     	; 0x129c <process_serial+0x3a>
    1292:	0c c0       	rjmp	.+24     	; 0x12ac <process_serial+0x4a>
			case 1:
				config_print(config);
    1294:	ce 01       	movw	r24, r28
    1296:	0e 94 06 02 	call	0x40c	; 0x40c <config_print>
				break;
    129a:	0c c0       	rjmp	.+24     	; 0x12b4 <process_serial+0x52>
				}
				config_print(config);
				break;
			}*/
			case 3:
				config_save(config);
    129c:	ce 01       	movw	r24, r28
    129e:	0e 94 88 02 	call	0x510	; 0x510 <config_save>
				USART_print("Config saved\n");
    12a2:	85 e2       	ldi	r24, 0x25	; 37
    12a4:	93 e0       	ldi	r25, 0x03	; 3
    12a6:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
				break;
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <process_serial+0x52>
			default:
				USART_print("Invalid option\n");
    12ac:	83 e3       	ldi	r24, 0x33	; 51
    12ae:	93 e0       	ldi	r25, 0x03	; 3
    12b0:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
				break;
		}
	}
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <transmit_binary>:
#include "buttons.h"
#include "config_screen.h"
#include "config_serial.h"
#include "control.h"

void transmit_binary(uint16_t data, uint8_t bits){
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	6c 01       	movw	r12, r24
	int mask = 1 << (bits - 1);
    12cc:	e6 2e       	mov	r14, r22
    12ce:	f1 2c       	mov	r15, r1
    12d0:	c7 01       	movw	r24, r14
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	c1 e0       	ldi	r28, 0x01	; 1
    12d6:	d0 e0       	ldi	r29, 0x00	; 0
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <transmit_binary+0x24>
    12da:	cc 0f       	add	r28, r28
    12dc:	dd 1f       	adc	r29, r29
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <transmit_binary+0x20>
	for (int i = 0; i < bits; i++){
    12e2:	00 e0       	ldi	r16, 0x00	; 0
    12e4:	10 e0       	ldi	r17, 0x00	; 0
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <transmit_binary+0x4a>
		USART_transmit((data & mask) ? '1' : '0');
    12e8:	ce 01       	movw	r24, r28
    12ea:	8c 21       	and	r24, r12
    12ec:	9d 21       	and	r25, r13
    12ee:	89 2b       	or	r24, r25
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <transmit_binary+0x3c>
    12f2:	81 e3       	ldi	r24, 0x31	; 49
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <transmit_binary+0x3e>
    12f6:	80 e3       	ldi	r24, 0x30	; 48
    12f8:	0e 94 6f 00 	call	0xde	; 0xde <USART_transmit>
		mask >>= 1;
    12fc:	d5 95       	asr	r29
    12fe:	c7 95       	ror	r28
#include "config_serial.h"
#include "control.h"

void transmit_binary(uint16_t data, uint8_t bits){
	int mask = 1 << (bits - 1);
	for (int i = 0; i < bits; i++){
    1300:	0f 5f       	subi	r16, 0xFF	; 255
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
    1304:	0e 15       	cp	r16, r14
    1306:	1f 05       	cpc	r17, r15
    1308:	7c f3       	brlt	.-34     	; 0x12e8 <transmit_binary+0x2e>
		USART_transmit((data & mask) ? '1' : '0');
		mask >>= 1;
	}
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	08 95       	ret

0000131c <bit_index>:

int8_t bit_index(uint8_t data){
    131c:	48 2f       	mov	r20, r24
	int8_t state_index = -1;
	for (uint8_t bit = 0; bit < 5; bit++){
    131e:	90 e0       	ldi	r25, 0x00	; 0
		mask >>= 1;
	}
}

int8_t bit_index(uint8_t data){
	int8_t state_index = -1;
    1320:	8f ef       	ldi	r24, 0xFF	; 255
	for (uint8_t bit = 0; bit < 5; bit++){
    1322:	10 c0       	rjmp	.+32     	; 0x1344 <bit_index+0x28>
		if (data & (1 << bit)){
    1324:	24 2f       	mov	r18, r20
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	09 2e       	mov	r0, r25
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <bit_index+0x14>
    132c:	35 95       	asr	r19
    132e:	27 95       	ror	r18
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <bit_index+0x10>
    1334:	20 ff       	sbrs	r18, 0
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <bit_index+0x26>
			if (state_index == -1){
    1338:	8f 3f       	cpi	r24, 0xFF	; 255
    133a:	11 f4       	brne	.+4      	; 0x1340 <bit_index+0x24>
				state_index = bit;
    133c:	89 2f       	mov	r24, r25
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <bit_index+0x26>
			}
			else{
				// if state_index is already set, it means that there are more than one non zero bit in the sample
				// it is considered invalid state
				state_index = -2;
    1340:	8e ef       	ldi	r24, 0xFE	; 254
	}
}

int8_t bit_index(uint8_t data){
	int8_t state_index = -1;
	for (uint8_t bit = 0; bit < 5; bit++){
    1342:	9f 5f       	subi	r25, 0xFF	; 255
    1344:	95 30       	cpi	r25, 0x05	; 5
    1346:	70 f3       	brcs	.-36     	; 0x1324 <bit_index+0x8>
				state_index = -2;
			}
		}
	}
	return state_index;
}
    1348:	08 95       	ret

0000134a <process_sample>:

void process_sample(uint8_t data, const config_t* config, uint8_t* release_out, float* speed_out_normalized){
    134a:	4f 92       	push	r4
    134c:	5f 92       	push	r5
    134e:	6f 92       	push	r6
    1350:	7f 92       	push	r7
    1352:	8f 92       	push	r8
    1354:	9f 92       	push	r9
    1356:	af 92       	push	r10
    1358:	bf 92       	push	r11
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	c8 2f       	mov	r28, r24
    136a:	5b 01       	movw	r10, r22
    136c:	7a 01       	movw	r14, r20
    136e:	89 01       	movw	r16, r18
	//static uint8_t prev_non_zero_state = 0;
	//static uint16_t uncertain_steps = 0;

	static float target_speed_normalized = 0;
	
	if ((data >> 5) == 0b010){
    1370:	82 95       	swap	r24
    1372:	86 95       	lsr	r24
    1374:	87 70       	andi	r24, 0x07	; 7
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	09 f0       	breq	.+2      	; 0x137c <process_sample+0x32>
    137a:	53 c1       	rjmp	.+678    	; 0x1622 <process_sample+0x2d8>
		if (data != prev_state){
    137c:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <prev_state.2011>
    1380:	c8 17       	cp	r28, r24
    1382:	09 f4       	brne	.+2      	; 0x1386 <process_sample+0x3c>
    1384:	89 c0       	rjmp	.+274    	; 0x1498 <process_sample+0x14e>
			if (state_rep < config->valid_sample_timeout){
    1386:	fb 01       	movw	r30, r22
    1388:	20 81       	ld	r18, Z
    138a:	31 81       	ldd	r19, Z+1	; 0x01
    138c:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <state_rep.2012>
    1390:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <state_rep.2012+0x1>
    1394:	82 17       	cp	r24, r18
    1396:	93 07       	cpc	r25, r19
    1398:	08 f0       	brcs	.+2      	; 0x139c <process_sample+0x52>
    139a:	53 c0       	rjmp	.+166    	; 0x1442 <process_sample+0xf8>
				//if high frequency samples are being received
				transmit_binary(data, 5);
    139c:	cc 2e       	mov	r12, r28
    139e:	d1 2c       	mov	r13, r1
    13a0:	65 e0       	ldi	r22, 0x05	; 5
    13a2:	c6 01       	movw	r24, r12
    13a4:	0e 94 5d 09 	call	0x12ba	; 0x12ba <transmit_binary>
				USART_transmit('\n');
    13a8:	8a e0       	ldi	r24, 0x0A	; 10
    13aa:	0e 94 6f 00 	call	0xde	; 0xde <USART_transmit>
				
				int8_t state_index = bit_index(data);
    13ae:	8c 2f       	mov	r24, r28
    13b0:	0e 94 8e 09 	call	0x131c	; 0x131c <bit_index>
				if (state_index >= 0){
    13b4:	88 23       	and	r24, r24
    13b6:	b4 f1       	brlt	.+108    	; 0x1424 <process_sample+0xda>
					//uncertain_steps = 0;
					//target_speed_normalized = config->speeds[state_index];
					// map from 0-4 to -1 to 1
					target_speed_normalized = (float)state_index / 2.0f - 1.0f;
    13b8:	68 2f       	mov	r22, r24
    13ba:	88 0f       	add	r24, r24
    13bc:	77 0b       	sbc	r23, r23
    13be:	88 0b       	sbc	r24, r24
    13c0:	99 0b       	sbc	r25, r25
    13c2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__floatsisf>
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__mulsf3>
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    13de:	60 93 c2 03 	sts	0x03C2, r22	; 0x8003c2 <__data_end>
    13e2:	70 93 c3 03 	sts	0x03C3, r23	; 0x8003c3 <__data_end+0x1>
    13e6:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <__data_end+0x2>
    13ea:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <__data_end+0x3>
					*release_out = false;
    13ee:	f7 01       	movw	r30, r14
    13f0:	10 82       	st	Z, r1
					USART_print("Target speed: ");
    13f2:	83 e4       	ldi	r24, 0x43	; 67
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
					USART_print_int(target_speed_normalized, 10);
    13fa:	60 91 c2 03 	lds	r22, 0x03C2	; 0x8003c2 <__data_end>
    13fe:	70 91 c3 03 	lds	r23, 0x03C3	; 0x8003c3 <__data_end+0x1>
    1402:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <__data_end+0x2>
    1406:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <__data_end+0x3>
    140a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__fixsfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	6a e0       	ldi	r22, 0x0A	; 10
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	0e 94 8c 00 	call	0x118	; 0x118 <USART_print_int>
					USART_print("\n");
    141a:	83 e2       	ldi	r24, 0x23	; 35
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
    1422:	33 c0       	rjmp	.+102    	; 0x148a <process_sample+0x140>
				}
				else if (state_index == -2){
    1424:	8e 3f       	cpi	r24, 0xFE	; 254
    1426:	89 f5       	brne	.+98     	; 0x148a <process_sample+0x140>
					USART_print("None-control data: ");
    1428:	82 e5       	ldi	r24, 0x52	; 82
    142a:	93 e0       	ldi	r25, 0x03	; 3
    142c:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
					transmit_binary(data, 5);
    1430:	65 e0       	ldi	r22, 0x05	; 5
    1432:	c6 01       	movw	r24, r12
    1434:	0e 94 5d 09 	call	0x12ba	; 0x12ba <transmit_binary>
					USART_print("\n");
    1438:	83 e2       	ldi	r24, 0x23	; 35
    143a:	93 e0       	ldi	r25, 0x03	; 3
    143c:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
    1440:	24 c0       	rjmp	.+72     	; 0x148a <process_sample+0x140>
				}
			}
			else{		
				// samples are not frequent enough to be sure
				target_speed_normalized = 0.0f;
    1442:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <__data_end>
    1446:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <__data_end+0x1>
    144a:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <__data_end+0x2>
    144e:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <__data_end+0x3>
				if (*speed_out_normalized < 0.0001f && *speed_out_normalized > -0.0001f){
    1452:	f8 01       	movw	r30, r16
    1454:	40 80       	ld	r4, Z
    1456:	51 80       	ldd	r5, Z+1	; 0x01
    1458:	62 80       	ldd	r6, Z+2	; 0x02
    145a:	73 80       	ldd	r7, Z+3	; 0x03
    145c:	27 e1       	ldi	r18, 0x17	; 23
    145e:	37 eb       	ldi	r19, 0xB7	; 183
    1460:	41 ed       	ldi	r20, 0xD1	; 209
    1462:	58 e3       	ldi	r21, 0x38	; 56
    1464:	c3 01       	movw	r24, r6
    1466:	b2 01       	movw	r22, r4
    1468:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
    146c:	88 23       	and	r24, r24
    146e:	6c f4       	brge	.+26     	; 0x148a <process_sample+0x140>
    1470:	27 e1       	ldi	r18, 0x17	; 23
    1472:	37 eb       	ldi	r19, 0xB7	; 183
    1474:	41 ed       	ldi	r20, 0xD1	; 209
    1476:	58 eb       	ldi	r21, 0xB8	; 184
    1478:	c3 01       	movw	r24, r6
    147a:	b2 01       	movw	r22, r4
    147c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__gesf2>
    1480:	18 16       	cp	r1, r24
    1482:	1c f4       	brge	.+6      	; 0x148a <process_sample+0x140>
					// release if speed is already at 0
					*release_out = true;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	f7 01       	movw	r30, r14
    1488:	80 83       	st	Z, r24
				}*/
			}
			//if (data & 0b11111){
			//	prev_non_zero_state = data;
			//}
			prev_state = data;
    148a:	c0 93 c8 03 	sts	0x03C8, r28	; 0x8003c8 <prev_state.2011>
			state_rep = 0;
    148e:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <state_rep.2012+0x1>
    1492:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <state_rep.2012>
    1496:	09 c0       	rjmp	.+18     	; 0x14aa <process_sample+0x160>
		}
		else{
			state_rep++;
    1498:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <state_rep.2012>
    149c:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <state_rep.2012+0x1>
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <state_rep.2012+0x1>
    14a6:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <state_rep.2012>
		}

		if (target_speed_normalized != *speed_out_normalized){
    14aa:	f8 01       	movw	r30, r16
    14ac:	c0 80       	ld	r12, Z
    14ae:	d1 80       	ldd	r13, Z+1	; 0x01
    14b0:	e2 80       	ldd	r14, Z+2	; 0x02
    14b2:	f3 80       	ldd	r15, Z+3	; 0x03
    14b4:	40 90 c2 03 	lds	r4, 0x03C2	; 0x8003c2 <__data_end>
    14b8:	50 90 c3 03 	lds	r5, 0x03C3	; 0x8003c3 <__data_end+0x1>
    14bc:	60 90 c4 03 	lds	r6, 0x03C4	; 0x8003c4 <__data_end+0x2>
    14c0:	70 90 c5 03 	lds	r7, 0x03C5	; 0x8003c5 <__data_end+0x3>
    14c4:	a3 01       	movw	r20, r6
    14c6:	92 01       	movw	r18, r4
    14c8:	c7 01       	movw	r24, r14
    14ca:	b6 01       	movw	r22, r12
    14cc:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <process_sample+0x18c>
    14d4:	b5 c0       	rjmp	.+362    	; 0x1640 <process_sample+0x2f6>
			if (*speed_out_normalized > 0){
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	a9 01       	movw	r20, r18
    14dc:	c7 01       	movw	r24, r14
    14de:	b6 01       	movw	r22, r12
    14e0:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__gesf2>
    14e4:	18 16       	cp	r1, r24
    14e6:	0c f0       	brlt	.+2      	; 0x14ea <process_sample+0x1a0>
    14e8:	4e c0       	rjmp	.+156    	; 0x1586 <process_sample+0x23c>
				if (target_speed_normalized > *speed_out_normalized){
    14ea:	a3 01       	movw	r20, r6
    14ec:	92 01       	movw	r18, r4
    14ee:	c7 01       	movw	r24, r14
    14f0:	b6 01       	movw	r22, r12
    14f2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	1c f5       	brge	.+70     	; 0x1540 <process_sample+0x1f6>
					if (target_speed_normalized - *speed_out_normalized < config->step_up){
    14fa:	a7 01       	movw	r20, r14
    14fc:	96 01       	movw	r18, r12
    14fe:	c3 01       	movw	r24, r6
    1500:	b2 01       	movw	r22, r4
    1502:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    1506:	f5 01       	movw	r30, r10
    1508:	82 8c       	ldd	r8, Z+26	; 0x1a
    150a:	93 8c       	ldd	r9, Z+27	; 0x1b
    150c:	a4 8c       	ldd	r10, Z+28	; 0x1c
    150e:	b5 8c       	ldd	r11, Z+29	; 0x1d
    1510:	a5 01       	movw	r20, r10
    1512:	94 01       	movw	r18, r8
    1514:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
    1518:	88 23       	and	r24, r24
    151a:	34 f4       	brge	.+12     	; 0x1528 <process_sample+0x1de>
						*speed_out_normalized = target_speed_normalized;
    151c:	f8 01       	movw	r30, r16
    151e:	40 82       	st	Z, r4
    1520:	51 82       	std	Z+1, r5	; 0x01
    1522:	62 82       	std	Z+2, r6	; 0x02
    1524:	73 82       	std	Z+3, r7	; 0x03
    1526:	8c c0       	rjmp	.+280    	; 0x1640 <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized += config->step_up;
    1528:	a5 01       	movw	r20, r10
    152a:	94 01       	movw	r18, r8
    152c:	c7 01       	movw	r24, r14
    152e:	b6 01       	movw	r22, r12
    1530:	0e 94 37 0c 	call	0x186e	; 0x186e <__addsf3>
    1534:	f8 01       	movw	r30, r16
    1536:	60 83       	st	Z, r22
    1538:	71 83       	std	Z+1, r23	; 0x01
    153a:	82 83       	std	Z+2, r24	; 0x02
    153c:	93 83       	std	Z+3, r25	; 0x03
    153e:	80 c0       	rjmp	.+256    	; 0x1640 <process_sample+0x2f6>
					}
				}
				else{
					if (*speed_out_normalized - target_speed_normalized < config->step_down){
    1540:	a3 01       	movw	r20, r6
    1542:	92 01       	movw	r18, r4
    1544:	c7 01       	movw	r24, r14
    1546:	b6 01       	movw	r22, r12
    1548:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    154c:	f5 01       	movw	r30, r10
    154e:	86 8c       	ldd	r8, Z+30	; 0x1e
    1550:	97 8c       	ldd	r9, Z+31	; 0x1f
    1552:	a0 a0       	ldd	r10, Z+32	; 0x20
    1554:	b1 a0       	ldd	r11, Z+33	; 0x21
    1556:	a5 01       	movw	r20, r10
    1558:	94 01       	movw	r18, r8
    155a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
    155e:	88 23       	and	r24, r24
    1560:	34 f4       	brge	.+12     	; 0x156e <process_sample+0x224>
						*speed_out_normalized = target_speed_normalized;
    1562:	f8 01       	movw	r30, r16
    1564:	40 82       	st	Z, r4
    1566:	51 82       	std	Z+1, r5	; 0x01
    1568:	62 82       	std	Z+2, r6	; 0x02
    156a:	73 82       	std	Z+3, r7	; 0x03
    156c:	69 c0       	rjmp	.+210    	; 0x1640 <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized -= config->step_down;
    156e:	a5 01       	movw	r20, r10
    1570:	94 01       	movw	r18, r8
    1572:	c7 01       	movw	r24, r14
    1574:	b6 01       	movw	r22, r12
    1576:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    157a:	f8 01       	movw	r30, r16
    157c:	60 83       	st	Z, r22
    157e:	71 83       	std	Z+1, r23	; 0x01
    1580:	82 83       	std	Z+2, r24	; 0x02
    1582:	93 83       	std	Z+3, r25	; 0x03
    1584:	5d c0       	rjmp	.+186    	; 0x1640 <process_sample+0x2f6>
					}
				}
			}
			else{
				if (target_speed_normalized > *speed_out_normalized){
    1586:	a3 01       	movw	r20, r6
    1588:	92 01       	movw	r18, r4
    158a:	c7 01       	movw	r24, r14
    158c:	b6 01       	movw	r22, r12
    158e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
    1592:	88 23       	and	r24, r24
    1594:	1c f5       	brge	.+70     	; 0x15dc <process_sample+0x292>
					if (target_speed_normalized - *speed_out_normalized < config->step_down){
    1596:	a7 01       	movw	r20, r14
    1598:	96 01       	movw	r18, r12
    159a:	c3 01       	movw	r24, r6
    159c:	b2 01       	movw	r22, r4
    159e:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    15a2:	f5 01       	movw	r30, r10
    15a4:	86 8c       	ldd	r8, Z+30	; 0x1e
    15a6:	97 8c       	ldd	r9, Z+31	; 0x1f
    15a8:	a0 a0       	ldd	r10, Z+32	; 0x20
    15aa:	b1 a0       	ldd	r11, Z+33	; 0x21
    15ac:	a5 01       	movw	r20, r10
    15ae:	94 01       	movw	r18, r8
    15b0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	34 f4       	brge	.+12     	; 0x15c4 <process_sample+0x27a>
						*speed_out_normalized = target_speed_normalized;
    15b8:	f8 01       	movw	r30, r16
    15ba:	40 82       	st	Z, r4
    15bc:	51 82       	std	Z+1, r5	; 0x01
    15be:	62 82       	std	Z+2, r6	; 0x02
    15c0:	73 82       	std	Z+3, r7	; 0x03
    15c2:	3e c0       	rjmp	.+124    	; 0x1640 <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized += config->step_down;
    15c4:	a5 01       	movw	r20, r10
    15c6:	94 01       	movw	r18, r8
    15c8:	c7 01       	movw	r24, r14
    15ca:	b6 01       	movw	r22, r12
    15cc:	0e 94 37 0c 	call	0x186e	; 0x186e <__addsf3>
    15d0:	f8 01       	movw	r30, r16
    15d2:	60 83       	st	Z, r22
    15d4:	71 83       	std	Z+1, r23	; 0x01
    15d6:	82 83       	std	Z+2, r24	; 0x02
    15d8:	93 83       	std	Z+3, r25	; 0x03
    15da:	32 c0       	rjmp	.+100    	; 0x1640 <process_sample+0x2f6>
					}
				}
				else{
					if (*speed_out_normalized - target_speed_normalized < config->step_up){
    15dc:	a3 01       	movw	r20, r6
    15de:	92 01       	movw	r18, r4
    15e0:	c7 01       	movw	r24, r14
    15e2:	b6 01       	movw	r22, r12
    15e4:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    15e8:	f5 01       	movw	r30, r10
    15ea:	82 8c       	ldd	r8, Z+26	; 0x1a
    15ec:	93 8c       	ldd	r9, Z+27	; 0x1b
    15ee:	a4 8c       	ldd	r10, Z+28	; 0x1c
    15f0:	b5 8c       	ldd	r11, Z+29	; 0x1d
    15f2:	a5 01       	movw	r20, r10
    15f4:	94 01       	movw	r18, r8
    15f6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__cmpsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	34 f4       	brge	.+12     	; 0x160a <process_sample+0x2c0>
						*speed_out_normalized = target_speed_normalized;
    15fe:	f8 01       	movw	r30, r16
    1600:	40 82       	st	Z, r4
    1602:	51 82       	std	Z+1, r5	; 0x01
    1604:	62 82       	std	Z+2, r6	; 0x02
    1606:	73 82       	std	Z+3, r7	; 0x03
    1608:	1b c0       	rjmp	.+54     	; 0x1640 <process_sample+0x2f6>
					}
					else{
						*speed_out_normalized -= config->step_up;
    160a:	a5 01       	movw	r20, r10
    160c:	94 01       	movw	r18, r8
    160e:	c7 01       	movw	r24, r14
    1610:	b6 01       	movw	r22, r12
    1612:	0e 94 36 0c 	call	0x186c	; 0x186c <__subsf3>
    1616:	f8 01       	movw	r30, r16
    1618:	60 83       	st	Z, r22
    161a:	71 83       	std	Z+1, r23	; 0x01
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	93 83       	std	Z+3, r25	; 0x03
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <process_sample+0x2f6>
				}
			}
		}
	}
	else{
		*release_out = true;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	fa 01       	movw	r30, r20
    1626:	80 83       	st	Z, r24
		target_speed_normalized = 0.0f;
    1628:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <__data_end>
    162c:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <__data_end+0x1>
    1630:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <__data_end+0x2>
    1634:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <__data_end+0x3>
		USART_print("Bad data\n");
    1638:	86 e6       	ldi	r24, 0x66	; 102
    163a:	93 e0       	ldi	r25, 0x03	; 3
    163c:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	}
}
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	df 90       	pop	r13
    164c:	cf 90       	pop	r12
    164e:	bf 90       	pop	r11
    1650:	af 90       	pop	r10
    1652:	9f 90       	pop	r9
    1654:	8f 90       	pop	r8
    1656:	7f 90       	pop	r7
    1658:	6f 90       	pop	r6
    165a:	5f 90       	pop	r5
    165c:	4f 90       	pop	r4
    165e:	08 95       	ret

00001660 <main>:

int main(void){
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	ca 54       	subi	r28, 0x4A	; 74
    166a:	d1 09       	sbc	r29, r1
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
	// default config
	const config_t default_config = {
    1676:	82 e2       	ldi	r24, 0x22	; 34
    1678:	e0 e0       	ldi	r30, 0x00	; 0
    167a:	f1 e0       	ldi	r31, 0x01	; 1
    167c:	de 01       	movw	r26, r28
    167e:	11 96       	adiw	r26, 0x01	; 1
    1680:	01 90       	ld	r0, Z+
    1682:	0d 92       	st	X+, r0
    1684:	8a 95       	dec	r24
    1686:	e1 f7       	brne	.-8      	; 0x1680 <main+0x20>
		.release_position_b = -45,
		.step_up = 0.05f,
		.step_down = 0.01f
	};

	config_t config = default_config;
    1688:	82 e2       	ldi	r24, 0x22	; 34
    168a:	fe 01       	movw	r30, r28
    168c:	31 96       	adiw	r30, 0x01	; 1
    168e:	de 01       	movw	r26, r28
    1690:	93 96       	adiw	r26, 0x23	; 35
    1692:	01 90       	ld	r0, Z+
    1694:	0d 92       	st	X+, r0
    1696:	8a 95       	dec	r24
    1698:	e1 f7       	brne	.-8      	; 0x1692 <main+0x32>
	
	USART_init(MYUBRR);
    169a:	80 e1       	ldi	r24, 0x10	; 16
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_init>
	
	// try to load config from EEPROM
	uint8_t result = config_load(&config);
    16a2:	ce 01       	movw	r24, r28
    16a4:	83 96       	adiw	r24, 0x23	; 35
    16a6:	0e 94 ab 02 	call	0x556	; 0x556 <config_load>
	if (result){
    16aa:	88 23       	and	r24, r24
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <main+0x58>
		USART_print("Config loaded\n");
    16ae:	80 e7       	ldi	r24, 0x70	; 112
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <main+0x60>
	}
	else{
		USART_print("Using default config\n");
    16b8:	8f e7       	ldi	r24, 0x7F	; 127
    16ba:	93 e0       	ldi	r25, 0x03	; 3
    16bc:	0e 94 76 00 	call	0xec	; 0xec <USART_print>
	}
	config_print(&config);
    16c0:	ce 01       	movw	r24, r28
    16c2:	83 96       	adiw	r24, 0x23	; 35
    16c4:	0e 94 06 02 	call	0x40c	; 0x40c <config_print>
		
	servo_init();
    16c8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <servo_init>
	software_serial_init();
    16cc:	0e 94 45 01 	call	0x28a	; 0x28a <software_serial_init>
	lcd_init();
    16d0:	0e 94 27 04 	call	0x84e	; 0x84e <lcd_init>
	buttons_init();
    16d4:	0e 94 92 04 	call	0x924	; 0x924 <buttons_init>
	
	float speed_normalized = 0;
    16d8:	29 96       	adiw	r28, 0x09	; 9
    16da:	1c ae       	std	Y+60, r1	; 0x3c
    16dc:	1d ae       	std	Y+61, r1	; 0x3d
    16de:	1e ae       	std	Y+62, r1	; 0x3e
    16e0:	1f ae       	std	Y+63, r1	; 0x3f
    16e2:	29 97       	sbiw	r28, 0x09	; 9
	uint8_t release = true;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	2a 96       	adiw	r28, 0x0a	; 10
    16e8:	8f af       	std	Y+63, r24	; 0x3f
    16ea:	2a 97       	sbiw	r28, 0x0a	; 10
	uint8_t raw_sensor_data = 0;

	uint8_t mode = MODE_RUNNING;
    16ec:	2b 96       	adiw	r28, 0x0b	; 11
    16ee:	1f ae       	std	Y+63, r1	; 0x3f
    16f0:	2b 97       	sbiw	r28, 0x0b	; 11
	lcd_init();
	buttons_init();
	
	float speed_normalized = 0;
	uint8_t release = true;
	uint8_t raw_sensor_data = 0;
    16f2:	f1 2c       	mov	r15, r1
	uint8_t mode = MODE_RUNNING;
	
	// TODO: reset speed after timeout (in case sensor got disconnected)
	
    while (1){
		if (USART_avaliable()){
    16f4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <USART_avaliable>
    16f8:	88 23       	and	r24, r24
    16fa:	39 f0       	breq	.+14     	; 0x170a <main+0xaa>
			char data = USART_read();
    16fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_read>
			process_serial(data, &config);
    1700:	be 01       	movw	r22, r28
    1702:	6d 5d       	subi	r22, 0xDD	; 221
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	0e 94 31 09 	call	0x1262	; 0x1262 <process_serial>
		}

		if (mode == MODE_RUNNING){
    170a:	2b 96       	adiw	r28, 0x0b	; 11
    170c:	8f ad       	ldd	r24, Y+63	; 0x3f
    170e:	2b 97       	sbiw	r28, 0x0b	; 11
    1710:	81 11       	cpse	r24, r1
    1712:	9b c0       	rjmp	.+310    	; 0x184a <main+0x1ea>
			uint8_t armed = switch_armed();
    1714:	0e 94 c3 04 	call	0x986	; 0x986 <switch_armed>
    1718:	e8 2e       	mov	r14, r24
			if (software_serial_available()){
    171a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <software_serial_available>
    171e:	88 23       	and	r24, r24
    1720:	71 f0       	breq	.+28     	; 0x173e <main+0xde>
				uint8_t data = software_serial_read();
    1722:	0e 94 d6 01 	call	0x3ac	; 0x3ac <software_serial_read>
    1726:	f8 2e       	mov	r15, r24
				process_sample(data, &config, &release, &speed_normalized);
    1728:	9e 01       	movw	r18, r28
    172a:	2b 5b       	subi	r18, 0xBB	; 187
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	ae 01       	movw	r20, r28
    1730:	47 5b       	subi	r20, 0xB7	; 183
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	be 01       	movw	r22, r28
    1736:	6d 5d       	subi	r22, 0xDD	; 221
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	0e 94 a5 09 	call	0x134a	; 0x134a <process_sample>
				raw_sensor_data = data;
			}
			
			if (!armed){
    173e:	e1 10       	cpse	r14, r1
    1740:	04 c0       	rjmp	.+8      	; 0x174a <main+0xea>
				release = true;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	2a 96       	adiw	r28, 0x0a	; 10
    1746:	8f af       	std	Y+63, r24	; 0x3f
    1748:	2a 97       	sbiw	r28, 0x0a	; 10
			}
			if (release){
    174a:	2a 96       	adiw	r28, 0x0a	; 10
    174c:	8f ad       	ldd	r24, Y+63	; 0x3f
    174e:	2a 97       	sbiw	r28, 0x0a	; 10
    1750:	88 23       	and	r24, r24
    1752:	29 f0       	breq	.+10     	; 0x175e <main+0xfe>
				set_speed(config.release_position_a, config.release_position_b);
    1754:	6b ad       	ldd	r22, Y+59	; 0x3b
    1756:	89 ad       	ldd	r24, Y+57	; 0x39
    1758:	0e 94 c9 04 	call	0x992	; 0x992 <set_speed>
    175c:	0a c0       	rjmp	.+20     	; 0x1772 <main+0x112>
			}
			else{
				set_normalized_speed(&config, speed_normalized);
    175e:	29 96       	adiw	r28, 0x09	; 9
    1760:	4c ad       	ldd	r20, Y+60	; 0x3c
    1762:	5d ad       	ldd	r21, Y+61	; 0x3d
    1764:	6e ad       	ldd	r22, Y+62	; 0x3e
    1766:	7f ad       	ldd	r23, Y+63	; 0x3f
    1768:	29 97       	sbiw	r28, 0x09	; 9
    176a:	ce 01       	movw	r24, r28
    176c:	83 96       	adiw	r24, 0x23	; 35
    176e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <set_normalized_speed>
			}

			lcd_set_cursor(0, 0);
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
			for (int i = 4; i >= 0; i--){
    177a:	04 e0       	ldi	r16, 0x04	; 4
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	15 c0       	rjmp	.+42     	; 0x17aa <main+0x14a>
				if (raw_sensor_data & (1 << i)){
    1780:	8f 2d       	mov	r24, r15
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	00 2e       	mov	r0, r16
    1786:	02 c0       	rjmp	.+4      	; 0x178c <main+0x12c>
    1788:	95 95       	asr	r25
    178a:	87 95       	ror	r24
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <main+0x128>
    1790:	80 ff       	sbrs	r24, 0
    1792:	05 c0       	rjmp	.+10     	; 0x179e <main+0x13e>
					lcd_print("#");
    1794:	85 e9       	ldi	r24, 0x95	; 149
    1796:	93 e0       	ldi	r25, 0x03	; 3
    1798:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <main+0x146>
				}
				else{
					lcd_print("-");
    179e:	82 eb       	ldi	r24, 0xB2	; 178
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			else{
				set_normalized_speed(&config, speed_normalized);
			}

			lcd_set_cursor(0, 0);
			for (int i = 4; i >= 0; i--){
    17a6:	01 50       	subi	r16, 0x01	; 1
    17a8:	11 09       	sbc	r17, r1
    17aa:	11 23       	and	r17, r17
    17ac:	4c f7       	brge	.-46     	; 0x1780 <main+0x120>
				else{
					lcd_print("-");
				}
			}
			
			if (armed){
    17ae:	ee 20       	and	r14, r14
    17b0:	19 f1       	breq	.+70     	; 0x17f8 <main+0x198>
				lcd_set_cursor(1, 16 - 5);
    17b2:	6b e0       	ldi	r22, 0x0B	; 11
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
				lcd_print("Armed");
    17ba:	87 e9       	ldi	r24, 0x97	; 151
    17bc:	93 e0       	ldi	r25, 0x03	; 3
    17be:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
				lcd_set_cursor(1, 0);
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
				if (release){
    17ca:	2a 96       	adiw	r28, 0x0a	; 10
    17cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    17ce:	2a 97       	sbiw	r28, 0x0a	; 10
    17d0:	88 23       	and	r24, r24
    17d2:	29 f0       	breq	.+10     	; 0x17de <main+0x17e>
					lcd_print("Release ");
    17d4:	8d e9       	ldi	r24, 0x9D	; 157
    17d6:	93 e0       	ldi	r25, 0x03	; 3
    17d8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    17dc:	15 c0       	rjmp	.+42     	; 0x1808 <main+0x1a8>
				}
				else{
					lcd_print_float(speed_normalized);
    17de:	29 96       	adiw	r28, 0x09	; 9
    17e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    17e2:	7d ad       	ldd	r23, Y+61	; 0x3d
    17e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    17e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    17e8:	29 97       	sbiw	r28, 0x09	; 9
    17ea:	0e 94 a7 03 	call	0x74e	; 0x74e <lcd_print_float>
					lcd_print("      ");
    17ee:	84 ee       	ldi	r24, 0xE4	; 228
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    17f6:	08 c0       	rjmp	.+16     	; 0x1808 <main+0x1a8>
				}
			}
			else{
				lcd_set_cursor(1, 0);
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_set_cursor>
				lcd_print("Disarmed        ");
    1800:	86 ea       	ldi	r24, 0xA6	; 166
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
			}

			if (button_up() && button_down() && !button_ok()){
    1808:	0e 94 ab 04 	call	0x956	; 0x956 <button_up>
    180c:	88 23       	and	r24, r24
    180e:	e9 f0       	breq	.+58     	; 0x184a <main+0x1ea>
    1810:	0e 94 b3 04 	call	0x966	; 0x966 <button_down>
    1814:	88 23       	and	r24, r24
    1816:	c9 f0       	breq	.+50     	; 0x184a <main+0x1ea>
    1818:	0e 94 ba 04 	call	0x974	; 0x974 <button_ok>
    181c:	81 11       	cpse	r24, r1
    181e:	15 c0       	rjmp	.+42     	; 0x184a <main+0x1ea>
				mode = MODE_SETUP;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	2b 96       	adiw	r28, 0x0b	; 11
    1824:	8f af       	std	Y+63, r24	; 0x3f
    1826:	2b 97       	sbiw	r28, 0x0b	; 11
				lcd_clear();
    1828:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
				lcd_print("Setup mode");
    182c:	87 eb       	ldi	r24, 0xB7	; 183
    182e:	93 e0       	ldi	r25, 0x03	; 3
    1830:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcd_print>
    1834:	2f ef       	ldi	r18, 0xFF	; 255
    1836:	83 ed       	ldi	r24, 0xD3	; 211
    1838:	90 e3       	ldi	r25, 0x30	; 48
    183a:	21 50       	subi	r18, 0x01	; 1
    183c:	80 40       	sbci	r24, 0x00	; 0
    183e:	90 40       	sbci	r25, 0x00	; 0
    1840:	e1 f7       	brne	.-8      	; 0x183a <main+0x1da>
    1842:	00 c0       	rjmp	.+0      	; 0x1844 <main+0x1e4>
    1844:	00 00       	nop
				_delay_ms(1000);
				lcd_clear();
    1846:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
			}
		}

		if (mode == MODE_SETUP){
    184a:	2b 96       	adiw	r28, 0x0b	; 11
    184c:	8f ad       	ldd	r24, Y+63	; 0x3f
    184e:	2b 97       	sbiw	r28, 0x0b	; 11
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	09 f0       	breq	.+2      	; 0x1856 <main+0x1f6>
    1854:	4f cf       	rjmp	.-354    	; 0x16f4 <main+0x94>
			setup_mode(&config, &mode, &default_config);
    1856:	ae 01       	movw	r20, r28
    1858:	4f 5f       	subi	r20, 0xFF	; 255
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
    185c:	be 01       	movw	r22, r28
    185e:	66 5b       	subi	r22, 0xB6	; 182
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	ce 01       	movw	r24, r28
    1864:	83 96       	adiw	r24, 0x23	; 35
    1866:	0e 94 2d 06 	call	0xc5a	; 0xc5a <setup_mode>
    186a:	44 cf       	rjmp	.-376    	; 0x16f4 <main+0x94>

0000186c <__subsf3>:
    186c:	50 58       	subi	r21, 0x80	; 128

0000186e <__addsf3>:
    186e:	bb 27       	eor	r27, r27
    1870:	aa 27       	eor	r26, r26
    1872:	0e 94 4e 0c 	call	0x189c	; 0x189c <__addsf3x>
    1876:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_round>
    187a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_pscA>
    187e:	38 f0       	brcs	.+14     	; 0x188e <__addsf3+0x20>
    1880:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_pscB>
    1884:	20 f0       	brcs	.+8      	; 0x188e <__addsf3+0x20>
    1886:	39 f4       	brne	.+14     	; 0x1896 <__addsf3+0x28>
    1888:	9f 3f       	cpi	r25, 0xFF	; 255
    188a:	19 f4       	brne	.+6      	; 0x1892 <__addsf3+0x24>
    188c:	26 f4       	brtc	.+8      	; 0x1896 <__addsf3+0x28>
    188e:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__fp_nan>
    1892:	0e f4       	brtc	.+2      	; 0x1896 <__addsf3+0x28>
    1894:	e0 95       	com	r30
    1896:	e7 fb       	bst	r30, 7
    1898:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_inf>

0000189c <__addsf3x>:
    189c:	e9 2f       	mov	r30, r25
    189e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__fp_split3>
    18a2:	58 f3       	brcs	.-42     	; 0x187a <__addsf3+0xc>
    18a4:	ba 17       	cp	r27, r26
    18a6:	62 07       	cpc	r22, r18
    18a8:	73 07       	cpc	r23, r19
    18aa:	84 07       	cpc	r24, r20
    18ac:	95 07       	cpc	r25, r21
    18ae:	20 f0       	brcs	.+8      	; 0x18b8 <__addsf3x+0x1c>
    18b0:	79 f4       	brne	.+30     	; 0x18d0 <__addsf3x+0x34>
    18b2:	a6 f5       	brtc	.+104    	; 0x191c <__addsf3x+0x80>
    18b4:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__fp_zero>
    18b8:	0e f4       	brtc	.+2      	; 0x18bc <__addsf3x+0x20>
    18ba:	e0 95       	com	r30
    18bc:	0b 2e       	mov	r0, r27
    18be:	ba 2f       	mov	r27, r26
    18c0:	a0 2d       	mov	r26, r0
    18c2:	0b 01       	movw	r0, r22
    18c4:	b9 01       	movw	r22, r18
    18c6:	90 01       	movw	r18, r0
    18c8:	0c 01       	movw	r0, r24
    18ca:	ca 01       	movw	r24, r20
    18cc:	a0 01       	movw	r20, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	ff 27       	eor	r31, r31
    18d2:	59 1b       	sub	r21, r25
    18d4:	99 f0       	breq	.+38     	; 0x18fc <__addsf3x+0x60>
    18d6:	59 3f       	cpi	r21, 0xF9	; 249
    18d8:	50 f4       	brcc	.+20     	; 0x18ee <__addsf3x+0x52>
    18da:	50 3e       	cpi	r21, 0xE0	; 224
    18dc:	68 f1       	brcs	.+90     	; 0x1938 <__addsf3x+0x9c>
    18de:	1a 16       	cp	r1, r26
    18e0:	f0 40       	sbci	r31, 0x00	; 0
    18e2:	a2 2f       	mov	r26, r18
    18e4:	23 2f       	mov	r18, r19
    18e6:	34 2f       	mov	r19, r20
    18e8:	44 27       	eor	r20, r20
    18ea:	58 5f       	subi	r21, 0xF8	; 248
    18ec:	f3 cf       	rjmp	.-26     	; 0x18d4 <__addsf3x+0x38>
    18ee:	46 95       	lsr	r20
    18f0:	37 95       	ror	r19
    18f2:	27 95       	ror	r18
    18f4:	a7 95       	ror	r26
    18f6:	f0 40       	sbci	r31, 0x00	; 0
    18f8:	53 95       	inc	r21
    18fa:	c9 f7       	brne	.-14     	; 0x18ee <__addsf3x+0x52>
    18fc:	7e f4       	brtc	.+30     	; 0x191c <__addsf3x+0x80>
    18fe:	1f 16       	cp	r1, r31
    1900:	ba 0b       	sbc	r27, r26
    1902:	62 0b       	sbc	r22, r18
    1904:	73 0b       	sbc	r23, r19
    1906:	84 0b       	sbc	r24, r20
    1908:	ba f0       	brmi	.+46     	; 0x1938 <__addsf3x+0x9c>
    190a:	91 50       	subi	r25, 0x01	; 1
    190c:	a1 f0       	breq	.+40     	; 0x1936 <__addsf3x+0x9a>
    190e:	ff 0f       	add	r31, r31
    1910:	bb 1f       	adc	r27, r27
    1912:	66 1f       	adc	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	c2 f7       	brpl	.-16     	; 0x190a <__addsf3x+0x6e>
    191a:	0e c0       	rjmp	.+28     	; 0x1938 <__addsf3x+0x9c>
    191c:	ba 0f       	add	r27, r26
    191e:	62 1f       	adc	r22, r18
    1920:	73 1f       	adc	r23, r19
    1922:	84 1f       	adc	r24, r20
    1924:	48 f4       	brcc	.+18     	; 0x1938 <__addsf3x+0x9c>
    1926:	87 95       	ror	r24
    1928:	77 95       	ror	r23
    192a:	67 95       	ror	r22
    192c:	b7 95       	ror	r27
    192e:	f7 95       	ror	r31
    1930:	9e 3f       	cpi	r25, 0xFE	; 254
    1932:	08 f0       	brcs	.+2      	; 0x1936 <__addsf3x+0x9a>
    1934:	b0 cf       	rjmp	.-160    	; 0x1896 <__addsf3+0x28>
    1936:	93 95       	inc	r25
    1938:	88 0f       	add	r24, r24
    193a:	08 f0       	brcs	.+2      	; 0x193e <__addsf3x+0xa2>
    193c:	99 27       	eor	r25, r25
    193e:	ee 0f       	add	r30, r30
    1940:	97 95       	ror	r25
    1942:	87 95       	ror	r24
    1944:	08 95       	ret

00001946 <__cmpsf2>:
    1946:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_cmp>
    194a:	08 f4       	brcc	.+2      	; 0x194e <__cmpsf2+0x8>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	08 95       	ret

00001950 <__fixsfsi>:
    1950:	0e 94 af 0c 	call	0x195e	; 0x195e <__fixunssfsi>
    1954:	68 94       	set
    1956:	b1 11       	cpse	r27, r1
    1958:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__fp_szero>
    195c:	08 95       	ret

0000195e <__fixunssfsi>:
    195e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__fp_splitA>
    1962:	88 f0       	brcs	.+34     	; 0x1986 <__fixunssfsi+0x28>
    1964:	9f 57       	subi	r25, 0x7F	; 127
    1966:	98 f0       	brcs	.+38     	; 0x198e <__fixunssfsi+0x30>
    1968:	b9 2f       	mov	r27, r25
    196a:	99 27       	eor	r25, r25
    196c:	b7 51       	subi	r27, 0x17	; 23
    196e:	b0 f0       	brcs	.+44     	; 0x199c <__fixunssfsi+0x3e>
    1970:	e1 f0       	breq	.+56     	; 0x19aa <__fixunssfsi+0x4c>
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	88 1f       	adc	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	1a f0       	brmi	.+6      	; 0x1982 <__fixunssfsi+0x24>
    197c:	ba 95       	dec	r27
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__fixunssfsi+0x14>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <__fixunssfsi+0x4c>
    1982:	b1 30       	cpi	r27, 0x01	; 1
    1984:	91 f0       	breq	.+36     	; 0x19aa <__fixunssfsi+0x4c>
    1986:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__fp_zero>
    198a:	b1 e0       	ldi	r27, 0x01	; 1
    198c:	08 95       	ret
    198e:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__fp_zero>
    1992:	67 2f       	mov	r22, r23
    1994:	78 2f       	mov	r23, r24
    1996:	88 27       	eor	r24, r24
    1998:	b8 5f       	subi	r27, 0xF8	; 248
    199a:	39 f0       	breq	.+14     	; 0x19aa <__fixunssfsi+0x4c>
    199c:	b9 3f       	cpi	r27, 0xF9	; 249
    199e:	cc f3       	brlt	.-14     	; 0x1992 <__fixunssfsi+0x34>
    19a0:	86 95       	lsr	r24
    19a2:	77 95       	ror	r23
    19a4:	67 95       	ror	r22
    19a6:	b3 95       	inc	r27
    19a8:	d9 f7       	brne	.-10     	; 0x19a0 <__fixunssfsi+0x42>
    19aa:	3e f4       	brtc	.+14     	; 0x19ba <__fixunssfsi+0x5c>
    19ac:	90 95       	com	r25
    19ae:	80 95       	com	r24
    19b0:	70 95       	com	r23
    19b2:	61 95       	neg	r22
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	8f 4f       	sbci	r24, 0xFF	; 255
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	08 95       	ret

000019bc <__floatunsisf>:
    19bc:	e8 94       	clt
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <__floatsisf+0x12>

000019c0 <__floatsisf>:
    19c0:	97 fb       	bst	r25, 7
    19c2:	3e f4       	brtc	.+14     	; 0x19d2 <__floatsisf+0x12>
    19c4:	90 95       	com	r25
    19c6:	80 95       	com	r24
    19c8:	70 95       	com	r23
    19ca:	61 95       	neg	r22
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	8f 4f       	sbci	r24, 0xFF	; 255
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	99 23       	and	r25, r25
    19d4:	a9 f0       	breq	.+42     	; 0x1a00 <__floatsisf+0x40>
    19d6:	f9 2f       	mov	r31, r25
    19d8:	96 e9       	ldi	r25, 0x96	; 150
    19da:	bb 27       	eor	r27, r27
    19dc:	93 95       	inc	r25
    19de:	f6 95       	lsr	r31
    19e0:	87 95       	ror	r24
    19e2:	77 95       	ror	r23
    19e4:	67 95       	ror	r22
    19e6:	b7 95       	ror	r27
    19e8:	f1 11       	cpse	r31, r1
    19ea:	f8 cf       	rjmp	.-16     	; 0x19dc <__floatsisf+0x1c>
    19ec:	fa f4       	brpl	.+62     	; 0x1a2c <__floatsisf+0x6c>
    19ee:	bb 0f       	add	r27, r27
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <__floatsisf+0x36>
    19f2:	60 ff       	sbrs	r22, 0
    19f4:	1b c0       	rjmp	.+54     	; 0x1a2c <__floatsisf+0x6c>
    19f6:	6f 5f       	subi	r22, 0xFF	; 255
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	8f 4f       	sbci	r24, 0xFF	; 255
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	16 c0       	rjmp	.+44     	; 0x1a2c <__floatsisf+0x6c>
    1a00:	88 23       	and	r24, r24
    1a02:	11 f0       	breq	.+4      	; 0x1a08 <__floatsisf+0x48>
    1a04:	96 e9       	ldi	r25, 0x96	; 150
    1a06:	11 c0       	rjmp	.+34     	; 0x1a2a <__floatsisf+0x6a>
    1a08:	77 23       	and	r23, r23
    1a0a:	21 f0       	breq	.+8      	; 0x1a14 <__floatsisf+0x54>
    1a0c:	9e e8       	ldi	r25, 0x8E	; 142
    1a0e:	87 2f       	mov	r24, r23
    1a10:	76 2f       	mov	r23, r22
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <__floatsisf+0x5e>
    1a14:	66 23       	and	r22, r22
    1a16:	71 f0       	breq	.+28     	; 0x1a34 <__floatsisf+0x74>
    1a18:	96 e8       	ldi	r25, 0x86	; 134
    1a1a:	86 2f       	mov	r24, r22
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	2a f0       	brmi	.+10     	; 0x1a2c <__floatsisf+0x6c>
    1a22:	9a 95       	dec	r25
    1a24:	66 0f       	add	r22, r22
    1a26:	77 1f       	adc	r23, r23
    1a28:	88 1f       	adc	r24, r24
    1a2a:	da f7       	brpl	.-10     	; 0x1a22 <__floatsisf+0x62>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	96 95       	lsr	r25
    1a30:	87 95       	ror	r24
    1a32:	97 f9       	bld	r25, 7
    1a34:	08 95       	ret

00001a36 <__fp_cmp>:
    1a36:	99 0f       	add	r25, r25
    1a38:	00 08       	sbc	r0, r0
    1a3a:	55 0f       	add	r21, r21
    1a3c:	aa 0b       	sbc	r26, r26
    1a3e:	e0 e8       	ldi	r30, 0x80	; 128
    1a40:	fe ef       	ldi	r31, 0xFE	; 254
    1a42:	16 16       	cp	r1, r22
    1a44:	17 06       	cpc	r1, r23
    1a46:	e8 07       	cpc	r30, r24
    1a48:	f9 07       	cpc	r31, r25
    1a4a:	c0 f0       	brcs	.+48     	; 0x1a7c <__fp_cmp+0x46>
    1a4c:	12 16       	cp	r1, r18
    1a4e:	13 06       	cpc	r1, r19
    1a50:	e4 07       	cpc	r30, r20
    1a52:	f5 07       	cpc	r31, r21
    1a54:	98 f0       	brcs	.+38     	; 0x1a7c <__fp_cmp+0x46>
    1a56:	62 1b       	sub	r22, r18
    1a58:	73 0b       	sbc	r23, r19
    1a5a:	84 0b       	sbc	r24, r20
    1a5c:	95 0b       	sbc	r25, r21
    1a5e:	39 f4       	brne	.+14     	; 0x1a6e <__fp_cmp+0x38>
    1a60:	0a 26       	eor	r0, r26
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <__fp_cmp+0x46>
    1a64:	23 2b       	or	r18, r19
    1a66:	24 2b       	or	r18, r20
    1a68:	25 2b       	or	r18, r21
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <__fp_cmp+0x3e>
    1a6c:	08 95       	ret
    1a6e:	0a 26       	eor	r0, r26
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <__fp_cmp+0x3e>
    1a72:	a1 40       	sbci	r26, 0x01	; 1
    1a74:	a6 95       	lsr	r26
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	81 1d       	adc	r24, r1
    1a7a:	81 1d       	adc	r24, r1
    1a7c:	08 95       	ret

00001a7e <__fp_inf>:
    1a7e:	97 f9       	bld	r25, 7
    1a80:	9f 67       	ori	r25, 0x7F	; 127
    1a82:	80 e8       	ldi	r24, 0x80	; 128
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	08 95       	ret

00001a8a <__fp_nan>:
    1a8a:	9f ef       	ldi	r25, 0xFF	; 255
    1a8c:	80 ec       	ldi	r24, 0xC0	; 192
    1a8e:	08 95       	ret

00001a90 <__fp_pscA>:
    1a90:	00 24       	eor	r0, r0
    1a92:	0a 94       	dec	r0
    1a94:	16 16       	cp	r1, r22
    1a96:	17 06       	cpc	r1, r23
    1a98:	18 06       	cpc	r1, r24
    1a9a:	09 06       	cpc	r0, r25
    1a9c:	08 95       	ret

00001a9e <__fp_pscB>:
    1a9e:	00 24       	eor	r0, r0
    1aa0:	0a 94       	dec	r0
    1aa2:	12 16       	cp	r1, r18
    1aa4:	13 06       	cpc	r1, r19
    1aa6:	14 06       	cpc	r1, r20
    1aa8:	05 06       	cpc	r0, r21
    1aaa:	08 95       	ret

00001aac <__fp_round>:
    1aac:	09 2e       	mov	r0, r25
    1aae:	03 94       	inc	r0
    1ab0:	00 0c       	add	r0, r0
    1ab2:	11 f4       	brne	.+4      	; 0x1ab8 <__fp_round+0xc>
    1ab4:	88 23       	and	r24, r24
    1ab6:	52 f0       	brmi	.+20     	; 0x1acc <__fp_round+0x20>
    1ab8:	bb 0f       	add	r27, r27
    1aba:	40 f4       	brcc	.+16     	; 0x1acc <__fp_round+0x20>
    1abc:	bf 2b       	or	r27, r31
    1abe:	11 f4       	brne	.+4      	; 0x1ac4 <__fp_round+0x18>
    1ac0:	60 ff       	sbrs	r22, 0
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <__fp_round+0x20>
    1ac4:	6f 5f       	subi	r22, 0xFF	; 255
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	08 95       	ret

00001ace <__fp_split3>:
    1ace:	57 fd       	sbrc	r21, 7
    1ad0:	90 58       	subi	r25, 0x80	; 128
    1ad2:	44 0f       	add	r20, r20
    1ad4:	55 1f       	adc	r21, r21
    1ad6:	59 f0       	breq	.+22     	; 0x1aee <__fp_splitA+0x10>
    1ad8:	5f 3f       	cpi	r21, 0xFF	; 255
    1ada:	71 f0       	breq	.+28     	; 0x1af8 <__fp_splitA+0x1a>
    1adc:	47 95       	ror	r20

00001ade <__fp_splitA>:
    1ade:	88 0f       	add	r24, r24
    1ae0:	97 fb       	bst	r25, 7
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <__fp_splitA+0x20>
    1ae6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae8:	79 f0       	breq	.+30     	; 0x1b08 <__fp_splitA+0x2a>
    1aea:	87 95       	ror	r24
    1aec:	08 95       	ret
    1aee:	12 16       	cp	r1, r18
    1af0:	13 06       	cpc	r1, r19
    1af2:	14 06       	cpc	r1, r20
    1af4:	55 1f       	adc	r21, r21
    1af6:	f2 cf       	rjmp	.-28     	; 0x1adc <__fp_split3+0xe>
    1af8:	46 95       	lsr	r20
    1afa:	f1 df       	rcall	.-30     	; 0x1ade <__fp_splitA>
    1afc:	08 c0       	rjmp	.+16     	; 0x1b0e <__fp_splitA+0x30>
    1afe:	16 16       	cp	r1, r22
    1b00:	17 06       	cpc	r1, r23
    1b02:	18 06       	cpc	r1, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	f1 cf       	rjmp	.-30     	; 0x1aea <__fp_splitA+0xc>
    1b08:	86 95       	lsr	r24
    1b0a:	71 05       	cpc	r23, r1
    1b0c:	61 05       	cpc	r22, r1
    1b0e:	08 94       	sec
    1b10:	08 95       	ret

00001b12 <__fp_zero>:
    1b12:	e8 94       	clt

00001b14 <__fp_szero>:
    1b14:	bb 27       	eor	r27, r27
    1b16:	66 27       	eor	r22, r22
    1b18:	77 27       	eor	r23, r23
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	97 f9       	bld	r25, 7
    1b1e:	08 95       	ret

00001b20 <__gesf2>:
    1b20:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_cmp>
    1b24:	08 f4       	brcc	.+2      	; 0x1b28 <__gesf2+0x8>
    1b26:	8f ef       	ldi	r24, 0xFF	; 255
    1b28:	08 95       	ret

00001b2a <__mulsf3>:
    1b2a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__mulsf3x>
    1b2e:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_round>
    1b32:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_pscA>
    1b36:	38 f0       	brcs	.+14     	; 0x1b46 <__mulsf3+0x1c>
    1b38:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_pscB>
    1b3c:	20 f0       	brcs	.+8      	; 0x1b46 <__mulsf3+0x1c>
    1b3e:	95 23       	and	r25, r21
    1b40:	11 f0       	breq	.+4      	; 0x1b46 <__mulsf3+0x1c>
    1b42:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_inf>
    1b46:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__fp_nan>
    1b4a:	11 24       	eor	r1, r1
    1b4c:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__fp_szero>

00001b50 <__mulsf3x>:
    1b50:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__fp_split3>
    1b54:	70 f3       	brcs	.-36     	; 0x1b32 <__mulsf3+0x8>

00001b56 <__mulsf3_pse>:
    1b56:	95 9f       	mul	r25, r21
    1b58:	c1 f3       	breq	.-16     	; 0x1b4a <__mulsf3+0x20>
    1b5a:	95 0f       	add	r25, r21
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	55 1f       	adc	r21, r21
    1b60:	62 9f       	mul	r22, r18
    1b62:	f0 01       	movw	r30, r0
    1b64:	72 9f       	mul	r23, r18
    1b66:	bb 27       	eor	r27, r27
    1b68:	f0 0d       	add	r31, r0
    1b6a:	b1 1d       	adc	r27, r1
    1b6c:	63 9f       	mul	r22, r19
    1b6e:	aa 27       	eor	r26, r26
    1b70:	f0 0d       	add	r31, r0
    1b72:	b1 1d       	adc	r27, r1
    1b74:	aa 1f       	adc	r26, r26
    1b76:	64 9f       	mul	r22, r20
    1b78:	66 27       	eor	r22, r22
    1b7a:	b0 0d       	add	r27, r0
    1b7c:	a1 1d       	adc	r26, r1
    1b7e:	66 1f       	adc	r22, r22
    1b80:	82 9f       	mul	r24, r18
    1b82:	22 27       	eor	r18, r18
    1b84:	b0 0d       	add	r27, r0
    1b86:	a1 1d       	adc	r26, r1
    1b88:	62 1f       	adc	r22, r18
    1b8a:	73 9f       	mul	r23, r19
    1b8c:	b0 0d       	add	r27, r0
    1b8e:	a1 1d       	adc	r26, r1
    1b90:	62 1f       	adc	r22, r18
    1b92:	83 9f       	mul	r24, r19
    1b94:	a0 0d       	add	r26, r0
    1b96:	61 1d       	adc	r22, r1
    1b98:	22 1f       	adc	r18, r18
    1b9a:	74 9f       	mul	r23, r20
    1b9c:	33 27       	eor	r19, r19
    1b9e:	a0 0d       	add	r26, r0
    1ba0:	61 1d       	adc	r22, r1
    1ba2:	23 1f       	adc	r18, r19
    1ba4:	84 9f       	mul	r24, r20
    1ba6:	60 0d       	add	r22, r0
    1ba8:	21 1d       	adc	r18, r1
    1baa:	82 2f       	mov	r24, r18
    1bac:	76 2f       	mov	r23, r22
    1bae:	6a 2f       	mov	r22, r26
    1bb0:	11 24       	eor	r1, r1
    1bb2:	9f 57       	subi	r25, 0x7F	; 127
    1bb4:	50 40       	sbci	r21, 0x00	; 0
    1bb6:	9a f0       	brmi	.+38     	; 0x1bde <__mulsf3_pse+0x88>
    1bb8:	f1 f0       	breq	.+60     	; 0x1bf6 <__mulsf3_pse+0xa0>
    1bba:	88 23       	and	r24, r24
    1bbc:	4a f0       	brmi	.+18     	; 0x1bd0 <__mulsf3_pse+0x7a>
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	bb 1f       	adc	r27, r27
    1bc4:	66 1f       	adc	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	88 1f       	adc	r24, r24
    1bca:	91 50       	subi	r25, 0x01	; 1
    1bcc:	50 40       	sbci	r21, 0x00	; 0
    1bce:	a9 f7       	brne	.-22     	; 0x1bba <__mulsf3_pse+0x64>
    1bd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1bd2:	51 05       	cpc	r21, r1
    1bd4:	80 f0       	brcs	.+32     	; 0x1bf6 <__mulsf3_pse+0xa0>
    1bd6:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_inf>
    1bda:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__fp_szero>
    1bde:	5f 3f       	cpi	r21, 0xFF	; 255
    1be0:	e4 f3       	brlt	.-8      	; 0x1bda <__mulsf3_pse+0x84>
    1be2:	98 3e       	cpi	r25, 0xE8	; 232
    1be4:	d4 f3       	brlt	.-12     	; 0x1bda <__mulsf3_pse+0x84>
    1be6:	86 95       	lsr	r24
    1be8:	77 95       	ror	r23
    1bea:	67 95       	ror	r22
    1bec:	b7 95       	ror	r27
    1bee:	f7 95       	ror	r31
    1bf0:	e7 95       	ror	r30
    1bf2:	9f 5f       	subi	r25, 0xFF	; 255
    1bf4:	c1 f7       	brne	.-16     	; 0x1be6 <__mulsf3_pse+0x90>
    1bf6:	fe 2b       	or	r31, r30
    1bf8:	88 0f       	add	r24, r24
    1bfa:	91 1d       	adc	r25, r1
    1bfc:	96 95       	lsr	r25
    1bfe:	87 95       	ror	r24
    1c00:	97 f9       	bld	r25, 7
    1c02:	08 95       	ret

00001c04 <__divmodhi4>:
    1c04:	97 fb       	bst	r25, 7
    1c06:	07 2e       	mov	r0, r23
    1c08:	16 f4       	brtc	.+4      	; 0x1c0e <__divmodhi4+0xa>
    1c0a:	00 94       	com	r0
    1c0c:	07 d0       	rcall	.+14     	; 0x1c1c <__divmodhi4_neg1>
    1c0e:	77 fd       	sbrc	r23, 7
    1c10:	09 d0       	rcall	.+18     	; 0x1c24 <__divmodhi4_neg2>
    1c12:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__udivmodhi4>
    1c16:	07 fc       	sbrc	r0, 7
    1c18:	05 d0       	rcall	.+10     	; 0x1c24 <__divmodhi4_neg2>
    1c1a:	3e f4       	brtc	.+14     	; 0x1c2a <__divmodhi4_exit>

00001c1c <__divmodhi4_neg1>:
    1c1c:	90 95       	com	r25
    1c1e:	81 95       	neg	r24
    1c20:	9f 4f       	sbci	r25, 0xFF	; 255
    1c22:	08 95       	ret

00001c24 <__divmodhi4_neg2>:
    1c24:	70 95       	com	r23
    1c26:	61 95       	neg	r22
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255

00001c2a <__divmodhi4_exit>:
    1c2a:	08 95       	ret

00001c2c <__udivmodsi4>:
    1c2c:	a1 e2       	ldi	r26, 0x21	; 33
    1c2e:	1a 2e       	mov	r1, r26
    1c30:	aa 1b       	sub	r26, r26
    1c32:	bb 1b       	sub	r27, r27
    1c34:	fd 01       	movw	r30, r26
    1c36:	0d c0       	rjmp	.+26     	; 0x1c52 <__udivmodsi4_ep>

00001c38 <__udivmodsi4_loop>:
    1c38:	aa 1f       	adc	r26, r26
    1c3a:	bb 1f       	adc	r27, r27
    1c3c:	ee 1f       	adc	r30, r30
    1c3e:	ff 1f       	adc	r31, r31
    1c40:	a2 17       	cp	r26, r18
    1c42:	b3 07       	cpc	r27, r19
    1c44:	e4 07       	cpc	r30, r20
    1c46:	f5 07       	cpc	r31, r21
    1c48:	20 f0       	brcs	.+8      	; 0x1c52 <__udivmodsi4_ep>
    1c4a:	a2 1b       	sub	r26, r18
    1c4c:	b3 0b       	sbc	r27, r19
    1c4e:	e4 0b       	sbc	r30, r20
    1c50:	f5 0b       	sbc	r31, r21

00001c52 <__udivmodsi4_ep>:
    1c52:	66 1f       	adc	r22, r22
    1c54:	77 1f       	adc	r23, r23
    1c56:	88 1f       	adc	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	1a 94       	dec	r1
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <__udivmodsi4_loop>
    1c5e:	60 95       	com	r22
    1c60:	70 95       	com	r23
    1c62:	80 95       	com	r24
    1c64:	90 95       	com	r25
    1c66:	9b 01       	movw	r18, r22
    1c68:	ac 01       	movw	r20, r24
    1c6a:	bd 01       	movw	r22, r26
    1c6c:	cf 01       	movw	r24, r30
    1c6e:	08 95       	ret

00001c70 <__tablejump2__>:
    1c70:	ee 0f       	add	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	05 90       	lpm	r0, Z+
    1c76:	f4 91       	lpm	r31, Z
    1c78:	e0 2d       	mov	r30, r0
    1c7a:	09 94       	ijmp

00001c7c <__umulhisi3>:
    1c7c:	a2 9f       	mul	r26, r18
    1c7e:	b0 01       	movw	r22, r0
    1c80:	b3 9f       	mul	r27, r19
    1c82:	c0 01       	movw	r24, r0
    1c84:	a3 9f       	mul	r26, r19
    1c86:	70 0d       	add	r23, r0
    1c88:	81 1d       	adc	r24, r1
    1c8a:	11 24       	eor	r1, r1
    1c8c:	91 1d       	adc	r25, r1
    1c8e:	b2 9f       	mul	r27, r18
    1c90:	70 0d       	add	r23, r0
    1c92:	81 1d       	adc	r24, r1
    1c94:	11 24       	eor	r1, r1
    1c96:	91 1d       	adc	r25, r1
    1c98:	08 95       	ret

00001c9a <__udivmodhi4>:
    1c9a:	aa 1b       	sub	r26, r26
    1c9c:	bb 1b       	sub	r27, r27
    1c9e:	51 e1       	ldi	r21, 0x11	; 17
    1ca0:	07 c0       	rjmp	.+14     	; 0x1cb0 <__udivmodhi4_ep>

00001ca2 <__udivmodhi4_loop>:
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	a6 17       	cp	r26, r22
    1ca8:	b7 07       	cpc	r27, r23
    1caa:	10 f0       	brcs	.+4      	; 0x1cb0 <__udivmodhi4_ep>
    1cac:	a6 1b       	sub	r26, r22
    1cae:	b7 0b       	sbc	r27, r23

00001cb0 <__udivmodhi4_ep>:
    1cb0:	88 1f       	adc	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	5a 95       	dec	r21
    1cb6:	a9 f7       	brne	.-22     	; 0x1ca2 <__udivmodhi4_loop>
    1cb8:	80 95       	com	r24
    1cba:	90 95       	com	r25
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	08 95       	ret

00001cc2 <atoi>:
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	88 27       	eor	r24, r24
    1cc6:	99 27       	eor	r25, r25
    1cc8:	e8 94       	clt
    1cca:	21 91       	ld	r18, Z+
    1ccc:	20 32       	cpi	r18, 0x20	; 32
    1cce:	e9 f3       	breq	.-6      	; 0x1cca <atoi+0x8>
    1cd0:	29 30       	cpi	r18, 0x09	; 9
    1cd2:	10 f0       	brcs	.+4      	; 0x1cd8 <atoi+0x16>
    1cd4:	2e 30       	cpi	r18, 0x0E	; 14
    1cd6:	c8 f3       	brcs	.-14     	; 0x1cca <atoi+0x8>
    1cd8:	2b 32       	cpi	r18, 0x2B	; 43
    1cda:	41 f0       	breq	.+16     	; 0x1cec <atoi+0x2a>
    1cdc:	2d 32       	cpi	r18, 0x2D	; 45
    1cde:	39 f4       	brne	.+14     	; 0x1cee <atoi+0x2c>
    1ce0:	68 94       	set
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <atoi+0x2a>
    1ce4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__mulhi_const_10>
    1ce8:	82 0f       	add	r24, r18
    1cea:	91 1d       	adc	r25, r1
    1cec:	21 91       	ld	r18, Z+
    1cee:	20 53       	subi	r18, 0x30	; 48
    1cf0:	2a 30       	cpi	r18, 0x0A	; 10
    1cf2:	c0 f3       	brcs	.-16     	; 0x1ce4 <atoi+0x22>
    1cf4:	1e f4       	brtc	.+6      	; 0x1cfc <atoi+0x3a>
    1cf6:	90 95       	com	r25
    1cf8:	81 95       	neg	r24
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	08 95       	ret

00001cfe <itoa>:
    1cfe:	45 32       	cpi	r20, 0x25	; 37
    1d00:	51 05       	cpc	r21, r1
    1d02:	20 f4       	brcc	.+8      	; 0x1d0c <itoa+0xe>
    1d04:	42 30       	cpi	r20, 0x02	; 2
    1d06:	10 f0       	brcs	.+4      	; 0x1d0c <itoa+0xe>
    1d08:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__itoa_ncheck>
    1d0c:	fb 01       	movw	r30, r22
    1d0e:	10 82       	st	Z, r1
    1d10:	cb 01       	movw	r24, r22
    1d12:	08 95       	ret

00001d14 <__itoa_ncheck>:
    1d14:	bb 27       	eor	r27, r27
    1d16:	4a 30       	cpi	r20, 0x0A	; 10
    1d18:	31 f4       	brne	.+12     	; 0x1d26 <__itoa_ncheck+0x12>
    1d1a:	99 23       	and	r25, r25
    1d1c:	22 f4       	brpl	.+8      	; 0x1d26 <__itoa_ncheck+0x12>
    1d1e:	bd e2       	ldi	r27, 0x2D	; 45
    1d20:	90 95       	com	r25
    1d22:	81 95       	neg	r24
    1d24:	9f 4f       	sbci	r25, 0xFF	; 255
    1d26:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__utoa_common>

00001d2a <__mulhi_const_10>:
    1d2a:	7a e0       	ldi	r23, 0x0A	; 10
    1d2c:	97 9f       	mul	r25, r23
    1d2e:	90 2d       	mov	r25, r0
    1d30:	87 9f       	mul	r24, r23
    1d32:	80 2d       	mov	r24, r0
    1d34:	91 0d       	add	r25, r1
    1d36:	11 24       	eor	r1, r1
    1d38:	08 95       	ret

00001d3a <__utoa_ncheck>:
    1d3a:	bb 27       	eor	r27, r27

00001d3c <__utoa_common>:
    1d3c:	fb 01       	movw	r30, r22
    1d3e:	55 27       	eor	r21, r21
    1d40:	aa 27       	eor	r26, r26
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	aa 1f       	adc	r26, r26
    1d48:	a4 17       	cp	r26, r20
    1d4a:	10 f0       	brcs	.+4      	; 0x1d50 <__utoa_common+0x14>
    1d4c:	a4 1b       	sub	r26, r20
    1d4e:	83 95       	inc	r24
    1d50:	50 51       	subi	r21, 0x10	; 16
    1d52:	b9 f7       	brne	.-18     	; 0x1d42 <__utoa_common+0x6>
    1d54:	a0 5d       	subi	r26, 0xD0	; 208
    1d56:	aa 33       	cpi	r26, 0x3A	; 58
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <__utoa_common+0x20>
    1d5a:	a9 5d       	subi	r26, 0xD9	; 217
    1d5c:	a1 93       	st	Z+, r26
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	79 f7       	brne	.-34     	; 0x1d40 <__utoa_common+0x4>
    1d62:	b1 11       	cpse	r27, r1
    1d64:	b1 93       	st	Z+, r27
    1d66:	11 92       	st	Z+, r1
    1d68:	cb 01       	movw	r24, r22
    1d6a:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <strrev>

00001d6e <sprintf>:
    1d6e:	ae e0       	ldi	r26, 0x0E	; 14
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ed eb       	ldi	r30, 0xBD	; 189
    1d74:	fe e0       	ldi	r31, 0x0E	; 14
    1d76:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__prologue_saves__+0x1c>
    1d7a:	0d 89       	ldd	r16, Y+21	; 0x15
    1d7c:	1e 89       	ldd	r17, Y+22	; 0x16
    1d7e:	86 e0       	ldi	r24, 0x06	; 6
    1d80:	8c 83       	std	Y+4, r24	; 0x04
    1d82:	1a 83       	std	Y+2, r17	; 0x02
    1d84:	09 83       	std	Y+1, r16	; 0x01
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	9f e7       	ldi	r25, 0x7F	; 127
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	ae 01       	movw	r20, r28
    1d90:	47 5e       	subi	r20, 0xE7	; 231
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255
    1d94:	6f 89       	ldd	r22, Y+23	; 0x17
    1d96:	78 8d       	ldd	r23, Y+24	; 0x18
    1d98:	ce 01       	movw	r24, r28
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <vfprintf>
    1da0:	ef 81       	ldd	r30, Y+7	; 0x07
    1da2:	f8 85       	ldd	r31, Y+8	; 0x08
    1da4:	e0 0f       	add	r30, r16
    1da6:	f1 1f       	adc	r31, r17
    1da8:	10 82       	st	Z, r1
    1daa:	2e 96       	adiw	r28, 0x0e	; 14
    1dac:	e4 e0       	ldi	r30, 0x04	; 4
    1dae:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__epilogue_restores__+0x1c>

00001db2 <vfprintf>:
    1db2:	ab e0       	ldi	r26, 0x0B	; 11
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ef ed       	ldi	r30, 0xDF	; 223
    1db8:	fe e0       	ldi	r31, 0x0E	; 14
    1dba:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__prologue_saves__>
    1dbe:	6c 01       	movw	r12, r24
    1dc0:	7b 01       	movw	r14, r22
    1dc2:	8a 01       	movw	r16, r20
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	17 82       	std	Z+7, r1	; 0x07
    1dc8:	16 82       	std	Z+6, r1	; 0x06
    1dca:	83 81       	ldd	r24, Z+3	; 0x03
    1dcc:	81 ff       	sbrs	r24, 1
    1dce:	cc c1       	rjmp	.+920    	; 0x2168 <vfprintf+0x3b6>
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	01 96       	adiw	r24, 0x01	; 1
    1dd4:	3c 01       	movw	r6, r24
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	f7 01       	movw	r30, r14
    1ddc:	93 fd       	sbrc	r25, 3
    1dde:	85 91       	lpm	r24, Z+
    1de0:	93 ff       	sbrs	r25, 3
    1de2:	81 91       	ld	r24, Z+
    1de4:	7f 01       	movw	r14, r30
    1de6:	88 23       	and	r24, r24
    1de8:	09 f4       	brne	.+2      	; 0x1dec <vfprintf+0x3a>
    1dea:	ba c1       	rjmp	.+884    	; 0x2160 <vfprintf+0x3ae>
    1dec:	85 32       	cpi	r24, 0x25	; 37
    1dee:	39 f4       	brne	.+14     	; 0x1dfe <vfprintf+0x4c>
    1df0:	93 fd       	sbrc	r25, 3
    1df2:	85 91       	lpm	r24, Z+
    1df4:	93 ff       	sbrs	r25, 3
    1df6:	81 91       	ld	r24, Z+
    1df8:	7f 01       	movw	r14, r30
    1dfa:	85 32       	cpi	r24, 0x25	; 37
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <vfprintf+0x56>
    1dfe:	b6 01       	movw	r22, r12
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    1e06:	e7 cf       	rjmp	.-50     	; 0x1dd6 <vfprintf+0x24>
    1e08:	91 2c       	mov	r9, r1
    1e0a:	21 2c       	mov	r2, r1
    1e0c:	31 2c       	mov	r3, r1
    1e0e:	ff e1       	ldi	r31, 0x1F	; 31
    1e10:	f3 15       	cp	r31, r3
    1e12:	d8 f0       	brcs	.+54     	; 0x1e4a <vfprintf+0x98>
    1e14:	8b 32       	cpi	r24, 0x2B	; 43
    1e16:	79 f0       	breq	.+30     	; 0x1e36 <vfprintf+0x84>
    1e18:	38 f4       	brcc	.+14     	; 0x1e28 <vfprintf+0x76>
    1e1a:	80 32       	cpi	r24, 0x20	; 32
    1e1c:	79 f0       	breq	.+30     	; 0x1e3c <vfprintf+0x8a>
    1e1e:	83 32       	cpi	r24, 0x23	; 35
    1e20:	a1 f4       	brne	.+40     	; 0x1e4a <vfprintf+0x98>
    1e22:	23 2d       	mov	r18, r3
    1e24:	20 61       	ori	r18, 0x10	; 16
    1e26:	1d c0       	rjmp	.+58     	; 0x1e62 <vfprintf+0xb0>
    1e28:	8d 32       	cpi	r24, 0x2D	; 45
    1e2a:	61 f0       	breq	.+24     	; 0x1e44 <vfprintf+0x92>
    1e2c:	80 33       	cpi	r24, 0x30	; 48
    1e2e:	69 f4       	brne	.+26     	; 0x1e4a <vfprintf+0x98>
    1e30:	23 2d       	mov	r18, r3
    1e32:	21 60       	ori	r18, 0x01	; 1
    1e34:	16 c0       	rjmp	.+44     	; 0x1e62 <vfprintf+0xb0>
    1e36:	83 2d       	mov	r24, r3
    1e38:	82 60       	ori	r24, 0x02	; 2
    1e3a:	38 2e       	mov	r3, r24
    1e3c:	e3 2d       	mov	r30, r3
    1e3e:	e4 60       	ori	r30, 0x04	; 4
    1e40:	3e 2e       	mov	r3, r30
    1e42:	2a c0       	rjmp	.+84     	; 0x1e98 <vfprintf+0xe6>
    1e44:	f3 2d       	mov	r31, r3
    1e46:	f8 60       	ori	r31, 0x08	; 8
    1e48:	1d c0       	rjmp	.+58     	; 0x1e84 <vfprintf+0xd2>
    1e4a:	37 fc       	sbrc	r3, 7
    1e4c:	2d c0       	rjmp	.+90     	; 0x1ea8 <vfprintf+0xf6>
    1e4e:	20 ed       	ldi	r18, 0xD0	; 208
    1e50:	28 0f       	add	r18, r24
    1e52:	2a 30       	cpi	r18, 0x0A	; 10
    1e54:	40 f0       	brcs	.+16     	; 0x1e66 <vfprintf+0xb4>
    1e56:	8e 32       	cpi	r24, 0x2E	; 46
    1e58:	b9 f4       	brne	.+46     	; 0x1e88 <vfprintf+0xd6>
    1e5a:	36 fc       	sbrc	r3, 6
    1e5c:	81 c1       	rjmp	.+770    	; 0x2160 <vfprintf+0x3ae>
    1e5e:	23 2d       	mov	r18, r3
    1e60:	20 64       	ori	r18, 0x40	; 64
    1e62:	32 2e       	mov	r3, r18
    1e64:	19 c0       	rjmp	.+50     	; 0x1e98 <vfprintf+0xe6>
    1e66:	36 fe       	sbrs	r3, 6
    1e68:	06 c0       	rjmp	.+12     	; 0x1e76 <vfprintf+0xc4>
    1e6a:	8a e0       	ldi	r24, 0x0A	; 10
    1e6c:	98 9e       	mul	r9, r24
    1e6e:	20 0d       	add	r18, r0
    1e70:	11 24       	eor	r1, r1
    1e72:	92 2e       	mov	r9, r18
    1e74:	11 c0       	rjmp	.+34     	; 0x1e98 <vfprintf+0xe6>
    1e76:	ea e0       	ldi	r30, 0x0A	; 10
    1e78:	2e 9e       	mul	r2, r30
    1e7a:	20 0d       	add	r18, r0
    1e7c:	11 24       	eor	r1, r1
    1e7e:	22 2e       	mov	r2, r18
    1e80:	f3 2d       	mov	r31, r3
    1e82:	f0 62       	ori	r31, 0x20	; 32
    1e84:	3f 2e       	mov	r3, r31
    1e86:	08 c0       	rjmp	.+16     	; 0x1e98 <vfprintf+0xe6>
    1e88:	8c 36       	cpi	r24, 0x6C	; 108
    1e8a:	21 f4       	brne	.+8      	; 0x1e94 <vfprintf+0xe2>
    1e8c:	83 2d       	mov	r24, r3
    1e8e:	80 68       	ori	r24, 0x80	; 128
    1e90:	38 2e       	mov	r3, r24
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <vfprintf+0xe6>
    1e94:	88 36       	cpi	r24, 0x68	; 104
    1e96:	41 f4       	brne	.+16     	; 0x1ea8 <vfprintf+0xf6>
    1e98:	f7 01       	movw	r30, r14
    1e9a:	93 fd       	sbrc	r25, 3
    1e9c:	85 91       	lpm	r24, Z+
    1e9e:	93 ff       	sbrs	r25, 3
    1ea0:	81 91       	ld	r24, Z+
    1ea2:	7f 01       	movw	r14, r30
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	b3 cf       	rjmp	.-154    	; 0x1e0e <vfprintf+0x5c>
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	9f 7d       	andi	r25, 0xDF	; 223
    1eac:	95 54       	subi	r25, 0x45	; 69
    1eae:	93 30       	cpi	r25, 0x03	; 3
    1eb0:	28 f4       	brcc	.+10     	; 0x1ebc <vfprintf+0x10a>
    1eb2:	0c 5f       	subi	r16, 0xFC	; 252
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb6:	9f e3       	ldi	r25, 0x3F	; 63
    1eb8:	99 83       	std	Y+1, r25	; 0x01
    1eba:	0d c0       	rjmp	.+26     	; 0x1ed6 <vfprintf+0x124>
    1ebc:	83 36       	cpi	r24, 0x63	; 99
    1ebe:	31 f0       	breq	.+12     	; 0x1ecc <vfprintf+0x11a>
    1ec0:	83 37       	cpi	r24, 0x73	; 115
    1ec2:	71 f0       	breq	.+28     	; 0x1ee0 <vfprintf+0x12e>
    1ec4:	83 35       	cpi	r24, 0x53	; 83
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <vfprintf+0x118>
    1ec8:	59 c0       	rjmp	.+178    	; 0x1f7c <vfprintf+0x1ca>
    1eca:	21 c0       	rjmp	.+66     	; 0x1f0e <vfprintf+0x15c>
    1ecc:	f8 01       	movw	r30, r16
    1ece:	80 81       	ld	r24, Z
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	0e 5f       	subi	r16, 0xFE	; 254
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	88 24       	eor	r8, r8
    1ed8:	83 94       	inc	r8
    1eda:	91 2c       	mov	r9, r1
    1edc:	53 01       	movw	r10, r6
    1ede:	13 c0       	rjmp	.+38     	; 0x1f06 <vfprintf+0x154>
    1ee0:	28 01       	movw	r4, r16
    1ee2:	f2 e0       	ldi	r31, 0x02	; 2
    1ee4:	4f 0e       	add	r4, r31
    1ee6:	51 1c       	adc	r5, r1
    1ee8:	f8 01       	movw	r30, r16
    1eea:	a0 80       	ld	r10, Z
    1eec:	b1 80       	ldd	r11, Z+1	; 0x01
    1eee:	36 fe       	sbrs	r3, 6
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <vfprintf+0x146>
    1ef2:	69 2d       	mov	r22, r9
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <vfprintf+0x14a>
    1ef8:	6f ef       	ldi	r22, 0xFF	; 255
    1efa:	7f ef       	ldi	r23, 0xFF	; 255
    1efc:	c5 01       	movw	r24, r10
    1efe:	0e 94 c5 10 	call	0x218a	; 0x218a <strnlen>
    1f02:	4c 01       	movw	r8, r24
    1f04:	82 01       	movw	r16, r4
    1f06:	f3 2d       	mov	r31, r3
    1f08:	ff 77       	andi	r31, 0x7F	; 127
    1f0a:	3f 2e       	mov	r3, r31
    1f0c:	16 c0       	rjmp	.+44     	; 0x1f3a <vfprintf+0x188>
    1f0e:	28 01       	movw	r4, r16
    1f10:	22 e0       	ldi	r18, 0x02	; 2
    1f12:	42 0e       	add	r4, r18
    1f14:	51 1c       	adc	r5, r1
    1f16:	f8 01       	movw	r30, r16
    1f18:	a0 80       	ld	r10, Z
    1f1a:	b1 80       	ldd	r11, Z+1	; 0x01
    1f1c:	36 fe       	sbrs	r3, 6
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <vfprintf+0x174>
    1f20:	69 2d       	mov	r22, r9
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <vfprintf+0x178>
    1f26:	6f ef       	ldi	r22, 0xFF	; 255
    1f28:	7f ef       	ldi	r23, 0xFF	; 255
    1f2a:	c5 01       	movw	r24, r10
    1f2c:	0e 94 ba 10 	call	0x2174	; 0x2174 <strnlen_P>
    1f30:	4c 01       	movw	r8, r24
    1f32:	f3 2d       	mov	r31, r3
    1f34:	f0 68       	ori	r31, 0x80	; 128
    1f36:	3f 2e       	mov	r3, r31
    1f38:	82 01       	movw	r16, r4
    1f3a:	33 fc       	sbrc	r3, 3
    1f3c:	1b c0       	rjmp	.+54     	; 0x1f74 <vfprintf+0x1c2>
    1f3e:	82 2d       	mov	r24, r2
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	88 16       	cp	r8, r24
    1f44:	99 06       	cpc	r9, r25
    1f46:	b0 f4       	brcc	.+44     	; 0x1f74 <vfprintf+0x1c2>
    1f48:	b6 01       	movw	r22, r12
    1f4a:	80 e2       	ldi	r24, 0x20	; 32
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    1f52:	2a 94       	dec	r2
    1f54:	f4 cf       	rjmp	.-24     	; 0x1f3e <vfprintf+0x18c>
    1f56:	f5 01       	movw	r30, r10
    1f58:	37 fc       	sbrc	r3, 7
    1f5a:	85 91       	lpm	r24, Z+
    1f5c:	37 fe       	sbrs	r3, 7
    1f5e:	81 91       	ld	r24, Z+
    1f60:	5f 01       	movw	r10, r30
    1f62:	b6 01       	movw	r22, r12
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    1f6a:	21 10       	cpse	r2, r1
    1f6c:	2a 94       	dec	r2
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	82 1a       	sub	r8, r18
    1f72:	91 08       	sbc	r9, r1
    1f74:	81 14       	cp	r8, r1
    1f76:	91 04       	cpc	r9, r1
    1f78:	71 f7       	brne	.-36     	; 0x1f56 <vfprintf+0x1a4>
    1f7a:	e8 c0       	rjmp	.+464    	; 0x214c <vfprintf+0x39a>
    1f7c:	84 36       	cpi	r24, 0x64	; 100
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <vfprintf+0x1d2>
    1f80:	89 36       	cpi	r24, 0x69	; 105
    1f82:	41 f5       	brne	.+80     	; 0x1fd4 <vfprintf+0x222>
    1f84:	f8 01       	movw	r30, r16
    1f86:	37 fe       	sbrs	r3, 7
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <vfprintf+0x1e6>
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	0c 5f       	subi	r16, 0xFC	; 252
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	08 c0       	rjmp	.+16     	; 0x1fa8 <vfprintf+0x1f6>
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	07 2e       	mov	r0, r23
    1f9e:	00 0c       	add	r0, r0
    1fa0:	88 0b       	sbc	r24, r24
    1fa2:	99 0b       	sbc	r25, r25
    1fa4:	0e 5f       	subi	r16, 0xFE	; 254
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	f3 2d       	mov	r31, r3
    1faa:	ff 76       	andi	r31, 0x6F	; 111
    1fac:	3f 2e       	mov	r3, r31
    1fae:	97 ff       	sbrs	r25, 7
    1fb0:	09 c0       	rjmp	.+18     	; 0x1fc4 <vfprintf+0x212>
    1fb2:	90 95       	com	r25
    1fb4:	80 95       	com	r24
    1fb6:	70 95       	com	r23
    1fb8:	61 95       	neg	r22
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	f0 68       	ori	r31, 0x80	; 128
    1fc2:	3f 2e       	mov	r3, r31
    1fc4:	2a e0       	ldi	r18, 0x0A	; 10
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	a3 01       	movw	r20, r6
    1fca:	0e 94 1c 11 	call	0x2238	; 0x2238 <__ultoa_invert>
    1fce:	88 2e       	mov	r8, r24
    1fd0:	86 18       	sub	r8, r6
    1fd2:	45 c0       	rjmp	.+138    	; 0x205e <vfprintf+0x2ac>
    1fd4:	85 37       	cpi	r24, 0x75	; 117
    1fd6:	31 f4       	brne	.+12     	; 0x1fe4 <vfprintf+0x232>
    1fd8:	23 2d       	mov	r18, r3
    1fda:	2f 7e       	andi	r18, 0xEF	; 239
    1fdc:	b2 2e       	mov	r11, r18
    1fde:	2a e0       	ldi	r18, 0x0A	; 10
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	25 c0       	rjmp	.+74     	; 0x202e <vfprintf+0x27c>
    1fe4:	93 2d       	mov	r25, r3
    1fe6:	99 7f       	andi	r25, 0xF9	; 249
    1fe8:	b9 2e       	mov	r11, r25
    1fea:	8f 36       	cpi	r24, 0x6F	; 111
    1fec:	c1 f0       	breq	.+48     	; 0x201e <vfprintf+0x26c>
    1fee:	18 f4       	brcc	.+6      	; 0x1ff6 <vfprintf+0x244>
    1ff0:	88 35       	cpi	r24, 0x58	; 88
    1ff2:	79 f0       	breq	.+30     	; 0x2012 <vfprintf+0x260>
    1ff4:	b5 c0       	rjmp	.+362    	; 0x2160 <vfprintf+0x3ae>
    1ff6:	80 37       	cpi	r24, 0x70	; 112
    1ff8:	19 f0       	breq	.+6      	; 0x2000 <vfprintf+0x24e>
    1ffa:	88 37       	cpi	r24, 0x78	; 120
    1ffc:	21 f0       	breq	.+8      	; 0x2006 <vfprintf+0x254>
    1ffe:	b0 c0       	rjmp	.+352    	; 0x2160 <vfprintf+0x3ae>
    2000:	e9 2f       	mov	r30, r25
    2002:	e0 61       	ori	r30, 0x10	; 16
    2004:	be 2e       	mov	r11, r30
    2006:	b4 fe       	sbrs	r11, 4
    2008:	0d c0       	rjmp	.+26     	; 0x2024 <vfprintf+0x272>
    200a:	fb 2d       	mov	r31, r11
    200c:	f4 60       	ori	r31, 0x04	; 4
    200e:	bf 2e       	mov	r11, r31
    2010:	09 c0       	rjmp	.+18     	; 0x2024 <vfprintf+0x272>
    2012:	34 fe       	sbrs	r3, 4
    2014:	0a c0       	rjmp	.+20     	; 0x202a <vfprintf+0x278>
    2016:	29 2f       	mov	r18, r25
    2018:	26 60       	ori	r18, 0x06	; 6
    201a:	b2 2e       	mov	r11, r18
    201c:	06 c0       	rjmp	.+12     	; 0x202a <vfprintf+0x278>
    201e:	28 e0       	ldi	r18, 0x08	; 8
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	05 c0       	rjmp	.+10     	; 0x202e <vfprintf+0x27c>
    2024:	20 e1       	ldi	r18, 0x10	; 16
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	02 c0       	rjmp	.+4      	; 0x202e <vfprintf+0x27c>
    202a:	20 e1       	ldi	r18, 0x10	; 16
    202c:	32 e0       	ldi	r19, 0x02	; 2
    202e:	f8 01       	movw	r30, r16
    2030:	b7 fe       	sbrs	r11, 7
    2032:	07 c0       	rjmp	.+14     	; 0x2042 <vfprintf+0x290>
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	0c 5f       	subi	r16, 0xFC	; 252
    203e:	1f 4f       	sbci	r17, 0xFF	; 255
    2040:	06 c0       	rjmp	.+12     	; 0x204e <vfprintf+0x29c>
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 5f       	subi	r16, 0xFE	; 254
    204c:	1f 4f       	sbci	r17, 0xFF	; 255
    204e:	a3 01       	movw	r20, r6
    2050:	0e 94 1c 11 	call	0x2238	; 0x2238 <__ultoa_invert>
    2054:	88 2e       	mov	r8, r24
    2056:	86 18       	sub	r8, r6
    2058:	fb 2d       	mov	r31, r11
    205a:	ff 77       	andi	r31, 0x7F	; 127
    205c:	3f 2e       	mov	r3, r31
    205e:	36 fe       	sbrs	r3, 6
    2060:	0d c0       	rjmp	.+26     	; 0x207c <vfprintf+0x2ca>
    2062:	23 2d       	mov	r18, r3
    2064:	2e 7f       	andi	r18, 0xFE	; 254
    2066:	a2 2e       	mov	r10, r18
    2068:	89 14       	cp	r8, r9
    206a:	58 f4       	brcc	.+22     	; 0x2082 <vfprintf+0x2d0>
    206c:	34 fe       	sbrs	r3, 4
    206e:	0b c0       	rjmp	.+22     	; 0x2086 <vfprintf+0x2d4>
    2070:	32 fc       	sbrc	r3, 2
    2072:	09 c0       	rjmp	.+18     	; 0x2086 <vfprintf+0x2d4>
    2074:	83 2d       	mov	r24, r3
    2076:	8e 7e       	andi	r24, 0xEE	; 238
    2078:	a8 2e       	mov	r10, r24
    207a:	05 c0       	rjmp	.+10     	; 0x2086 <vfprintf+0x2d4>
    207c:	b8 2c       	mov	r11, r8
    207e:	a3 2c       	mov	r10, r3
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <vfprintf+0x2d6>
    2082:	b8 2c       	mov	r11, r8
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <vfprintf+0x2d6>
    2086:	b9 2c       	mov	r11, r9
    2088:	a4 fe       	sbrs	r10, 4
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <vfprintf+0x2f8>
    208c:	fe 01       	movw	r30, r28
    208e:	e8 0d       	add	r30, r8
    2090:	f1 1d       	adc	r31, r1
    2092:	80 81       	ld	r24, Z
    2094:	80 33       	cpi	r24, 0x30	; 48
    2096:	21 f4       	brne	.+8      	; 0x20a0 <vfprintf+0x2ee>
    2098:	9a 2d       	mov	r25, r10
    209a:	99 7e       	andi	r25, 0xE9	; 233
    209c:	a9 2e       	mov	r10, r25
    209e:	09 c0       	rjmp	.+18     	; 0x20b2 <vfprintf+0x300>
    20a0:	a2 fe       	sbrs	r10, 2
    20a2:	06 c0       	rjmp	.+12     	; 0x20b0 <vfprintf+0x2fe>
    20a4:	b3 94       	inc	r11
    20a6:	b3 94       	inc	r11
    20a8:	04 c0       	rjmp	.+8      	; 0x20b2 <vfprintf+0x300>
    20aa:	8a 2d       	mov	r24, r10
    20ac:	86 78       	andi	r24, 0x86	; 134
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <vfprintf+0x300>
    20b0:	b3 94       	inc	r11
    20b2:	a3 fc       	sbrc	r10, 3
    20b4:	11 c0       	rjmp	.+34     	; 0x20d8 <vfprintf+0x326>
    20b6:	a0 fe       	sbrs	r10, 0
    20b8:	06 c0       	rjmp	.+12     	; 0x20c6 <vfprintf+0x314>
    20ba:	b2 14       	cp	r11, r2
    20bc:	88 f4       	brcc	.+34     	; 0x20e0 <vfprintf+0x32e>
    20be:	28 0c       	add	r2, r8
    20c0:	92 2c       	mov	r9, r2
    20c2:	9b 18       	sub	r9, r11
    20c4:	0e c0       	rjmp	.+28     	; 0x20e2 <vfprintf+0x330>
    20c6:	b2 14       	cp	r11, r2
    20c8:	60 f4       	brcc	.+24     	; 0x20e2 <vfprintf+0x330>
    20ca:	b6 01       	movw	r22, r12
    20cc:	80 e2       	ldi	r24, 0x20	; 32
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    20d4:	b3 94       	inc	r11
    20d6:	f7 cf       	rjmp	.-18     	; 0x20c6 <vfprintf+0x314>
    20d8:	b2 14       	cp	r11, r2
    20da:	18 f4       	brcc	.+6      	; 0x20e2 <vfprintf+0x330>
    20dc:	2b 18       	sub	r2, r11
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <vfprintf+0x332>
    20e0:	98 2c       	mov	r9, r8
    20e2:	21 2c       	mov	r2, r1
    20e4:	a4 fe       	sbrs	r10, 4
    20e6:	10 c0       	rjmp	.+32     	; 0x2108 <vfprintf+0x356>
    20e8:	b6 01       	movw	r22, r12
    20ea:	80 e3       	ldi	r24, 0x30	; 48
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    20f2:	a2 fe       	sbrs	r10, 2
    20f4:	17 c0       	rjmp	.+46     	; 0x2124 <vfprintf+0x372>
    20f6:	a1 fc       	sbrc	r10, 1
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <vfprintf+0x34e>
    20fa:	88 e7       	ldi	r24, 0x78	; 120
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <vfprintf+0x352>
    2100:	88 e5       	ldi	r24, 0x58	; 88
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	b6 01       	movw	r22, r12
    2106:	0c c0       	rjmp	.+24     	; 0x2120 <vfprintf+0x36e>
    2108:	8a 2d       	mov	r24, r10
    210a:	86 78       	andi	r24, 0x86	; 134
    210c:	59 f0       	breq	.+22     	; 0x2124 <vfprintf+0x372>
    210e:	a1 fe       	sbrs	r10, 1
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <vfprintf+0x364>
    2112:	8b e2       	ldi	r24, 0x2B	; 43
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <vfprintf+0x366>
    2116:	80 e2       	ldi	r24, 0x20	; 32
    2118:	a7 fc       	sbrc	r10, 7
    211a:	8d e2       	ldi	r24, 0x2D	; 45
    211c:	b6 01       	movw	r22, r12
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    2124:	89 14       	cp	r8, r9
    2126:	38 f4       	brcc	.+14     	; 0x2136 <vfprintf+0x384>
    2128:	b6 01       	movw	r22, r12
    212a:	80 e3       	ldi	r24, 0x30	; 48
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    2132:	9a 94       	dec	r9
    2134:	f7 cf       	rjmp	.-18     	; 0x2124 <vfprintf+0x372>
    2136:	8a 94       	dec	r8
    2138:	f3 01       	movw	r30, r6
    213a:	e8 0d       	add	r30, r8
    213c:	f1 1d       	adc	r31, r1
    213e:	80 81       	ld	r24, Z
    2140:	b6 01       	movw	r22, r12
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    2148:	81 10       	cpse	r8, r1
    214a:	f5 cf       	rjmp	.-22     	; 0x2136 <vfprintf+0x384>
    214c:	22 20       	and	r2, r2
    214e:	09 f4       	brne	.+2      	; 0x2152 <vfprintf+0x3a0>
    2150:	42 ce       	rjmp	.-892    	; 0x1dd6 <vfprintf+0x24>
    2152:	b6 01       	movw	r22, r12
    2154:	80 e2       	ldi	r24, 0x20	; 32
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <fputc>
    215c:	2a 94       	dec	r2
    215e:	f6 cf       	rjmp	.-20     	; 0x214c <vfprintf+0x39a>
    2160:	f6 01       	movw	r30, r12
    2162:	86 81       	ldd	r24, Z+6	; 0x06
    2164:	97 81       	ldd	r25, Z+7	; 0x07
    2166:	02 c0       	rjmp	.+4      	; 0x216c <vfprintf+0x3ba>
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	9f ef       	ldi	r25, 0xFF	; 255
    216c:	2b 96       	adiw	r28, 0x0b	; 11
    216e:	e2 e1       	ldi	r30, 0x12	; 18
    2170:	0c 94 96 11 	jmp	0x232c	; 0x232c <__epilogue_restores__>

00002174 <strnlen_P>:
    2174:	fc 01       	movw	r30, r24
    2176:	05 90       	lpm	r0, Z+
    2178:	61 50       	subi	r22, 0x01	; 1
    217a:	70 40       	sbci	r23, 0x00	; 0
    217c:	01 10       	cpse	r0, r1
    217e:	d8 f7       	brcc	.-10     	; 0x2176 <strnlen_P+0x2>
    2180:	80 95       	com	r24
    2182:	90 95       	com	r25
    2184:	8e 0f       	add	r24, r30
    2186:	9f 1f       	adc	r25, r31
    2188:	08 95       	ret

0000218a <strnlen>:
    218a:	fc 01       	movw	r30, r24
    218c:	61 50       	subi	r22, 0x01	; 1
    218e:	70 40       	sbci	r23, 0x00	; 0
    2190:	01 90       	ld	r0, Z+
    2192:	01 10       	cpse	r0, r1
    2194:	d8 f7       	brcc	.-10     	; 0x218c <strnlen+0x2>
    2196:	80 95       	com	r24
    2198:	90 95       	com	r25
    219a:	8e 0f       	add	r24, r30
    219c:	9f 1f       	adc	r25, r31
    219e:	08 95       	ret

000021a0 <strrev>:
    21a0:	dc 01       	movw	r26, r24
    21a2:	fc 01       	movw	r30, r24
    21a4:	67 2f       	mov	r22, r23
    21a6:	71 91       	ld	r23, Z+
    21a8:	77 23       	and	r23, r23
    21aa:	e1 f7       	brne	.-8      	; 0x21a4 <strrev+0x4>
    21ac:	32 97       	sbiw	r30, 0x02	; 2
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <strrev+0x18>
    21b0:	7c 91       	ld	r23, X
    21b2:	6d 93       	st	X+, r22
    21b4:	70 83       	st	Z, r23
    21b6:	62 91       	ld	r22, -Z
    21b8:	ae 17       	cp	r26, r30
    21ba:	bf 07       	cpc	r27, r31
    21bc:	c8 f3       	brcs	.-14     	; 0x21b0 <strrev+0x10>
    21be:	08 95       	ret

000021c0 <fputc>:
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	fb 01       	movw	r30, r22
    21ca:	23 81       	ldd	r18, Z+3	; 0x03
    21cc:	21 fd       	sbrc	r18, 1
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <fputc+0x16>
    21d0:	8f ef       	ldi	r24, 0xFF	; 255
    21d2:	9f ef       	ldi	r25, 0xFF	; 255
    21d4:	2c c0       	rjmp	.+88     	; 0x222e <fputc+0x6e>
    21d6:	22 ff       	sbrs	r18, 2
    21d8:	16 c0       	rjmp	.+44     	; 0x2206 <fputc+0x46>
    21da:	46 81       	ldd	r20, Z+6	; 0x06
    21dc:	57 81       	ldd	r21, Z+7	; 0x07
    21de:	24 81       	ldd	r18, Z+4	; 0x04
    21e0:	35 81       	ldd	r19, Z+5	; 0x05
    21e2:	42 17       	cp	r20, r18
    21e4:	53 07       	cpc	r21, r19
    21e6:	44 f4       	brge	.+16     	; 0x21f8 <fputc+0x38>
    21e8:	a0 81       	ld	r26, Z
    21ea:	b1 81       	ldd	r27, Z+1	; 0x01
    21ec:	9d 01       	movw	r18, r26
    21ee:	2f 5f       	subi	r18, 0xFF	; 255
    21f0:	3f 4f       	sbci	r19, 0xFF	; 255
    21f2:	31 83       	std	Z+1, r19	; 0x01
    21f4:	20 83       	st	Z, r18
    21f6:	8c 93       	st	X, r24
    21f8:	26 81       	ldd	r18, Z+6	; 0x06
    21fa:	37 81       	ldd	r19, Z+7	; 0x07
    21fc:	2f 5f       	subi	r18, 0xFF	; 255
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	37 83       	std	Z+7, r19	; 0x07
    2202:	26 83       	std	Z+6, r18	; 0x06
    2204:	14 c0       	rjmp	.+40     	; 0x222e <fputc+0x6e>
    2206:	8b 01       	movw	r16, r22
    2208:	ec 01       	movw	r28, r24
    220a:	fb 01       	movw	r30, r22
    220c:	00 84       	ldd	r0, Z+8	; 0x08
    220e:	f1 85       	ldd	r31, Z+9	; 0x09
    2210:	e0 2d       	mov	r30, r0
    2212:	09 95       	icall
    2214:	89 2b       	or	r24, r25
    2216:	e1 f6       	brne	.-72     	; 0x21d0 <fputc+0x10>
    2218:	d8 01       	movw	r26, r16
    221a:	16 96       	adiw	r26, 0x06	; 6
    221c:	8d 91       	ld	r24, X+
    221e:	9c 91       	ld	r25, X
    2220:	17 97       	sbiw	r26, 0x07	; 7
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	17 96       	adiw	r26, 0x07	; 7
    2226:	9c 93       	st	X, r25
    2228:	8e 93       	st	-X, r24
    222a:	16 97       	sbiw	r26, 0x06	; 6
    222c:	ce 01       	movw	r24, r28
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	08 95       	ret

00002238 <__ultoa_invert>:
    2238:	fa 01       	movw	r30, r20
    223a:	aa 27       	eor	r26, r26
    223c:	28 30       	cpi	r18, 0x08	; 8
    223e:	51 f1       	breq	.+84     	; 0x2294 <__ultoa_invert+0x5c>
    2240:	20 31       	cpi	r18, 0x10	; 16
    2242:	81 f1       	breq	.+96     	; 0x22a4 <__ultoa_invert+0x6c>
    2244:	e8 94       	clt
    2246:	6f 93       	push	r22
    2248:	6e 7f       	andi	r22, 0xFE	; 254
    224a:	6e 5f       	subi	r22, 0xFE	; 254
    224c:	7f 4f       	sbci	r23, 0xFF	; 255
    224e:	8f 4f       	sbci	r24, 0xFF	; 255
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	af 4f       	sbci	r26, 0xFF	; 255
    2254:	b1 e0       	ldi	r27, 0x01	; 1
    2256:	3e d0       	rcall	.+124    	; 0x22d4 <__ultoa_invert+0x9c>
    2258:	b4 e0       	ldi	r27, 0x04	; 4
    225a:	3c d0       	rcall	.+120    	; 0x22d4 <__ultoa_invert+0x9c>
    225c:	67 0f       	add	r22, r23
    225e:	78 1f       	adc	r23, r24
    2260:	89 1f       	adc	r24, r25
    2262:	9a 1f       	adc	r25, r26
    2264:	a1 1d       	adc	r26, r1
    2266:	68 0f       	add	r22, r24
    2268:	79 1f       	adc	r23, r25
    226a:	8a 1f       	adc	r24, r26
    226c:	91 1d       	adc	r25, r1
    226e:	a1 1d       	adc	r26, r1
    2270:	6a 0f       	add	r22, r26
    2272:	71 1d       	adc	r23, r1
    2274:	81 1d       	adc	r24, r1
    2276:	91 1d       	adc	r25, r1
    2278:	a1 1d       	adc	r26, r1
    227a:	20 d0       	rcall	.+64     	; 0x22bc <__ultoa_invert+0x84>
    227c:	09 f4       	brne	.+2      	; 0x2280 <__ultoa_invert+0x48>
    227e:	68 94       	set
    2280:	3f 91       	pop	r19
    2282:	2a e0       	ldi	r18, 0x0A	; 10
    2284:	26 9f       	mul	r18, r22
    2286:	11 24       	eor	r1, r1
    2288:	30 19       	sub	r19, r0
    228a:	30 5d       	subi	r19, 0xD0	; 208
    228c:	31 93       	st	Z+, r19
    228e:	de f6       	brtc	.-74     	; 0x2246 <__ultoa_invert+0xe>
    2290:	cf 01       	movw	r24, r30
    2292:	08 95       	ret
    2294:	46 2f       	mov	r20, r22
    2296:	47 70       	andi	r20, 0x07	; 7
    2298:	40 5d       	subi	r20, 0xD0	; 208
    229a:	41 93       	st	Z+, r20
    229c:	b3 e0       	ldi	r27, 0x03	; 3
    229e:	0f d0       	rcall	.+30     	; 0x22be <__ultoa_invert+0x86>
    22a0:	c9 f7       	brne	.-14     	; 0x2294 <__ultoa_invert+0x5c>
    22a2:	f6 cf       	rjmp	.-20     	; 0x2290 <__ultoa_invert+0x58>
    22a4:	46 2f       	mov	r20, r22
    22a6:	4f 70       	andi	r20, 0x0F	; 15
    22a8:	40 5d       	subi	r20, 0xD0	; 208
    22aa:	4a 33       	cpi	r20, 0x3A	; 58
    22ac:	18 f0       	brcs	.+6      	; 0x22b4 <__ultoa_invert+0x7c>
    22ae:	49 5d       	subi	r20, 0xD9	; 217
    22b0:	31 fd       	sbrc	r19, 1
    22b2:	40 52       	subi	r20, 0x20	; 32
    22b4:	41 93       	st	Z+, r20
    22b6:	02 d0       	rcall	.+4      	; 0x22bc <__ultoa_invert+0x84>
    22b8:	a9 f7       	brne	.-22     	; 0x22a4 <__ultoa_invert+0x6c>
    22ba:	ea cf       	rjmp	.-44     	; 0x2290 <__ultoa_invert+0x58>
    22bc:	b4 e0       	ldi	r27, 0x04	; 4
    22be:	a6 95       	lsr	r26
    22c0:	97 95       	ror	r25
    22c2:	87 95       	ror	r24
    22c4:	77 95       	ror	r23
    22c6:	67 95       	ror	r22
    22c8:	ba 95       	dec	r27
    22ca:	c9 f7       	brne	.-14     	; 0x22be <__ultoa_invert+0x86>
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	61 05       	cpc	r22, r1
    22d0:	71 05       	cpc	r23, r1
    22d2:	08 95       	ret
    22d4:	9b 01       	movw	r18, r22
    22d6:	ac 01       	movw	r20, r24
    22d8:	0a 2e       	mov	r0, r26
    22da:	06 94       	lsr	r0
    22dc:	57 95       	ror	r21
    22de:	47 95       	ror	r20
    22e0:	37 95       	ror	r19
    22e2:	27 95       	ror	r18
    22e4:	ba 95       	dec	r27
    22e6:	c9 f7       	brne	.-14     	; 0x22da <__ultoa_invert+0xa2>
    22e8:	62 0f       	add	r22, r18
    22ea:	73 1f       	adc	r23, r19
    22ec:	84 1f       	adc	r24, r20
    22ee:	95 1f       	adc	r25, r21
    22f0:	a0 1d       	adc	r26, r0
    22f2:	08 95       	ret

000022f4 <__prologue_saves__>:
    22f4:	2f 92       	push	r2
    22f6:	3f 92       	push	r3
    22f8:	4f 92       	push	r4
    22fa:	5f 92       	push	r5
    22fc:	6f 92       	push	r6
    22fe:	7f 92       	push	r7
    2300:	8f 92       	push	r8
    2302:	9f 92       	push	r9
    2304:	af 92       	push	r10
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	ca 1b       	sub	r28, r26
    231e:	db 0b       	sbc	r29, r27
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	09 94       	ijmp

0000232c <__epilogue_restores__>:
    232c:	2a 88       	ldd	r2, Y+18	; 0x12
    232e:	39 88       	ldd	r3, Y+17	; 0x11
    2330:	48 88       	ldd	r4, Y+16	; 0x10
    2332:	5f 84       	ldd	r5, Y+15	; 0x0f
    2334:	6e 84       	ldd	r6, Y+14	; 0x0e
    2336:	7d 84       	ldd	r7, Y+13	; 0x0d
    2338:	8c 84       	ldd	r8, Y+12	; 0x0c
    233a:	9b 84       	ldd	r9, Y+11	; 0x0b
    233c:	aa 84       	ldd	r10, Y+10	; 0x0a
    233e:	b9 84       	ldd	r11, Y+9	; 0x09
    2340:	c8 84       	ldd	r12, Y+8	; 0x08
    2342:	df 80       	ldd	r13, Y+7	; 0x07
    2344:	ee 80       	ldd	r14, Y+6	; 0x06
    2346:	fd 80       	ldd	r15, Y+5	; 0x05
    2348:	0c 81       	ldd	r16, Y+4	; 0x04
    234a:	1b 81       	ldd	r17, Y+3	; 0x03
    234c:	aa 81       	ldd	r26, Y+2	; 0x02
    234e:	b9 81       	ldd	r27, Y+1	; 0x01
    2350:	ce 0f       	add	r28, r30
    2352:	d1 1d       	adc	r29, r1
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	ed 01       	movw	r28, r26
    2360:	08 95       	ret

00002362 <_exit>:
    2362:	f8 94       	cli

00002364 <__stop_program>:
    2364:	ff cf       	rjmp	.-2      	; 0x2364 <__stop_program>
